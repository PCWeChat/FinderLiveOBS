// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flobsinfo.proto

#include "flobsinfo.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace flremoting {
namespace protocol {
PROTOBUF_CONSTEXPR ObsPropertyDoubleInfo::ObsPropertyDoubleInfo(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , value_(0){}
struct ObsPropertyDoubleInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObsPropertyDoubleInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObsPropertyDoubleInfoDefaultTypeInternal() {}
  union {
    ObsPropertyDoubleInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObsPropertyDoubleInfoDefaultTypeInternal _ObsPropertyDoubleInfo_default_instance_;
PROTOBUF_CONSTEXPR ObsPropertyInt64Info::ObsPropertyInt64Info(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , value_(int64_t{0}){}
struct ObsPropertyInt64InfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObsPropertyInt64InfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObsPropertyInt64InfoDefaultTypeInternal() {}
  union {
    ObsPropertyInt64Info _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObsPropertyInt64InfoDefaultTypeInternal _ObsPropertyInt64Info_default_instance_;
PROTOBUF_CONSTEXPR ObsPropertyStringInfo::ObsPropertyStringInfo(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , value_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ObsPropertyStringInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObsPropertyStringInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObsPropertyStringInfoDefaultTypeInternal() {}
  union {
    ObsPropertyStringInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObsPropertyStringInfoDefaultTypeInternal _ObsPropertyStringInfo_default_instance_;
PROTOBUF_CONSTEXPR ObsPropertiesInfo::ObsPropertiesInfo(
    ::_pbi::ConstantInitialized)
  : info_double_values_()
  , info_int64_values_()
  , info_string_values_()
  , info_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , info_string_value_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , info_type_(0)

  , info_bool_value_(false)
  , info_double_value_(0)
  , info_int_value_(0){}
struct ObsPropertiesInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObsPropertiesInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObsPropertiesInfoDefaultTypeInternal() {}
  union {
    ObsPropertiesInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObsPropertiesInfoDefaultTypeInternal _ObsPropertiesInfo_default_instance_;
PROTOBUF_CONSTEXPR ObsPropertiesData::ObsPropertiesData(
    ::_pbi::ConstantInitialized)
  : obs_properties_infos_(){}
struct ObsPropertiesDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObsPropertiesDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObsPropertiesDataDefaultTypeInternal() {}
  union {
    ObsPropertiesData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObsPropertiesDataDefaultTypeInternal _ObsPropertiesData_default_instance_;
PROTOBUF_CONSTEXPR ObsTextSourceData::ObsTextSourceData(
    ::_pbi::ConstantInitialized)
  : source_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , source_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , face_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , style_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , obs_properties_data_(nullptr)
  , flags_(0)
  , size_(0){}
struct ObsTextSourceDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObsTextSourceDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObsTextSourceDataDefaultTypeInternal() {}
  union {
    ObsTextSourceData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObsTextSourceDataDefaultTypeInternal _ObsTextSourceData_default_instance_;
PROTOBUF_CONSTEXPR ObsImageSourceData::ObsImageSourceData(
    ::_pbi::ConstantInitialized)
  : source_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , source_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , obs_properties_data_(nullptr){}
struct ObsImageSourceDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObsImageSourceDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObsImageSourceDataDefaultTypeInternal() {}
  union {
    ObsImageSourceData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObsImageSourceDataDefaultTypeInternal _ObsImageSourceData_default_instance_;
PROTOBUF_CONSTEXPR ObsVideoSourceData::ObsVideoSourceData(
    ::_pbi::ConstantInitialized)
  : source_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , source_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , obs_properties_data_(nullptr){}
struct ObsVideoSourceDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObsVideoSourceDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObsVideoSourceDataDefaultTypeInternal() {}
  union {
    ObsVideoSourceData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObsVideoSourceDataDefaultTypeInternal _ObsVideoSourceData_default_instance_;
PROTOBUF_CONSTEXPR ObsCaptureSourceWindowInfo::ObsCaptureSourceWindowInfo(
    ::_pbi::ConstantInitialized)
  : window_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , office_file_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , cursor_(false)
  , client_area_(false){}
struct ObsCaptureSourceWindowInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObsCaptureSourceWindowInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObsCaptureSourceWindowInfoDefaultTypeInternal() {}
  union {
    ObsCaptureSourceWindowInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObsCaptureSourceWindowInfoDefaultTypeInternal _ObsCaptureSourceWindowInfo_default_instance_;
PROTOBUF_CONSTEXPR ObsCaptureSourceGameInfo::ObsCaptureSourceGameInfo(
    ::_pbi::ConstantInitialized)
  : capture_mode_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , window_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , anti_cheat_hook_(false)
  , capture_overlays_(false)
  , capture_cursor_(false){}
struct ObsCaptureSourceGameInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObsCaptureSourceGameInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObsCaptureSourceGameInfoDefaultTypeInternal() {}
  union {
    ObsCaptureSourceGameInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObsCaptureSourceGameInfoDefaultTypeInternal _ObsCaptureSourceGameInfo_default_instance_;
PROTOBUF_CONSTEXPR ObsCaptureSourceMonitorInfo::ObsCaptureSourceMonitorInfo(
    ::_pbi::ConstantInitialized)
  : monitor_(int64_t{0})
  , left_(int64_t{0})
  , right_(int64_t{0})
  , top_(int64_t{0})
  , bottom_(int64_t{0})
  , use_rect_(false)
  , capture_cursor_(false){}
struct ObsCaptureSourceMonitorInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObsCaptureSourceMonitorInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObsCaptureSourceMonitorInfoDefaultTypeInternal() {}
  union {
    ObsCaptureSourceMonitorInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObsCaptureSourceMonitorInfoDefaultTypeInternal _ObsCaptureSourceMonitorInfo_default_instance_;
PROTOBUF_CONSTEXPR ObsCaptureSourceData::ObsCaptureSourceData(
    ::_pbi::ConstantInitialized)
  : source_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , source_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , payload_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , method_(int64_t{0})
  , priority_(int64_t{0})
  , use_wildcards_(false)
  , compatibility_(false){}
struct ObsCaptureSourceDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObsCaptureSourceDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObsCaptureSourceDataDefaultTypeInternal() {}
  union {
    ObsCaptureSourceData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObsCaptureSourceDataDefaultTypeInternal _ObsCaptureSourceData_default_instance_;
PROTOBUF_CONSTEXPR ObsPhoneCastingSourceData::ObsPhoneCastingSourceData(
    ::_pbi::ConstantInitialized)
  : source_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , source_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , method_(int64_t{0})
  , audio_channel_(int64_t{0})
  , audio_sample_rate_(int64_t{0})
  , casting_frame_(int64_t{0})
  , hardware_decode_(false)
  , cpu_status_(false)
  , force_update_(false){}
struct ObsPhoneCastingSourceDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObsPhoneCastingSourceDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObsPhoneCastingSourceDataDefaultTypeInternal() {}
  union {
    ObsPhoneCastingSourceData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObsPhoneCastingSourceDataDefaultTypeInternal _ObsPhoneCastingSourceData_default_instance_;
PROTOBUF_CONSTEXPR ObsCameraSourceData::ObsCameraSourceData(
    ::_pbi::ConstantInitialized)
  : source_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , source_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , obs_properties_data_(nullptr)
  , source_hwnd_(0u)
  , save_source_(false)
  , change_id_(false){}
struct ObsCameraSourceDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObsCameraSourceDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObsCameraSourceDataDefaultTypeInternal() {}
  union {
    ObsCameraSourceData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObsCameraSourceDataDefaultTypeInternal _ObsCameraSourceData_default_instance_;
PROTOBUF_CONSTEXPR InputVolumeData::InputVolumeData(
    ::_pbi::ConstantInitialized)
  : value_(0){}
struct InputVolumeDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InputVolumeDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InputVolumeDataDefaultTypeInternal() {}
  union {
    InputVolumeData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InputVolumeDataDefaultTypeInternal _InputVolumeData_default_instance_;
PROTOBUF_CONSTEXPR OutputVolumeData::OutputVolumeData(
    ::_pbi::ConstantInitialized)
  : value_(0){}
struct OutputVolumeDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OutputVolumeDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OutputVolumeDataDefaultTypeInternal() {}
  union {
    OutputVolumeData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OutputVolumeDataDefaultTypeInternal _OutputVolumeData_default_instance_;
PROTOBUF_CONSTEXPR ObsItemMessage::ObsItemMessage(
    ::_pbi::ConstantInitialized)
  : source_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , source_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , source_data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , item_id_(int64_t{0})
  , item_visible_(false)
  , item_lock_status_(false)
  , source_width_(0u)
  , source_height_(0u){}
struct ObsItemMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObsItemMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObsItemMessageDefaultTypeInternal() {}
  union {
    ObsItemMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObsItemMessageDefaultTypeInternal _ObsItemMessage_default_instance_;
PROTOBUF_CONSTEXPR ObsCursorMessage::ObsCursorMessage(
    ::_pbi::ConstantInitialized)
  : cursor_status_(false){}
struct ObsCursorMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObsCursorMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObsCursorMessageDefaultTypeInternal() {}
  union {
    ObsCursorMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObsCursorMessageDefaultTypeInternal _ObsCursorMessage_default_instance_;
PROTOBUF_CONSTEXPR ObsItemEditMessage::ObsItemEditMessage(
    ::_pbi::ConstantInitialized)
  : item_id_(int64_t{0})
  , action_type_(0)
{}
struct ObsItemEditMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObsItemEditMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObsItemEditMessageDefaultTypeInternal() {}
  union {
    ObsItemEditMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObsItemEditMessageDefaultTypeInternal _ObsItemEditMessage_default_instance_;
PROTOBUF_CONSTEXPR ObsItemEditMessageReq::ObsItemEditMessageReq(
    ::_pbi::ConstantInitialized)
  : edit_info_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , edit_msg_(nullptr){}
struct ObsItemEditMessageReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObsItemEditMessageReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObsItemEditMessageReqDefaultTypeInternal() {}
  union {
    ObsItemEditMessageReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObsItemEditMessageReqDefaultTypeInternal _ObsItemEditMessageReq_default_instance_;
PROTOBUF_CONSTEXPR ObsItemEditMessageResp::ObsItemEditMessageResp(
    ::_pbi::ConstantInitialized)
  : base_msg_(nullptr)
  , edit_msg_(nullptr){}
struct ObsItemEditMessageRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObsItemEditMessageRespDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObsItemEditMessageRespDefaultTypeInternal() {}
  union {
    ObsItemEditMessageResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObsItemEditMessageRespDefaultTypeInternal _ObsItemEditMessageResp_default_instance_;
PROTOBUF_CONSTEXPR ObsDeviceInfo::ObsDeviceInfo(
    ::_pbi::ConstantInitialized)
  : device_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , device_data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ObsDeviceInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObsDeviceInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObsDeviceInfoDefaultTypeInternal() {}
  union {
    ObsDeviceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObsDeviceInfoDefaultTypeInternal _ObsDeviceInfo_default_instance_;
PROTOBUF_CONSTEXPR ObsDeviceMessage::ObsDeviceMessage(
    ::_pbi::ConstantInitialized)
  : device_infos_()
  , id_value_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , device_type_(0)

  , noise_value_(0)
  , gain_value_(0)
  , is_activate_(false)
  , monitoring_value_(0){}
struct ObsDeviceMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObsDeviceMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObsDeviceMessageDefaultTypeInternal() {}
  union {
    ObsDeviceMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObsDeviceMessageDefaultTypeInternal _ObsDeviceMessage_default_instance_;
PROTOBUF_CONSTEXPR ObsDeviceEditMessageRequest::ObsDeviceEditMessageRequest(
    ::_pbi::ConstantInitialized)
  : used_str_value_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , action_type_(0)

  , used_int_value_(0)
  , used_double_value_(0){}
struct ObsDeviceEditMessageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObsDeviceEditMessageRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObsDeviceEditMessageRequestDefaultTypeInternal() {}
  union {
    ObsDeviceEditMessageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObsDeviceEditMessageRequestDefaultTypeInternal _ObsDeviceEditMessageRequest_default_instance_;
PROTOBUF_CONSTEXPR ObsSourceFrame2Message::ObsSourceFrame2Message(
    ::_pbi::ConstantInitialized)
  : frame_data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , frame_id_(int64_t{0})
  , frame_format_(0u)
  , frame_width_(0u)
  , frame_height_(0u){}
struct ObsSourceFrame2MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObsSourceFrame2MessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObsSourceFrame2MessageDefaultTypeInternal() {}
  union {
    ObsSourceFrame2Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObsSourceFrame2MessageDefaultTypeInternal _ObsSourceFrame2Message_default_instance_;
PROTOBUF_CONSTEXPR ObsSceneItemInfoData::ObsSceneItemInfoData(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , posx_(0)
  , posy_(0)
  , width_(0)
  , height_(0)
  , itemid_(int64_t{0})
  , visible_(false){}
struct ObsSceneItemInfoDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObsSceneItemInfoDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObsSceneItemInfoDataDefaultTypeInternal() {}
  union {
    ObsSceneItemInfoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObsSceneItemInfoDataDefaultTypeInternal _ObsSceneItemInfoData_default_instance_;
PROTOBUF_CONSTEXPR ObsSceneItemInfoMessage::ObsSceneItemInfoMessage(
    ::_pbi::ConstantInitialized)
  : infos_()
  , fps_(0)
  , peak_volume_(0){}
struct ObsSceneItemInfoMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObsSceneItemInfoMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObsSceneItemInfoMessageDefaultTypeInternal() {}
  union {
    ObsSceneItemInfoMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObsSceneItemInfoMessageDefaultTypeInternal _ObsSceneItemInfoMessage_default_instance_;
PROTOBUF_CONSTEXPR ObsFPSInfoMessage::ObsFPSInfoMessage(
    ::_pbi::ConstantInitialized)
  : fpsnum_(0u)
  , fpsden_(0u){}
struct ObsFPSInfoMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObsFPSInfoMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObsFPSInfoMessageDefaultTypeInternal() {}
  union {
    ObsFPSInfoMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObsFPSInfoMessageDefaultTypeInternal _ObsFPSInfoMessage_default_instance_;
PROTOBUF_CONSTEXPR ObsMeanRateInfoMessage::ObsMeanRateInfoMessage(
    ::_pbi::ConstantInitialized)
  : enable_(false)
  , fpsnum_(0){}
struct ObsMeanRateInfoMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObsMeanRateInfoMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObsMeanRateInfoMessageDefaultTypeInternal() {}
  union {
    ObsMeanRateInfoMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObsMeanRateInfoMessageDefaultTypeInternal _ObsMeanRateInfoMessage_default_instance_;
}  // namespace protocol
}  // namespace flremoting
namespace flremoting {
namespace protocol {
bool ObsPropertyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ObsPropertyType_strings[14] = {};

static const char ObsPropertyType_names[] =
  "OBS_PROPERTY_BOOL"
  "OBS_PROPERTY_BUTTON"
  "OBS_PROPERTY_COLOR"
  "OBS_PROPERTY_COLOR_ALPHA"
  "OBS_PROPERTY_EDITABLE_LIST"
  "OBS_PROPERTY_FLOAT"
  "OBS_PROPERTY_FONT"
  "OBS_PROPERTY_FRAME_RATE"
  "OBS_PROPERTY_GROUP"
  "OBS_PROPERTY_INT"
  "OBS_PROPERTY_INVALID"
  "OBS_PROPERTY_LIST"
  "OBS_PROPERTY_PATH"
  "OBS_PROPERTY_TEXT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ObsPropertyType_entries[] = {
  { {ObsPropertyType_names + 0, 17}, 1 },
  { {ObsPropertyType_names + 17, 19}, 8 },
  { {ObsPropertyType_names + 36, 18}, 7 },
  { {ObsPropertyType_names + 54, 24}, 13 },
  { {ObsPropertyType_names + 78, 26}, 10 },
  { {ObsPropertyType_names + 104, 18}, 3 },
  { {ObsPropertyType_names + 122, 17}, 9 },
  { {ObsPropertyType_names + 139, 23}, 11 },
  { {ObsPropertyType_names + 162, 18}, 12 },
  { {ObsPropertyType_names + 180, 16}, 2 },
  { {ObsPropertyType_names + 196, 20}, 0 },
  { {ObsPropertyType_names + 216, 17}, 6 },
  { {ObsPropertyType_names + 233, 17}, 5 },
  { {ObsPropertyType_names + 250, 17}, 4 },
};

static const int ObsPropertyType_entries_by_number[] = {
  10, // 0 -> OBS_PROPERTY_INVALID
  0, // 1 -> OBS_PROPERTY_BOOL
  9, // 2 -> OBS_PROPERTY_INT
  5, // 3 -> OBS_PROPERTY_FLOAT
  13, // 4 -> OBS_PROPERTY_TEXT
  12, // 5 -> OBS_PROPERTY_PATH
  11, // 6 -> OBS_PROPERTY_LIST
  2, // 7 -> OBS_PROPERTY_COLOR
  1, // 8 -> OBS_PROPERTY_BUTTON
  6, // 9 -> OBS_PROPERTY_FONT
  4, // 10 -> OBS_PROPERTY_EDITABLE_LIST
  7, // 11 -> OBS_PROPERTY_FRAME_RATE
  8, // 12 -> OBS_PROPERTY_GROUP
  3, // 13 -> OBS_PROPERTY_COLOR_ALPHA
};

const std::string& ObsPropertyType_Name(
    ObsPropertyType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ObsPropertyType_entries,
          ObsPropertyType_entries_by_number,
          14, ObsPropertyType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ObsPropertyType_entries,
      ObsPropertyType_entries_by_number,
      14, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ObsPropertyType_strings[idx].get();
}
bool ObsPropertyType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ObsPropertyType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ObsPropertyType_entries, 14, name, &int_value);
  if (success) {
    *value = static_cast<ObsPropertyType>(int_value);
  }
  return success;
}
bool ObsItemActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ObsItemActionType_strings[19] = {};

static const char ObsItemActionType_names[] =
  "OBS_ITEMACTION_ANTI_ROT"
  "OBS_ITEMACTION_BOTTOM"
  "OBS_ITEMACTION_DOWN"
  "OBS_ITEMACTION_FULL"
  "OBS_ITEMACTION_FULLNON"
  "OBS_ITEMACTION_HIDE"
  "OBS_ITEMACTION_HOR_FLIP"
  "OBS_ITEMACTION_LOCK"
  "OBS_ITEMACTION_POSITION"
  "OBS_ITEMACTION_REMOVE"
  "OBS_ITEMACTION_RENAME"
  "OBS_ITEMACTION_RESET"
  "OBS_ITEMACTION_ROT"
  "OBS_ITEMACTION_SELECT"
  "OBS_ITEMACTION_SHOW"
  "OBS_ITEMACTION_TOP"
  "OBS_ITEMACTION_UNLOCK"
  "OBS_ITEMACTION_UP"
  "OBS_ITEMACTION_VER_FLIP";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ObsItemActionType_entries[] = {
  { {ObsItemActionType_names + 0, 23}, 11 },
  { {ObsItemActionType_names + 23, 21}, 4 },
  { {ObsItemActionType_names + 44, 19}, 2 },
  { {ObsItemActionType_names + 63, 19}, 8 },
  { {ObsItemActionType_names + 82, 22}, 9 },
  { {ObsItemActionType_names + 104, 19}, 6 },
  { {ObsItemActionType_names + 123, 23}, 13 },
  { {ObsItemActionType_names + 146, 19}, 16 },
  { {ObsItemActionType_names + 165, 23}, 18 },
  { {ObsItemActionType_names + 188, 21}, 0 },
  { {ObsItemActionType_names + 209, 21}, 15 },
  { {ObsItemActionType_names + 230, 20}, 7 },
  { {ObsItemActionType_names + 250, 18}, 10 },
  { {ObsItemActionType_names + 268, 21}, 12 },
  { {ObsItemActionType_names + 289, 19}, 5 },
  { {ObsItemActionType_names + 308, 18}, 3 },
  { {ObsItemActionType_names + 326, 21}, 17 },
  { {ObsItemActionType_names + 347, 17}, 1 },
  { {ObsItemActionType_names + 364, 23}, 14 },
};

static const int ObsItemActionType_entries_by_number[] = {
  9, // 0 -> OBS_ITEMACTION_REMOVE
  17, // 1 -> OBS_ITEMACTION_UP
  2, // 2 -> OBS_ITEMACTION_DOWN
  15, // 3 -> OBS_ITEMACTION_TOP
  1, // 4 -> OBS_ITEMACTION_BOTTOM
  14, // 5 -> OBS_ITEMACTION_SHOW
  5, // 6 -> OBS_ITEMACTION_HIDE
  11, // 7 -> OBS_ITEMACTION_RESET
  3, // 8 -> OBS_ITEMACTION_FULL
  4, // 9 -> OBS_ITEMACTION_FULLNON
  12, // 10 -> OBS_ITEMACTION_ROT
  0, // 11 -> OBS_ITEMACTION_ANTI_ROT
  13, // 12 -> OBS_ITEMACTION_SELECT
  6, // 13 -> OBS_ITEMACTION_HOR_FLIP
  18, // 14 -> OBS_ITEMACTION_VER_FLIP
  10, // 15 -> OBS_ITEMACTION_RENAME
  7, // 16 -> OBS_ITEMACTION_LOCK
  16, // 17 -> OBS_ITEMACTION_UNLOCK
  8, // 18 -> OBS_ITEMACTION_POSITION
};

const std::string& ObsItemActionType_Name(
    ObsItemActionType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ObsItemActionType_entries,
          ObsItemActionType_entries_by_number,
          19, ObsItemActionType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ObsItemActionType_entries,
      ObsItemActionType_entries_by_number,
      19, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ObsItemActionType_strings[idx].get();
}
bool ObsItemActionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ObsItemActionType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ObsItemActionType_entries, 19, name, &int_value);
  if (success) {
    *value = static_cast<ObsItemActionType>(int_value);
  }
  return success;
}
bool ObsDeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ObsDeviceType_strings[2] = {};

static const char ObsDeviceType_names[] =
  "OBS_DEVICE_INPUT_MIC"
  "OBS_DEVICE_OUTPUT_SPEAKER";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ObsDeviceType_entries[] = {
  { {ObsDeviceType_names + 0, 20}, 0 },
  { {ObsDeviceType_names + 20, 25}, 1 },
};

static const int ObsDeviceType_entries_by_number[] = {
  0, // 0 -> OBS_DEVICE_INPUT_MIC
  1, // 1 -> OBS_DEVICE_OUTPUT_SPEAKER
};

const std::string& ObsDeviceType_Name(
    ObsDeviceType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ObsDeviceType_entries,
          ObsDeviceType_entries_by_number,
          2, ObsDeviceType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ObsDeviceType_entries,
      ObsDeviceType_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ObsDeviceType_strings[idx].get();
}
bool ObsDeviceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ObsDeviceType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ObsDeviceType_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<ObsDeviceType>(int_value);
  }
  return success;
}
bool ObsDeviceActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ObsDeviceActionType_strings[6] = {};

static const char ObsDeviceActionType_names[] =
  "OBS_DEVICEACTION_INPUT_GAIN"
  "OBS_DEVICEACTION_INPUT_ID"
  "OBS_DEVICEACTION_INPUT_MT"
  "OBS_DEVICEACTION_INPUT_NOISE"
  "OBS_DEVICEACTION_OUTPUT_GAIN"
  "OBS_DEVICEACTION_OUTPUT_ID";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ObsDeviceActionType_entries[] = {
  { {ObsDeviceActionType_names + 0, 27}, 2 },
  { {ObsDeviceActionType_names + 27, 25}, 0 },
  { {ObsDeviceActionType_names + 52, 25}, 5 },
  { {ObsDeviceActionType_names + 77, 28}, 3 },
  { {ObsDeviceActionType_names + 105, 28}, 4 },
  { {ObsDeviceActionType_names + 133, 26}, 1 },
};

static const int ObsDeviceActionType_entries_by_number[] = {
  1, // 0 -> OBS_DEVICEACTION_INPUT_ID
  5, // 1 -> OBS_DEVICEACTION_OUTPUT_ID
  0, // 2 -> OBS_DEVICEACTION_INPUT_GAIN
  3, // 3 -> OBS_DEVICEACTION_INPUT_NOISE
  4, // 4 -> OBS_DEVICEACTION_OUTPUT_GAIN
  2, // 5 -> OBS_DEVICEACTION_INPUT_MT
};

const std::string& ObsDeviceActionType_Name(
    ObsDeviceActionType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ObsDeviceActionType_entries,
          ObsDeviceActionType_entries_by_number,
          6, ObsDeviceActionType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ObsDeviceActionType_entries,
      ObsDeviceActionType_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ObsDeviceActionType_strings[idx].get();
}
bool ObsDeviceActionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ObsDeviceActionType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ObsDeviceActionType_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<ObsDeviceActionType>(int_value);
  }
  return success;
}

// ===================================================================

class ObsPropertyDoubleInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ObsPropertyDoubleInfo>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ObsPropertyDoubleInfo::ObsPropertyDoubleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flremoting.protocol.ObsPropertyDoubleInfo)
}
ObsPropertyDoubleInfo::ObsPropertyDoubleInfo(const ObsPropertyDoubleInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:flremoting.protocol.ObsPropertyDoubleInfo)
}

inline void ObsPropertyDoubleInfo::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_ = 0;
}

ObsPropertyDoubleInfo::~ObsPropertyDoubleInfo() {
  // @@protoc_insertion_point(destructor:flremoting.protocol.ObsPropertyDoubleInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObsPropertyDoubleInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
}

void ObsPropertyDoubleInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObsPropertyDoubleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:flremoting.protocol.ObsPropertyDoubleInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  value_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ObsPropertyDoubleInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObsPropertyDoubleInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flremoting.protocol.ObsPropertyDoubleInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional double value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flremoting.protocol.ObsPropertyDoubleInfo)
  return target;
}

size_t ObsPropertyDoubleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flremoting.protocol.ObsPropertyDoubleInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional double value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObsPropertyDoubleInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ObsPropertyDoubleInfo*>(
      &from));
}

void ObsPropertyDoubleInfo::MergeFrom(const ObsPropertyDoubleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flremoting.protocol.ObsPropertyDoubleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ObsPropertyDoubleInfo::CopyFrom(const ObsPropertyDoubleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flremoting.protocol.ObsPropertyDoubleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObsPropertyDoubleInfo::IsInitialized() const {
  return true;
}

void ObsPropertyDoubleInfo::InternalSwap(ObsPropertyDoubleInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(value_, other->value_);
}

std::string ObsPropertyDoubleInfo::GetTypeName() const {
  return "flremoting.protocol.ObsPropertyDoubleInfo";
}


// ===================================================================

class ObsPropertyInt64Info::_Internal {
 public:
  using HasBits = decltype(std::declval<ObsPropertyInt64Info>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ObsPropertyInt64Info::ObsPropertyInt64Info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flremoting.protocol.ObsPropertyInt64Info)
}
ObsPropertyInt64Info::ObsPropertyInt64Info(const ObsPropertyInt64Info& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:flremoting.protocol.ObsPropertyInt64Info)
}

inline void ObsPropertyInt64Info::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_ = int64_t{0};
}

ObsPropertyInt64Info::~ObsPropertyInt64Info() {
  // @@protoc_insertion_point(destructor:flremoting.protocol.ObsPropertyInt64Info)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObsPropertyInt64Info::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
}

void ObsPropertyInt64Info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObsPropertyInt64Info::Clear() {
// @@protoc_insertion_point(message_clear_start:flremoting.protocol.ObsPropertyInt64Info)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  value_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ObsPropertyInt64Info::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObsPropertyInt64Info::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flremoting.protocol.ObsPropertyInt64Info)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional int64 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flremoting.protocol.ObsPropertyInt64Info)
  return target;
}

size_t ObsPropertyInt64Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flremoting.protocol.ObsPropertyInt64Info)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int64 value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObsPropertyInt64Info::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ObsPropertyInt64Info*>(
      &from));
}

void ObsPropertyInt64Info::MergeFrom(const ObsPropertyInt64Info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flremoting.protocol.ObsPropertyInt64Info)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ObsPropertyInt64Info::CopyFrom(const ObsPropertyInt64Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flremoting.protocol.ObsPropertyInt64Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObsPropertyInt64Info::IsInitialized() const {
  return true;
}

void ObsPropertyInt64Info::InternalSwap(ObsPropertyInt64Info* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(value_, other->value_);
}

std::string ObsPropertyInt64Info::GetTypeName() const {
  return "flremoting.protocol.ObsPropertyInt64Info";
}


// ===================================================================

class ObsPropertyStringInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ObsPropertyStringInfo>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ObsPropertyStringInfo::ObsPropertyStringInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flremoting.protocol.ObsPropertyStringInfo)
}
ObsPropertyStringInfo::ObsPropertyStringInfo(const ObsPropertyStringInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    value_.Set(from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flremoting.protocol.ObsPropertyStringInfo)
}

inline void ObsPropertyStringInfo::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ObsPropertyStringInfo::~ObsPropertyStringInfo() {
  // @@protoc_insertion_point(destructor:flremoting.protocol.ObsPropertyStringInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObsPropertyStringInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  value_.Destroy();
}

void ObsPropertyStringInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObsPropertyStringInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:flremoting.protocol.ObsPropertyStringInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ObsPropertyStringInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObsPropertyStringInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flremoting.protocol.ObsPropertyStringInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flremoting.protocol.ObsPropertyStringInfo)
  return target;
}

size_t ObsPropertyStringInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flremoting.protocol.ObsPropertyStringInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObsPropertyStringInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ObsPropertyStringInfo*>(
      &from));
}

void ObsPropertyStringInfo::MergeFrom(const ObsPropertyStringInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flremoting.protocol.ObsPropertyStringInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ObsPropertyStringInfo::CopyFrom(const ObsPropertyStringInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flremoting.protocol.ObsPropertyStringInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObsPropertyStringInfo::IsInitialized() const {
  return true;
}

void ObsPropertyStringInfo::InternalSwap(ObsPropertyStringInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

std::string ObsPropertyStringInfo::GetTypeName() const {
  return "flremoting.protocol.ObsPropertyStringInfo";
}


// ===================================================================

class ObsPropertiesInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ObsPropertiesInfo>()._has_bits_);
  static void set_has_info_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_info_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_info_bool_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_info_int_value(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_info_double_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_info_string_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ObsPropertiesInfo::ObsPropertiesInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  info_double_values_(arena),
  info_int64_values_(arena),
  info_string_values_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flremoting.protocol.ObsPropertiesInfo)
}
ObsPropertiesInfo::ObsPropertiesInfo(const ObsPropertiesInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      info_double_values_(from.info_double_values_),
      info_int64_values_(from.info_int64_values_),
      info_string_values_(from.info_string_values_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  info_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    info_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_info_name()) {
    info_name_.Set(from._internal_info_name(), 
      GetArenaForAllocation());
  }
  info_string_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    info_string_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_info_string_value()) {
    info_string_value_.Set(from._internal_info_string_value(), 
      GetArenaForAllocation());
  }
  ::memcpy(&info_type_, &from.info_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&info_int_value_) -
    reinterpret_cast<char*>(&info_type_)) + sizeof(info_int_value_));
  // @@protoc_insertion_point(copy_constructor:flremoting.protocol.ObsPropertiesInfo)
}

inline void ObsPropertiesInfo::SharedCtor() {
info_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  info_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
info_string_value_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  info_string_value_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&info_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&info_int_value_) -
    reinterpret_cast<char*>(&info_type_)) + sizeof(info_int_value_));
}

ObsPropertiesInfo::~ObsPropertiesInfo() {
  // @@protoc_insertion_point(destructor:flremoting.protocol.ObsPropertiesInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObsPropertiesInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  info_name_.Destroy();
  info_string_value_.Destroy();
}

void ObsPropertiesInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObsPropertiesInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:flremoting.protocol.ObsPropertiesInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_double_values_.Clear();
  info_int64_values_.Clear();
  info_string_values_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      info_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      info_string_value_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&info_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&info_int_value_) -
        reinterpret_cast<char*>(&info_type_)) + sizeof(info_int_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ObsPropertiesInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string info_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_info_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .flremoting.protocol.ObsPropertyType info_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::flremoting::protocol::ObsPropertyType_IsValid(val))) {
            _internal_set_info_type(static_cast<::flremoting::protocol::ObsPropertyType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool info_bool_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_info_bool_value(&has_bits);
          info_bool_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 info_int_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_info_int_value(&has_bits);
          info_int_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double info_double_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_info_double_value(&has_bits);
          info_double_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional string info_string_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_info_string_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .flremoting.protocol.ObsPropertyDoubleInfo info_double_values = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_info_double_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .flremoting.protocol.ObsPropertyInt64Info info_int64_values = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_info_int64_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .flremoting.protocol.ObsPropertyStringInfo info_string_values = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_info_string_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObsPropertiesInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flremoting.protocol.ObsPropertiesInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string info_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_info_name(), target);
  }

  // optional .flremoting.protocol.ObsPropertyType info_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_info_type(), target);
  }

  // optional bool info_bool_value = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_info_bool_value(), target);
  }

  // optional int32 info_int_value = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_info_int_value(), target);
  }

  // optional double info_double_value = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_info_double_value(), target);
  }

  // optional string info_string_value = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_info_string_value(), target);
  }

  // repeated .flremoting.protocol.ObsPropertyDoubleInfo info_double_values = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_info_double_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_info_double_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .flremoting.protocol.ObsPropertyInt64Info info_int64_values = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_info_int64_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_info_int64_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .flremoting.protocol.ObsPropertyStringInfo info_string_values = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_info_string_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_info_string_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flremoting.protocol.ObsPropertiesInfo)
  return target;
}

size_t ObsPropertiesInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flremoting.protocol.ObsPropertiesInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flremoting.protocol.ObsPropertyDoubleInfo info_double_values = 7;
  total_size += 1UL * this->_internal_info_double_values_size();
  for (const auto& msg : this->info_double_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .flremoting.protocol.ObsPropertyInt64Info info_int64_values = 8;
  total_size += 1UL * this->_internal_info_int64_values_size();
  for (const auto& msg : this->info_int64_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .flremoting.protocol.ObsPropertyStringInfo info_string_values = 9;
  total_size += 1UL * this->_internal_info_string_values_size();
  for (const auto& msg : this->info_string_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string info_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_info_name());
    }

    // optional string info_string_value = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_info_string_value());
    }

    // optional .flremoting.protocol.ObsPropertyType info_type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_info_type());
    }

    // optional bool info_bool_value = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional double info_double_value = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional int32 info_int_value = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_info_int_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObsPropertiesInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ObsPropertiesInfo*>(
      &from));
}

void ObsPropertiesInfo::MergeFrom(const ObsPropertiesInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flremoting.protocol.ObsPropertiesInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  info_double_values_.MergeFrom(from.info_double_values_);
  info_int64_values_.MergeFrom(from.info_int64_values_);
  info_string_values_.MergeFrom(from.info_string_values_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_info_name(from._internal_info_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_info_string_value(from._internal_info_string_value());
    }
    if (cached_has_bits & 0x00000004u) {
      info_type_ = from.info_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      info_bool_value_ = from.info_bool_value_;
    }
    if (cached_has_bits & 0x00000010u) {
      info_double_value_ = from.info_double_value_;
    }
    if (cached_has_bits & 0x00000020u) {
      info_int_value_ = from.info_int_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ObsPropertiesInfo::CopyFrom(const ObsPropertiesInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flremoting.protocol.ObsPropertiesInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObsPropertiesInfo::IsInitialized() const {
  return true;
}

void ObsPropertiesInfo::InternalSwap(ObsPropertiesInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  info_double_values_.InternalSwap(&other->info_double_values_);
  info_int64_values_.InternalSwap(&other->info_int64_values_);
  info_string_values_.InternalSwap(&other->info_string_values_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &info_name_, lhs_arena,
      &other->info_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &info_string_value_, lhs_arena,
      &other->info_string_value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObsPropertiesInfo, info_int_value_)
      + sizeof(ObsPropertiesInfo::info_int_value_)
      - PROTOBUF_FIELD_OFFSET(ObsPropertiesInfo, info_type_)>(
          reinterpret_cast<char*>(&info_type_),
          reinterpret_cast<char*>(&other->info_type_));
}

std::string ObsPropertiesInfo::GetTypeName() const {
  return "flremoting.protocol.ObsPropertiesInfo";
}


// ===================================================================

class ObsPropertiesData::_Internal {
 public:
};

ObsPropertiesData::ObsPropertiesData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  obs_properties_infos_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flremoting.protocol.ObsPropertiesData)
}
ObsPropertiesData::ObsPropertiesData(const ObsPropertiesData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      obs_properties_infos_(from.obs_properties_infos_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flremoting.protocol.ObsPropertiesData)
}

inline void ObsPropertiesData::SharedCtor() {
}

ObsPropertiesData::~ObsPropertiesData() {
  // @@protoc_insertion_point(destructor:flremoting.protocol.ObsPropertiesData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObsPropertiesData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ObsPropertiesData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObsPropertiesData::Clear() {
// @@protoc_insertion_point(message_clear_start:flremoting.protocol.ObsPropertiesData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obs_properties_infos_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ObsPropertiesData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .flremoting.protocol.ObsPropertiesInfo obs_properties_infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obs_properties_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObsPropertiesData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flremoting.protocol.ObsPropertiesData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flremoting.protocol.ObsPropertiesInfo obs_properties_infos = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_obs_properties_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_obs_properties_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flremoting.protocol.ObsPropertiesData)
  return target;
}

size_t ObsPropertiesData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flremoting.protocol.ObsPropertiesData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flremoting.protocol.ObsPropertiesInfo obs_properties_infos = 1;
  total_size += 1UL * this->_internal_obs_properties_infos_size();
  for (const auto& msg : this->obs_properties_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObsPropertiesData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ObsPropertiesData*>(
      &from));
}

void ObsPropertiesData::MergeFrom(const ObsPropertiesData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flremoting.protocol.ObsPropertiesData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  obs_properties_infos_.MergeFrom(from.obs_properties_infos_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ObsPropertiesData::CopyFrom(const ObsPropertiesData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flremoting.protocol.ObsPropertiesData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObsPropertiesData::IsInitialized() const {
  return true;
}

void ObsPropertiesData::InternalSwap(ObsPropertiesData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  obs_properties_infos_.InternalSwap(&other->obs_properties_infos_);
}

std::string ObsPropertiesData::GetTypeName() const {
  return "flremoting.protocol.ObsPropertiesData";
}


// ===================================================================

class ObsTextSourceData::_Internal {
 public:
  using HasBits = decltype(std::declval<ObsTextSourceData>()._has_bits_);
  static void set_has_source_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_face(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::flremoting::protocol::ObsPropertiesData& obs_properties_data(const ObsTextSourceData* msg);
  static void set_has_obs_properties_data(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::flremoting::protocol::ObsPropertiesData&
ObsTextSourceData::_Internal::obs_properties_data(const ObsTextSourceData* msg) {
  return *msg->obs_properties_data_;
}
ObsTextSourceData::ObsTextSourceData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flremoting.protocol.ObsTextSourceData)
}
ObsTextSourceData::ObsTextSourceData(const ObsTextSourceData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  source_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    source_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source_id()) {
    source_id_.Set(from._internal_source_id(), 
      GetArenaForAllocation());
  }
  source_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    source_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source_name()) {
    source_name_.Set(from._internal_source_name(), 
      GetArenaForAllocation());
  }
  face_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    face_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_face()) {
    face_.Set(from._internal_face(), 
      GetArenaForAllocation());
  }
  style_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    style_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_style()) {
    style_.Set(from._internal_style(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_obs_properties_data()) {
    obs_properties_data_ = new ::flremoting::protocol::ObsPropertiesData(*from.obs_properties_data_);
  } else {
    obs_properties_data_ = nullptr;
  }
  ::memcpy(&flags_, &from.flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&flags_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:flremoting.protocol.ObsTextSourceData)
}

inline void ObsTextSourceData::SharedCtor() {
source_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  source_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
source_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  source_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
face_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  face_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
style_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  style_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&obs_properties_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&obs_properties_data_)) + sizeof(size_));
}

ObsTextSourceData::~ObsTextSourceData() {
  // @@protoc_insertion_point(destructor:flremoting.protocol.ObsTextSourceData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObsTextSourceData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  source_id_.Destroy();
  source_name_.Destroy();
  face_.Destroy();
  style_.Destroy();
  if (this != internal_default_instance()) delete obs_properties_data_;
}

void ObsTextSourceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObsTextSourceData::Clear() {
// @@protoc_insertion_point(message_clear_start:flremoting.protocol.ObsTextSourceData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      source_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      source_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      face_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      style_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(obs_properties_data_ != nullptr);
      obs_properties_data_->Clear();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&size_) -
        reinterpret_cast<char*>(&flags_)) + sizeof(size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ObsTextSourceData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string source_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_source_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string source_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_source_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string face = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_face();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 flags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string style = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_style();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .flremoting.protocol.ObsPropertiesData obs_properties_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_obs_properties_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObsTextSourceData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flremoting.protocol.ObsTextSourceData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source_id(), target);
  }

  // optional string source_name = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source_name(), target);
  }

  // optional string face = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_face(), target);
  }

  // optional int32 flags = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_flags(), target);
  }

  // optional string style = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_style(), target);
  }

  // optional int32 size = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_size(), target);
  }

  // optional .flremoting.protocol.ObsPropertiesData obs_properties_data = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::obs_properties_data(this),
        _Internal::obs_properties_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flremoting.protocol.ObsTextSourceData)
  return target;
}

size_t ObsTextSourceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flremoting.protocol.ObsTextSourceData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string source_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source_id());
    }

    // optional string source_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source_name());
    }

    // optional string face = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_face());
    }

    // optional string style = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_style());
    }

    // optional .flremoting.protocol.ObsPropertiesData obs_properties_data = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *obs_properties_data_);
    }

    // optional int32 flags = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_flags());
    }

    // optional int32 size = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObsTextSourceData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ObsTextSourceData*>(
      &from));
}

void ObsTextSourceData::MergeFrom(const ObsTextSourceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flremoting.protocol.ObsTextSourceData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_source_id(from._internal_source_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_source_name(from._internal_source_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_face(from._internal_face());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_style(from._internal_style());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_obs_properties_data()->::flremoting::protocol::ObsPropertiesData::MergeFrom(from._internal_obs_properties_data());
    }
    if (cached_has_bits & 0x00000020u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000040u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ObsTextSourceData::CopyFrom(const ObsTextSourceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flremoting.protocol.ObsTextSourceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObsTextSourceData::IsInitialized() const {
  return true;
}

void ObsTextSourceData::InternalSwap(ObsTextSourceData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &source_id_, lhs_arena,
      &other->source_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &source_name_, lhs_arena,
      &other->source_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &face_, lhs_arena,
      &other->face_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &style_, lhs_arena,
      &other->style_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObsTextSourceData, size_)
      + sizeof(ObsTextSourceData::size_)
      - PROTOBUF_FIELD_OFFSET(ObsTextSourceData, obs_properties_data_)>(
          reinterpret_cast<char*>(&obs_properties_data_),
          reinterpret_cast<char*>(&other->obs_properties_data_));
}

std::string ObsTextSourceData::GetTypeName() const {
  return "flremoting.protocol.ObsTextSourceData";
}


// ===================================================================

class ObsImageSourceData::_Internal {
 public:
  using HasBits = decltype(std::declval<ObsImageSourceData>()._has_bits_);
  static void set_has_source_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::flremoting::protocol::ObsPropertiesData& obs_properties_data(const ObsImageSourceData* msg);
  static void set_has_obs_properties_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::flremoting::protocol::ObsPropertiesData&
ObsImageSourceData::_Internal::obs_properties_data(const ObsImageSourceData* msg) {
  return *msg->obs_properties_data_;
}
ObsImageSourceData::ObsImageSourceData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flremoting.protocol.ObsImageSourceData)
}
ObsImageSourceData::ObsImageSourceData(const ObsImageSourceData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  source_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    source_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source_id()) {
    source_id_.Set(from._internal_source_id(), 
      GetArenaForAllocation());
  }
  source_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    source_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source_name()) {
    source_name_.Set(from._internal_source_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_obs_properties_data()) {
    obs_properties_data_ = new ::flremoting::protocol::ObsPropertiesData(*from.obs_properties_data_);
  } else {
    obs_properties_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flremoting.protocol.ObsImageSourceData)
}

inline void ObsImageSourceData::SharedCtor() {
source_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  source_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
source_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  source_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
obs_properties_data_ = nullptr;
}

ObsImageSourceData::~ObsImageSourceData() {
  // @@protoc_insertion_point(destructor:flremoting.protocol.ObsImageSourceData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObsImageSourceData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  source_id_.Destroy();
  source_name_.Destroy();
  if (this != internal_default_instance()) delete obs_properties_data_;
}

void ObsImageSourceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObsImageSourceData::Clear() {
// @@protoc_insertion_point(message_clear_start:flremoting.protocol.ObsImageSourceData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      source_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      source_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(obs_properties_data_ != nullptr);
      obs_properties_data_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ObsImageSourceData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string source_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_source_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string source_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_source_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .flremoting.protocol.ObsPropertiesData obs_properties_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_obs_properties_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObsImageSourceData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flremoting.protocol.ObsImageSourceData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source_id(), target);
  }

  // optional string source_name = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source_name(), target);
  }

  // optional .flremoting.protocol.ObsPropertiesData obs_properties_data = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::obs_properties_data(this),
        _Internal::obs_properties_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flremoting.protocol.ObsImageSourceData)
  return target;
}

size_t ObsImageSourceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flremoting.protocol.ObsImageSourceData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string source_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source_id());
    }

    // optional string source_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source_name());
    }

    // optional .flremoting.protocol.ObsPropertiesData obs_properties_data = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *obs_properties_data_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObsImageSourceData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ObsImageSourceData*>(
      &from));
}

void ObsImageSourceData::MergeFrom(const ObsImageSourceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flremoting.protocol.ObsImageSourceData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_source_id(from._internal_source_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_source_name(from._internal_source_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_obs_properties_data()->::flremoting::protocol::ObsPropertiesData::MergeFrom(from._internal_obs_properties_data());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ObsImageSourceData::CopyFrom(const ObsImageSourceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flremoting.protocol.ObsImageSourceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObsImageSourceData::IsInitialized() const {
  return true;
}

void ObsImageSourceData::InternalSwap(ObsImageSourceData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &source_id_, lhs_arena,
      &other->source_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &source_name_, lhs_arena,
      &other->source_name_, rhs_arena
  );
  swap(obs_properties_data_, other->obs_properties_data_);
}

std::string ObsImageSourceData::GetTypeName() const {
  return "flremoting.protocol.ObsImageSourceData";
}


// ===================================================================

class ObsVideoSourceData::_Internal {
 public:
  using HasBits = decltype(std::declval<ObsVideoSourceData>()._has_bits_);
  static void set_has_source_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::flremoting::protocol::ObsPropertiesData& obs_properties_data(const ObsVideoSourceData* msg);
  static void set_has_obs_properties_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::flremoting::protocol::ObsPropertiesData&
ObsVideoSourceData::_Internal::obs_properties_data(const ObsVideoSourceData* msg) {
  return *msg->obs_properties_data_;
}
ObsVideoSourceData::ObsVideoSourceData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flremoting.protocol.ObsVideoSourceData)
}
ObsVideoSourceData::ObsVideoSourceData(const ObsVideoSourceData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  source_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    source_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source_id()) {
    source_id_.Set(from._internal_source_id(), 
      GetArenaForAllocation());
  }
  source_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    source_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source_name()) {
    source_name_.Set(from._internal_source_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_obs_properties_data()) {
    obs_properties_data_ = new ::flremoting::protocol::ObsPropertiesData(*from.obs_properties_data_);
  } else {
    obs_properties_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flremoting.protocol.ObsVideoSourceData)
}

inline void ObsVideoSourceData::SharedCtor() {
source_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  source_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
source_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  source_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
obs_properties_data_ = nullptr;
}

ObsVideoSourceData::~ObsVideoSourceData() {
  // @@protoc_insertion_point(destructor:flremoting.protocol.ObsVideoSourceData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObsVideoSourceData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  source_id_.Destroy();
  source_name_.Destroy();
  if (this != internal_default_instance()) delete obs_properties_data_;
}

void ObsVideoSourceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObsVideoSourceData::Clear() {
// @@protoc_insertion_point(message_clear_start:flremoting.protocol.ObsVideoSourceData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      source_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      source_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(obs_properties_data_ != nullptr);
      obs_properties_data_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ObsVideoSourceData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string source_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_source_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string source_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_source_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .flremoting.protocol.ObsPropertiesData obs_properties_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_obs_properties_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObsVideoSourceData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flremoting.protocol.ObsVideoSourceData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source_id(), target);
  }

  // optional string source_name = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source_name(), target);
  }

  // optional .flremoting.protocol.ObsPropertiesData obs_properties_data = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::obs_properties_data(this),
        _Internal::obs_properties_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flremoting.protocol.ObsVideoSourceData)
  return target;
}

size_t ObsVideoSourceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flremoting.protocol.ObsVideoSourceData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string source_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source_id());
    }

    // optional string source_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source_name());
    }

    // optional .flremoting.protocol.ObsPropertiesData obs_properties_data = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *obs_properties_data_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObsVideoSourceData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ObsVideoSourceData*>(
      &from));
}

void ObsVideoSourceData::MergeFrom(const ObsVideoSourceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flremoting.protocol.ObsVideoSourceData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_source_id(from._internal_source_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_source_name(from._internal_source_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_obs_properties_data()->::flremoting::protocol::ObsPropertiesData::MergeFrom(from._internal_obs_properties_data());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ObsVideoSourceData::CopyFrom(const ObsVideoSourceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flremoting.protocol.ObsVideoSourceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObsVideoSourceData::IsInitialized() const {
  return true;
}

void ObsVideoSourceData::InternalSwap(ObsVideoSourceData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &source_id_, lhs_arena,
      &other->source_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &source_name_, lhs_arena,
      &other->source_name_, rhs_arena
  );
  swap(obs_properties_data_, other->obs_properties_data_);
}

std::string ObsVideoSourceData::GetTypeName() const {
  return "flremoting.protocol.ObsVideoSourceData";
}


// ===================================================================

class ObsCaptureSourceWindowInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ObsCaptureSourceWindowInfo>()._has_bits_);
  static void set_has_window(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cursor(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_client_area(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_office_file(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ObsCaptureSourceWindowInfo::ObsCaptureSourceWindowInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flremoting.protocol.ObsCaptureSourceWindowInfo)
}
ObsCaptureSourceWindowInfo::ObsCaptureSourceWindowInfo(const ObsCaptureSourceWindowInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  window_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    window_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_window()) {
    window_.Set(from._internal_window(), 
      GetArenaForAllocation());
  }
  office_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    office_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_office_file()) {
    office_file_.Set(from._internal_office_file(), 
      GetArenaForAllocation());
  }
  ::memcpy(&cursor_, &from.cursor_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_area_) -
    reinterpret_cast<char*>(&cursor_)) + sizeof(client_area_));
  // @@protoc_insertion_point(copy_constructor:flremoting.protocol.ObsCaptureSourceWindowInfo)
}

inline void ObsCaptureSourceWindowInfo::SharedCtor() {
window_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  window_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
office_file_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  office_file_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cursor_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&client_area_) -
    reinterpret_cast<char*>(&cursor_)) + sizeof(client_area_));
}

ObsCaptureSourceWindowInfo::~ObsCaptureSourceWindowInfo() {
  // @@protoc_insertion_point(destructor:flremoting.protocol.ObsCaptureSourceWindowInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObsCaptureSourceWindowInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  window_.Destroy();
  office_file_.Destroy();
}

void ObsCaptureSourceWindowInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObsCaptureSourceWindowInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:flremoting.protocol.ObsCaptureSourceWindowInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      window_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      office_file_.ClearNonDefaultToEmpty();
    }
  }
  ::memset(&cursor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_area_) -
      reinterpret_cast<char*>(&cursor_)) + sizeof(client_area_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ObsCaptureSourceWindowInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string window = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_window();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool cursor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_cursor(&has_bits);
          cursor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool client_area = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_client_area(&has_bits);
          client_area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string office_file = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_office_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObsCaptureSourceWindowInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flremoting.protocol.ObsCaptureSourceWindowInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string window = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_window(), target);
  }

  // optional bool cursor = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_cursor(), target);
  }

  // optional bool client_area = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_client_area(), target);
  }

  // optional string office_file = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_office_file(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flremoting.protocol.ObsCaptureSourceWindowInfo)
  return target;
}

size_t ObsCaptureSourceWindowInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flremoting.protocol.ObsCaptureSourceWindowInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string window = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_window());
    }

    // optional string office_file = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_office_file());
    }

    // optional bool cursor = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool client_area = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObsCaptureSourceWindowInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ObsCaptureSourceWindowInfo*>(
      &from));
}

void ObsCaptureSourceWindowInfo::MergeFrom(const ObsCaptureSourceWindowInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flremoting.protocol.ObsCaptureSourceWindowInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_window(from._internal_window());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_office_file(from._internal_office_file());
    }
    if (cached_has_bits & 0x00000004u) {
      cursor_ = from.cursor_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_area_ = from.client_area_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ObsCaptureSourceWindowInfo::CopyFrom(const ObsCaptureSourceWindowInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flremoting.protocol.ObsCaptureSourceWindowInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObsCaptureSourceWindowInfo::IsInitialized() const {
  return true;
}

void ObsCaptureSourceWindowInfo::InternalSwap(ObsCaptureSourceWindowInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &window_, lhs_arena,
      &other->window_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &office_file_, lhs_arena,
      &other->office_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObsCaptureSourceWindowInfo, client_area_)
      + sizeof(ObsCaptureSourceWindowInfo::client_area_)
      - PROTOBUF_FIELD_OFFSET(ObsCaptureSourceWindowInfo, cursor_)>(
          reinterpret_cast<char*>(&cursor_),
          reinterpret_cast<char*>(&other->cursor_));
}

std::string ObsCaptureSourceWindowInfo::GetTypeName() const {
  return "flremoting.protocol.ObsCaptureSourceWindowInfo";
}


// ===================================================================

class ObsCaptureSourceGameInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ObsCaptureSourceGameInfo>()._has_bits_);
  static void set_has_capture_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_window(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_anti_cheat_hook(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_capture_overlays(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_capture_cursor(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ObsCaptureSourceGameInfo::ObsCaptureSourceGameInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flremoting.protocol.ObsCaptureSourceGameInfo)
}
ObsCaptureSourceGameInfo::ObsCaptureSourceGameInfo(const ObsCaptureSourceGameInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  capture_mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    capture_mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_capture_mode()) {
    capture_mode_.Set(from._internal_capture_mode(), 
      GetArenaForAllocation());
  }
  window_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    window_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_window()) {
    window_.Set(from._internal_window(), 
      GetArenaForAllocation());
  }
  ::memcpy(&anti_cheat_hook_, &from.anti_cheat_hook_,
    static_cast<size_t>(reinterpret_cast<char*>(&capture_cursor_) -
    reinterpret_cast<char*>(&anti_cheat_hook_)) + sizeof(capture_cursor_));
  // @@protoc_insertion_point(copy_constructor:flremoting.protocol.ObsCaptureSourceGameInfo)
}

inline void ObsCaptureSourceGameInfo::SharedCtor() {
capture_mode_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  capture_mode_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
window_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  window_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&anti_cheat_hook_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&capture_cursor_) -
    reinterpret_cast<char*>(&anti_cheat_hook_)) + sizeof(capture_cursor_));
}

ObsCaptureSourceGameInfo::~ObsCaptureSourceGameInfo() {
  // @@protoc_insertion_point(destructor:flremoting.protocol.ObsCaptureSourceGameInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObsCaptureSourceGameInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  capture_mode_.Destroy();
  window_.Destroy();
}

void ObsCaptureSourceGameInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObsCaptureSourceGameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:flremoting.protocol.ObsCaptureSourceGameInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      capture_mode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      window_.ClearNonDefaultToEmpty();
    }
  }
  ::memset(&anti_cheat_hook_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&capture_cursor_) -
      reinterpret_cast<char*>(&anti_cheat_hook_)) + sizeof(capture_cursor_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ObsCaptureSourceGameInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string capture_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_capture_mode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string window = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_window();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool anti_cheat_hook = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_anti_cheat_hook(&has_bits);
          anti_cheat_hook_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool capture_overlays = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_capture_overlays(&has_bits);
          capture_overlays_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool capture_cursor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_capture_cursor(&has_bits);
          capture_cursor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObsCaptureSourceGameInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flremoting.protocol.ObsCaptureSourceGameInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string capture_mode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_capture_mode(), target);
  }

  // optional string window = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_window(), target);
  }

  // optional bool anti_cheat_hook = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_anti_cheat_hook(), target);
  }

  // optional bool capture_overlays = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_capture_overlays(), target);
  }

  // optional bool capture_cursor = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_capture_cursor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flremoting.protocol.ObsCaptureSourceGameInfo)
  return target;
}

size_t ObsCaptureSourceGameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flremoting.protocol.ObsCaptureSourceGameInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string capture_mode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_capture_mode());
    }

    // optional string window = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_window());
    }

    // optional bool anti_cheat_hook = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool capture_overlays = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool capture_cursor = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObsCaptureSourceGameInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ObsCaptureSourceGameInfo*>(
      &from));
}

void ObsCaptureSourceGameInfo::MergeFrom(const ObsCaptureSourceGameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flremoting.protocol.ObsCaptureSourceGameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_capture_mode(from._internal_capture_mode());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_window(from._internal_window());
    }
    if (cached_has_bits & 0x00000004u) {
      anti_cheat_hook_ = from.anti_cheat_hook_;
    }
    if (cached_has_bits & 0x00000008u) {
      capture_overlays_ = from.capture_overlays_;
    }
    if (cached_has_bits & 0x00000010u) {
      capture_cursor_ = from.capture_cursor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ObsCaptureSourceGameInfo::CopyFrom(const ObsCaptureSourceGameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flremoting.protocol.ObsCaptureSourceGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObsCaptureSourceGameInfo::IsInitialized() const {
  return true;
}

void ObsCaptureSourceGameInfo::InternalSwap(ObsCaptureSourceGameInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &capture_mode_, lhs_arena,
      &other->capture_mode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &window_, lhs_arena,
      &other->window_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObsCaptureSourceGameInfo, capture_cursor_)
      + sizeof(ObsCaptureSourceGameInfo::capture_cursor_)
      - PROTOBUF_FIELD_OFFSET(ObsCaptureSourceGameInfo, anti_cheat_hook_)>(
          reinterpret_cast<char*>(&anti_cheat_hook_),
          reinterpret_cast<char*>(&other->anti_cheat_hook_));
}

std::string ObsCaptureSourceGameInfo::GetTypeName() const {
  return "flremoting.protocol.ObsCaptureSourceGameInfo";
}


// ===================================================================

class ObsCaptureSourceMonitorInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ObsCaptureSourceMonitorInfo>()._has_bits_);
  static void set_has_monitor(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_use_rect(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_right(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_top(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bottom(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_capture_cursor(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

ObsCaptureSourceMonitorInfo::ObsCaptureSourceMonitorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flremoting.protocol.ObsCaptureSourceMonitorInfo)
}
ObsCaptureSourceMonitorInfo::ObsCaptureSourceMonitorInfo(const ObsCaptureSourceMonitorInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&monitor_, &from.monitor_,
    static_cast<size_t>(reinterpret_cast<char*>(&capture_cursor_) -
    reinterpret_cast<char*>(&monitor_)) + sizeof(capture_cursor_));
  // @@protoc_insertion_point(copy_constructor:flremoting.protocol.ObsCaptureSourceMonitorInfo)
}

inline void ObsCaptureSourceMonitorInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&monitor_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&capture_cursor_) -
    reinterpret_cast<char*>(&monitor_)) + sizeof(capture_cursor_));
}

ObsCaptureSourceMonitorInfo::~ObsCaptureSourceMonitorInfo() {
  // @@protoc_insertion_point(destructor:flremoting.protocol.ObsCaptureSourceMonitorInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObsCaptureSourceMonitorInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ObsCaptureSourceMonitorInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObsCaptureSourceMonitorInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:flremoting.protocol.ObsCaptureSourceMonitorInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&monitor_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&capture_cursor_) -
        reinterpret_cast<char*>(&monitor_)) + sizeof(capture_cursor_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ObsCaptureSourceMonitorInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 monitor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_monitor(&has_bits);
          monitor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_rect = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_use_rect(&has_bits);
          use_rect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 left = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_left(&has_bits);
          left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 right = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_right(&has_bits);
          right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 top = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_top(&has_bits);
          top_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 bottom = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_bottom(&has_bits);
          bottom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool capture_cursor = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_capture_cursor(&has_bits);
          capture_cursor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObsCaptureSourceMonitorInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flremoting.protocol.ObsCaptureSourceMonitorInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 monitor = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_monitor(), target);
  }

  // optional bool use_rect = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_use_rect(), target);
  }

  // optional int64 left = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_left(), target);
  }

  // optional int64 right = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_right(), target);
  }

  // optional int64 top = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_top(), target);
  }

  // optional int64 bottom = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_bottom(), target);
  }

  // optional bool capture_cursor = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_capture_cursor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flremoting.protocol.ObsCaptureSourceMonitorInfo)
  return target;
}

size_t ObsCaptureSourceMonitorInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flremoting.protocol.ObsCaptureSourceMonitorInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int64 monitor = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_monitor());
    }

    // optional int64 left = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_left());
    }

    // optional int64 right = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_right());
    }

    // optional int64 top = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_top());
    }

    // optional int64 bottom = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_bottom());
    }

    // optional bool use_rect = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool capture_cursor = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObsCaptureSourceMonitorInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ObsCaptureSourceMonitorInfo*>(
      &from));
}

void ObsCaptureSourceMonitorInfo::MergeFrom(const ObsCaptureSourceMonitorInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flremoting.protocol.ObsCaptureSourceMonitorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      monitor_ = from.monitor_;
    }
    if (cached_has_bits & 0x00000002u) {
      left_ = from.left_;
    }
    if (cached_has_bits & 0x00000004u) {
      right_ = from.right_;
    }
    if (cached_has_bits & 0x00000008u) {
      top_ = from.top_;
    }
    if (cached_has_bits & 0x00000010u) {
      bottom_ = from.bottom_;
    }
    if (cached_has_bits & 0x00000020u) {
      use_rect_ = from.use_rect_;
    }
    if (cached_has_bits & 0x00000040u) {
      capture_cursor_ = from.capture_cursor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ObsCaptureSourceMonitorInfo::CopyFrom(const ObsCaptureSourceMonitorInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flremoting.protocol.ObsCaptureSourceMonitorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObsCaptureSourceMonitorInfo::IsInitialized() const {
  return true;
}

void ObsCaptureSourceMonitorInfo::InternalSwap(ObsCaptureSourceMonitorInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObsCaptureSourceMonitorInfo, capture_cursor_)
      + sizeof(ObsCaptureSourceMonitorInfo::capture_cursor_)
      - PROTOBUF_FIELD_OFFSET(ObsCaptureSourceMonitorInfo, monitor_)>(
          reinterpret_cast<char*>(&monitor_),
          reinterpret_cast<char*>(&other->monitor_));
}

std::string ObsCaptureSourceMonitorInfo::GetTypeName() const {
  return "flremoting.protocol.ObsCaptureSourceMonitorInfo";
}


// ===================================================================

class ObsCaptureSourceData::_Internal {
 public:
  using HasBits = decltype(std::declval<ObsCaptureSourceData>()._has_bits_);
  static void set_has_source_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_method(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_use_wildcards(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_compatibility(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

ObsCaptureSourceData::ObsCaptureSourceData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flremoting.protocol.ObsCaptureSourceData)
}
ObsCaptureSourceData::ObsCaptureSourceData(const ObsCaptureSourceData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  source_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    source_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source_id()) {
    source_id_.Set(from._internal_source_id(), 
      GetArenaForAllocation());
  }
  source_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    source_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source_name()) {
    source_name_.Set(from._internal_source_name(), 
      GetArenaForAllocation());
  }
  payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_payload()) {
    payload_.Set(from._internal_payload(), 
      GetArenaForAllocation());
  }
  ::memcpy(&method_, &from.method_,
    static_cast<size_t>(reinterpret_cast<char*>(&compatibility_) -
    reinterpret_cast<char*>(&method_)) + sizeof(compatibility_));
  // @@protoc_insertion_point(copy_constructor:flremoting.protocol.ObsCaptureSourceData)
}

inline void ObsCaptureSourceData::SharedCtor() {
source_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  source_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
source_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  source_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
payload_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  payload_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&method_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&compatibility_) -
    reinterpret_cast<char*>(&method_)) + sizeof(compatibility_));
}

ObsCaptureSourceData::~ObsCaptureSourceData() {
  // @@protoc_insertion_point(destructor:flremoting.protocol.ObsCaptureSourceData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObsCaptureSourceData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  source_id_.Destroy();
  source_name_.Destroy();
  payload_.Destroy();
}

void ObsCaptureSourceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObsCaptureSourceData::Clear() {
// @@protoc_insertion_point(message_clear_start:flremoting.protocol.ObsCaptureSourceData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      source_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      source_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      payload_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&method_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&compatibility_) -
        reinterpret_cast<char*>(&method_)) + sizeof(compatibility_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ObsCaptureSourceData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string source_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_source_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string source_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_source_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 method = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_method(&has_bits);
          method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes payload = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 priority = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_priority(&has_bits);
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_wildcards = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_use_wildcards(&has_bits);
          use_wildcards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool compatibility = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_compatibility(&has_bits);
          compatibility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObsCaptureSourceData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flremoting.protocol.ObsCaptureSourceData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source_id(), target);
  }

  // optional string source_name = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source_name(), target);
  }

  // optional int64 method = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_method(), target);
  }

  // optional bytes payload = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_payload(), target);
  }

  // optional int64 priority = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_priority(), target);
  }

  // optional bool use_wildcards = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_use_wildcards(), target);
  }

  // optional bool compatibility = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_compatibility(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flremoting.protocol.ObsCaptureSourceData)
  return target;
}

size_t ObsCaptureSourceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flremoting.protocol.ObsCaptureSourceData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string source_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source_id());
    }

    // optional string source_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source_name());
    }

    // optional bytes payload = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_payload());
    }

    // optional int64 method = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_method());
    }

    // optional int64 priority = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_priority());
    }

    // optional bool use_wildcards = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool compatibility = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObsCaptureSourceData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ObsCaptureSourceData*>(
      &from));
}

void ObsCaptureSourceData::MergeFrom(const ObsCaptureSourceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flremoting.protocol.ObsCaptureSourceData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_source_id(from._internal_source_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_source_name(from._internal_source_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_payload(from._internal_payload());
    }
    if (cached_has_bits & 0x00000008u) {
      method_ = from.method_;
    }
    if (cached_has_bits & 0x00000010u) {
      priority_ = from.priority_;
    }
    if (cached_has_bits & 0x00000020u) {
      use_wildcards_ = from.use_wildcards_;
    }
    if (cached_has_bits & 0x00000040u) {
      compatibility_ = from.compatibility_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ObsCaptureSourceData::CopyFrom(const ObsCaptureSourceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flremoting.protocol.ObsCaptureSourceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObsCaptureSourceData::IsInitialized() const {
  return true;
}

void ObsCaptureSourceData::InternalSwap(ObsCaptureSourceData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &source_id_, lhs_arena,
      &other->source_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &source_name_, lhs_arena,
      &other->source_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &payload_, lhs_arena,
      &other->payload_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObsCaptureSourceData, compatibility_)
      + sizeof(ObsCaptureSourceData::compatibility_)
      - PROTOBUF_FIELD_OFFSET(ObsCaptureSourceData, method_)>(
          reinterpret_cast<char*>(&method_),
          reinterpret_cast<char*>(&other->method_));
}

std::string ObsCaptureSourceData::GetTypeName() const {
  return "flremoting.protocol.ObsCaptureSourceData";
}


// ===================================================================

class ObsPhoneCastingSourceData::_Internal {
 public:
  using HasBits = decltype(std::declval<ObsPhoneCastingSourceData>()._has_bits_);
  static void set_has_source_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_method(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hardware_decode(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_cpu_status(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_force_update(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_audio_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_audio_sample_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_casting_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

ObsPhoneCastingSourceData::ObsPhoneCastingSourceData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flremoting.protocol.ObsPhoneCastingSourceData)
}
ObsPhoneCastingSourceData::ObsPhoneCastingSourceData(const ObsPhoneCastingSourceData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  source_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    source_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source_id()) {
    source_id_.Set(from._internal_source_id(), 
      GetArenaForAllocation());
  }
  source_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    source_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source_name()) {
    source_name_.Set(from._internal_source_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&method_, &from.method_,
    static_cast<size_t>(reinterpret_cast<char*>(&force_update_) -
    reinterpret_cast<char*>(&method_)) + sizeof(force_update_));
  // @@protoc_insertion_point(copy_constructor:flremoting.protocol.ObsPhoneCastingSourceData)
}

inline void ObsPhoneCastingSourceData::SharedCtor() {
source_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  source_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
source_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  source_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&method_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&force_update_) -
    reinterpret_cast<char*>(&method_)) + sizeof(force_update_));
}

ObsPhoneCastingSourceData::~ObsPhoneCastingSourceData() {
  // @@protoc_insertion_point(destructor:flremoting.protocol.ObsPhoneCastingSourceData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObsPhoneCastingSourceData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  source_id_.Destroy();
  source_name_.Destroy();
}

void ObsPhoneCastingSourceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObsPhoneCastingSourceData::Clear() {
// @@protoc_insertion_point(message_clear_start:flremoting.protocol.ObsPhoneCastingSourceData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      source_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      source_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&method_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cpu_status_) -
        reinterpret_cast<char*>(&method_)) + sizeof(cpu_status_));
  }
  force_update_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ObsPhoneCastingSourceData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string source_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_source_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string source_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_source_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 method = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_method(&has_bits);
          method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool hardware_decode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_hardware_decode(&has_bits);
          hardware_decode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool cpu_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_cpu_status(&has_bits);
          cpu_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool force_update = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_force_update(&has_bits);
          force_update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 audio_channel = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_audio_channel(&has_bits);
          audio_channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 audio_sample_rate = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_audio_sample_rate(&has_bits);
          audio_sample_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 casting_frame = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_casting_frame(&has_bits);
          casting_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObsPhoneCastingSourceData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flremoting.protocol.ObsPhoneCastingSourceData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source_id(), target);
  }

  // optional string source_name = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source_name(), target);
  }

  // optional int64 method = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_method(), target);
  }

  // optional bool hardware_decode = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_hardware_decode(), target);
  }

  // optional bool cpu_status = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_cpu_status(), target);
  }

  // optional bool force_update = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_force_update(), target);
  }

  // optional int64 audio_channel = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_audio_channel(), target);
  }

  // optional int64 audio_sample_rate = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_audio_sample_rate(), target);
  }

  // optional int64 casting_frame = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_casting_frame(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flremoting.protocol.ObsPhoneCastingSourceData)
  return target;
}

size_t ObsPhoneCastingSourceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flremoting.protocol.ObsPhoneCastingSourceData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string source_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source_id());
    }

    // optional string source_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source_name());
    }

    // optional int64 method = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_method());
    }

    // optional int64 audio_channel = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_audio_channel());
    }

    // optional int64 audio_sample_rate = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_audio_sample_rate());
    }

    // optional int64 casting_frame = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_casting_frame());
    }

    // optional bool hardware_decode = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool cpu_status = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional bool force_update = 6;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObsPhoneCastingSourceData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ObsPhoneCastingSourceData*>(
      &from));
}

void ObsPhoneCastingSourceData::MergeFrom(const ObsPhoneCastingSourceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flremoting.protocol.ObsPhoneCastingSourceData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_source_id(from._internal_source_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_source_name(from._internal_source_name());
    }
    if (cached_has_bits & 0x00000004u) {
      method_ = from.method_;
    }
    if (cached_has_bits & 0x00000008u) {
      audio_channel_ = from.audio_channel_;
    }
    if (cached_has_bits & 0x00000010u) {
      audio_sample_rate_ = from.audio_sample_rate_;
    }
    if (cached_has_bits & 0x00000020u) {
      casting_frame_ = from.casting_frame_;
    }
    if (cached_has_bits & 0x00000040u) {
      hardware_decode_ = from.hardware_decode_;
    }
    if (cached_has_bits & 0x00000080u) {
      cpu_status_ = from.cpu_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_force_update(from._internal_force_update());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ObsPhoneCastingSourceData::CopyFrom(const ObsPhoneCastingSourceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flremoting.protocol.ObsPhoneCastingSourceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObsPhoneCastingSourceData::IsInitialized() const {
  return true;
}

void ObsPhoneCastingSourceData::InternalSwap(ObsPhoneCastingSourceData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &source_id_, lhs_arena,
      &other->source_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &source_name_, lhs_arena,
      &other->source_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObsPhoneCastingSourceData, force_update_)
      + sizeof(ObsPhoneCastingSourceData::force_update_)
      - PROTOBUF_FIELD_OFFSET(ObsPhoneCastingSourceData, method_)>(
          reinterpret_cast<char*>(&method_),
          reinterpret_cast<char*>(&other->method_));
}

std::string ObsPhoneCastingSourceData::GetTypeName() const {
  return "flremoting.protocol.ObsPhoneCastingSourceData";
}


// ===================================================================

class ObsCameraSourceData::_Internal {
 public:
  using HasBits = decltype(std::declval<ObsCameraSourceData>()._has_bits_);
  static void set_has_source_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_source_hwnd(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::flremoting::protocol::ObsPropertiesData& obs_properties_data(const ObsCameraSourceData* msg);
  static void set_has_obs_properties_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_save_source(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_change_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::flremoting::protocol::ObsPropertiesData&
ObsCameraSourceData::_Internal::obs_properties_data(const ObsCameraSourceData* msg) {
  return *msg->obs_properties_data_;
}
ObsCameraSourceData::ObsCameraSourceData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flremoting.protocol.ObsCameraSourceData)
}
ObsCameraSourceData::ObsCameraSourceData(const ObsCameraSourceData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  source_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    source_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source_id()) {
    source_id_.Set(from._internal_source_id(), 
      GetArenaForAllocation());
  }
  source_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    source_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source_name()) {
    source_name_.Set(from._internal_source_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_obs_properties_data()) {
    obs_properties_data_ = new ::flremoting::protocol::ObsPropertiesData(*from.obs_properties_data_);
  } else {
    obs_properties_data_ = nullptr;
  }
  ::memcpy(&source_hwnd_, &from.source_hwnd_,
    static_cast<size_t>(reinterpret_cast<char*>(&change_id_) -
    reinterpret_cast<char*>(&source_hwnd_)) + sizeof(change_id_));
  // @@protoc_insertion_point(copy_constructor:flremoting.protocol.ObsCameraSourceData)
}

inline void ObsCameraSourceData::SharedCtor() {
source_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  source_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
source_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  source_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&obs_properties_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&change_id_) -
    reinterpret_cast<char*>(&obs_properties_data_)) + sizeof(change_id_));
}

ObsCameraSourceData::~ObsCameraSourceData() {
  // @@protoc_insertion_point(destructor:flremoting.protocol.ObsCameraSourceData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObsCameraSourceData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  source_id_.Destroy();
  source_name_.Destroy();
  if (this != internal_default_instance()) delete obs_properties_data_;
}

void ObsCameraSourceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObsCameraSourceData::Clear() {
// @@protoc_insertion_point(message_clear_start:flremoting.protocol.ObsCameraSourceData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      source_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      source_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(obs_properties_data_ != nullptr);
      obs_properties_data_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&source_hwnd_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&change_id_) -
        reinterpret_cast<char*>(&source_hwnd_)) + sizeof(change_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ObsCameraSourceData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string source_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_source_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string source_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_source_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 source_hwnd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_source_hwnd(&has_bits);
          source_hwnd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .flremoting.protocol.ObsPropertiesData obs_properties_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_obs_properties_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool save_source = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_save_source(&has_bits);
          save_source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool change_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_change_id(&has_bits);
          change_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObsCameraSourceData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flremoting.protocol.ObsCameraSourceData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source_id(), target);
  }

  // optional string source_name = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source_name(), target);
  }

  // optional uint32 source_hwnd = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_source_hwnd(), target);
  }

  // optional .flremoting.protocol.ObsPropertiesData obs_properties_data = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::obs_properties_data(this),
        _Internal::obs_properties_data(this).GetCachedSize(), target, stream);
  }

  // optional bool save_source = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_save_source(), target);
  }

  // optional bool change_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_change_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flremoting.protocol.ObsCameraSourceData)
  return target;
}

size_t ObsCameraSourceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flremoting.protocol.ObsCameraSourceData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string source_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source_id());
    }

    // optional string source_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source_name());
    }

    // optional .flremoting.protocol.ObsPropertiesData obs_properties_data = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *obs_properties_data_);
    }

    // optional uint32 source_hwnd = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_source_hwnd());
    }

    // optional bool save_source = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool change_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObsCameraSourceData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ObsCameraSourceData*>(
      &from));
}

void ObsCameraSourceData::MergeFrom(const ObsCameraSourceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flremoting.protocol.ObsCameraSourceData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_source_id(from._internal_source_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_source_name(from._internal_source_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_obs_properties_data()->::flremoting::protocol::ObsPropertiesData::MergeFrom(from._internal_obs_properties_data());
    }
    if (cached_has_bits & 0x00000008u) {
      source_hwnd_ = from.source_hwnd_;
    }
    if (cached_has_bits & 0x00000010u) {
      save_source_ = from.save_source_;
    }
    if (cached_has_bits & 0x00000020u) {
      change_id_ = from.change_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ObsCameraSourceData::CopyFrom(const ObsCameraSourceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flremoting.protocol.ObsCameraSourceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObsCameraSourceData::IsInitialized() const {
  return true;
}

void ObsCameraSourceData::InternalSwap(ObsCameraSourceData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &source_id_, lhs_arena,
      &other->source_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &source_name_, lhs_arena,
      &other->source_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObsCameraSourceData, change_id_)
      + sizeof(ObsCameraSourceData::change_id_)
      - PROTOBUF_FIELD_OFFSET(ObsCameraSourceData, obs_properties_data_)>(
          reinterpret_cast<char*>(&obs_properties_data_),
          reinterpret_cast<char*>(&other->obs_properties_data_));
}

std::string ObsCameraSourceData::GetTypeName() const {
  return "flremoting.protocol.ObsCameraSourceData";
}


// ===================================================================

class InputVolumeData::_Internal {
 public:
  using HasBits = decltype(std::declval<InputVolumeData>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

InputVolumeData::InputVolumeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flremoting.protocol.InputVolumeData)
}
InputVolumeData::InputVolumeData(const InputVolumeData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:flremoting.protocol.InputVolumeData)
}

inline void InputVolumeData::SharedCtor() {
value_ = 0;
}

InputVolumeData::~InputVolumeData() {
  // @@protoc_insertion_point(destructor:flremoting.protocol.InputVolumeData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InputVolumeData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InputVolumeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InputVolumeData::Clear() {
// @@protoc_insertion_point(message_clear_start:flremoting.protocol.InputVolumeData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InputVolumeData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InputVolumeData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flremoting.protocol.InputVolumeData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flremoting.protocol.InputVolumeData)
  return target;
}

size_t InputVolumeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flremoting.protocol.InputVolumeData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputVolumeData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const InputVolumeData*>(
      &from));
}

void InputVolumeData::MergeFrom(const InputVolumeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flremoting.protocol.InputVolumeData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void InputVolumeData::CopyFrom(const InputVolumeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flremoting.protocol.InputVolumeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputVolumeData::IsInitialized() const {
  return true;
}

void InputVolumeData::InternalSwap(InputVolumeData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(value_, other->value_);
}

std::string InputVolumeData::GetTypeName() const {
  return "flremoting.protocol.InputVolumeData";
}


// ===================================================================

class OutputVolumeData::_Internal {
 public:
  using HasBits = decltype(std::declval<OutputVolumeData>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

OutputVolumeData::OutputVolumeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flremoting.protocol.OutputVolumeData)
}
OutputVolumeData::OutputVolumeData(const OutputVolumeData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:flremoting.protocol.OutputVolumeData)
}

inline void OutputVolumeData::SharedCtor() {
value_ = 0;
}

OutputVolumeData::~OutputVolumeData() {
  // @@protoc_insertion_point(destructor:flremoting.protocol.OutputVolumeData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OutputVolumeData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OutputVolumeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OutputVolumeData::Clear() {
// @@protoc_insertion_point(message_clear_start:flremoting.protocol.OutputVolumeData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* OutputVolumeData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OutputVolumeData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flremoting.protocol.OutputVolumeData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flremoting.protocol.OutputVolumeData)
  return target;
}

size_t OutputVolumeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flremoting.protocol.OutputVolumeData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OutputVolumeData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const OutputVolumeData*>(
      &from));
}

void OutputVolumeData::MergeFrom(const OutputVolumeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flremoting.protocol.OutputVolumeData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void OutputVolumeData::CopyFrom(const OutputVolumeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flremoting.protocol.OutputVolumeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputVolumeData::IsInitialized() const {
  return true;
}

void OutputVolumeData::InternalSwap(OutputVolumeData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(value_, other->value_);
}

std::string OutputVolumeData::GetTypeName() const {
  return "flremoting.protocol.OutputVolumeData";
}


// ===================================================================

class ObsItemMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ObsItemMessage>()._has_bits_);
  static void set_has_item_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_source_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_source_width(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_source_height(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_source_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_item_lock_status(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

ObsItemMessage::ObsItemMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flremoting.protocol.ObsItemMessage)
}
ObsItemMessage::ObsItemMessage(const ObsItemMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  source_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    source_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source_type()) {
    source_type_.Set(from._internal_source_type(), 
      GetArenaForAllocation());
  }
  source_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    source_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source_name()) {
    source_name_.Set(from._internal_source_name(), 
      GetArenaForAllocation());
  }
  source_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    source_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source_data()) {
    source_data_.Set(from._internal_source_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_height_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(source_height_));
  // @@protoc_insertion_point(copy_constructor:flremoting.protocol.ObsItemMessage)
}

inline void ObsItemMessage::SharedCtor() {
source_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  source_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
source_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  source_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
source_data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  source_data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_height_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(source_height_));
}

ObsItemMessage::~ObsItemMessage() {
  // @@protoc_insertion_point(destructor:flremoting.protocol.ObsItemMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObsItemMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  source_type_.Destroy();
  source_name_.Destroy();
  source_data_.Destroy();
}

void ObsItemMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObsItemMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:flremoting.protocol.ObsItemMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      source_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      source_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      source_data_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_height_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(source_height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ObsItemMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool item_visible = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_visible(&has_bits);
          item_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string source_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_source_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string source_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_source_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 source_width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_source_width(&has_bits);
          source_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 source_height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_source_height(&has_bits);
          source_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes source_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_source_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool item_lock_status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_item_lock_status(&has_bits);
          item_lock_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObsItemMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flremoting.protocol.ObsItemMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool item_visible = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_item_visible(), target);
  }

  // optional int64 item_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_item_id(), target);
  }

  // optional string source_type = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_source_type(), target);
  }

  // optional string source_name = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_source_name(), target);
  }

  // optional uint32 source_width = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_source_width(), target);
  }

  // optional uint32 source_height = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_source_height(), target);
  }

  // optional bytes source_data = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_source_data(), target);
  }

  // optional bool item_lock_status = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_item_lock_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flremoting.protocol.ObsItemMessage)
  return target;
}

size_t ObsItemMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flremoting.protocol.ObsItemMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string source_type = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source_type());
    }

    // optional string source_name = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source_name());
    }

    // optional bytes source_data = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_source_data());
    }

    // optional int64 item_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_item_id());
    }

    // optional bool item_visible = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool item_lock_status = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint32 source_width = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_source_width());
    }

    // optional uint32 source_height = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_source_height());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObsItemMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ObsItemMessage*>(
      &from));
}

void ObsItemMessage::MergeFrom(const ObsItemMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flremoting.protocol.ObsItemMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_source_type(from._internal_source_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_source_name(from._internal_source_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_source_data(from._internal_source_data());
    }
    if (cached_has_bits & 0x00000008u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      item_visible_ = from.item_visible_;
    }
    if (cached_has_bits & 0x00000020u) {
      item_lock_status_ = from.item_lock_status_;
    }
    if (cached_has_bits & 0x00000040u) {
      source_width_ = from.source_width_;
    }
    if (cached_has_bits & 0x00000080u) {
      source_height_ = from.source_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ObsItemMessage::CopyFrom(const ObsItemMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flremoting.protocol.ObsItemMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObsItemMessage::IsInitialized() const {
  return true;
}

void ObsItemMessage::InternalSwap(ObsItemMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &source_type_, lhs_arena,
      &other->source_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &source_name_, lhs_arena,
      &other->source_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &source_data_, lhs_arena,
      &other->source_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObsItemMessage, source_height_)
      + sizeof(ObsItemMessage::source_height_)
      - PROTOBUF_FIELD_OFFSET(ObsItemMessage, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

std::string ObsItemMessage::GetTypeName() const {
  return "flremoting.protocol.ObsItemMessage";
}


// ===================================================================

class ObsCursorMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ObsCursorMessage>()._has_bits_);
  static void set_has_cursor_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ObsCursorMessage::ObsCursorMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flremoting.protocol.ObsCursorMessage)
}
ObsCursorMessage::ObsCursorMessage(const ObsCursorMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  cursor_status_ = from.cursor_status_;
  // @@protoc_insertion_point(copy_constructor:flremoting.protocol.ObsCursorMessage)
}

inline void ObsCursorMessage::SharedCtor() {
cursor_status_ = false;
}

ObsCursorMessage::~ObsCursorMessage() {
  // @@protoc_insertion_point(destructor:flremoting.protocol.ObsCursorMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObsCursorMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ObsCursorMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObsCursorMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:flremoting.protocol.ObsCursorMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cursor_status_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ObsCursorMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool cursor_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_cursor_status(&has_bits);
          cursor_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObsCursorMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flremoting.protocol.ObsCursorMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool cursor_status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_cursor_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flremoting.protocol.ObsCursorMessage)
  return target;
}

size_t ObsCursorMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flremoting.protocol.ObsCursorMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool cursor_status = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObsCursorMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ObsCursorMessage*>(
      &from));
}

void ObsCursorMessage::MergeFrom(const ObsCursorMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flremoting.protocol.ObsCursorMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cursor_status()) {
    _internal_set_cursor_status(from._internal_cursor_status());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ObsCursorMessage::CopyFrom(const ObsCursorMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flremoting.protocol.ObsCursorMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObsCursorMessage::IsInitialized() const {
  return true;
}

void ObsCursorMessage::InternalSwap(ObsCursorMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cursor_status_, other->cursor_status_);
}

std::string ObsCursorMessage::GetTypeName() const {
  return "flremoting.protocol.ObsCursorMessage";
}


// ===================================================================

class ObsItemEditMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ObsItemEditMessage>()._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_action_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ObsItemEditMessage::ObsItemEditMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flremoting.protocol.ObsItemEditMessage)
}
ObsItemEditMessage::ObsItemEditMessage(const ObsItemEditMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_type_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(action_type_));
  // @@protoc_insertion_point(copy_constructor:flremoting.protocol.ObsItemEditMessage)
}

inline void ObsItemEditMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&action_type_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(action_type_));
}

ObsItemEditMessage::~ObsItemEditMessage() {
  // @@protoc_insertion_point(destructor:flremoting.protocol.ObsItemEditMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObsItemEditMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ObsItemEditMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObsItemEditMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:flremoting.protocol.ObsItemEditMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&action_type_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(action_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ObsItemEditMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .flremoting.protocol.ObsItemActionType action_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::flremoting::protocol::ObsItemActionType_IsValid(val))) {
            _internal_set_action_type(static_cast<::flremoting::protocol::ObsItemActionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObsItemEditMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flremoting.protocol.ObsItemEditMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_item_id(), target);
  }

  // optional .flremoting.protocol.ObsItemActionType action_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_action_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flremoting.protocol.ObsItemEditMessage)
  return target;
}

size_t ObsItemEditMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flremoting.protocol.ObsItemEditMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_item_id());
    }

    // optional .flremoting.protocol.ObsItemActionType action_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_action_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObsItemEditMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ObsItemEditMessage*>(
      &from));
}

void ObsItemEditMessage::MergeFrom(const ObsItemEditMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flremoting.protocol.ObsItemEditMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      action_type_ = from.action_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ObsItemEditMessage::CopyFrom(const ObsItemEditMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flremoting.protocol.ObsItemEditMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObsItemEditMessage::IsInitialized() const {
  return true;
}

void ObsItemEditMessage::InternalSwap(ObsItemEditMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObsItemEditMessage, action_type_)
      + sizeof(ObsItemEditMessage::action_type_)
      - PROTOBUF_FIELD_OFFSET(ObsItemEditMessage, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

std::string ObsItemEditMessage::GetTypeName() const {
  return "flremoting.protocol.ObsItemEditMessage";
}


// ===================================================================

class ObsItemEditMessageReq::_Internal {
 public:
  using HasBits = decltype(std::declval<ObsItemEditMessageReq>()._has_bits_);
  static const ::flremoting::protocol::ObsItemEditMessage& edit_msg(const ObsItemEditMessageReq* msg);
  static void set_has_edit_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_edit_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::flremoting::protocol::ObsItemEditMessage&
ObsItemEditMessageReq::_Internal::edit_msg(const ObsItemEditMessageReq* msg) {
  return *msg->edit_msg_;
}
ObsItemEditMessageReq::ObsItemEditMessageReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flremoting.protocol.ObsItemEditMessageReq)
}
ObsItemEditMessageReq::ObsItemEditMessageReq(const ObsItemEditMessageReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  edit_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    edit_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_edit_info()) {
    edit_info_.Set(from._internal_edit_info(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_edit_msg()) {
    edit_msg_ = new ::flremoting::protocol::ObsItemEditMessage(*from.edit_msg_);
  } else {
    edit_msg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flremoting.protocol.ObsItemEditMessageReq)
}

inline void ObsItemEditMessageReq::SharedCtor() {
edit_info_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  edit_info_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
edit_msg_ = nullptr;
}

ObsItemEditMessageReq::~ObsItemEditMessageReq() {
  // @@protoc_insertion_point(destructor:flremoting.protocol.ObsItemEditMessageReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObsItemEditMessageReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  edit_info_.Destroy();
  if (this != internal_default_instance()) delete edit_msg_;
}

void ObsItemEditMessageReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObsItemEditMessageReq::Clear() {
// @@protoc_insertion_point(message_clear_start:flremoting.protocol.ObsItemEditMessageReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      edit_info_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(edit_msg_ != nullptr);
      edit_msg_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ObsItemEditMessageReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .flremoting.protocol.ObsItemEditMessage edit_msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_edit_msg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string edit_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_edit_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObsItemEditMessageReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flremoting.protocol.ObsItemEditMessageReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .flremoting.protocol.ObsItemEditMessage edit_msg = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::edit_msg(this),
        _Internal::edit_msg(this).GetCachedSize(), target, stream);
  }

  // optional string edit_info = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_edit_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flremoting.protocol.ObsItemEditMessageReq)
  return target;
}

size_t ObsItemEditMessageReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flremoting.protocol.ObsItemEditMessageReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string edit_info = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_edit_info());
    }

    // optional .flremoting.protocol.ObsItemEditMessage edit_msg = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *edit_msg_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObsItemEditMessageReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ObsItemEditMessageReq*>(
      &from));
}

void ObsItemEditMessageReq::MergeFrom(const ObsItemEditMessageReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flremoting.protocol.ObsItemEditMessageReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_edit_info(from._internal_edit_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_edit_msg()->::flremoting::protocol::ObsItemEditMessage::MergeFrom(from._internal_edit_msg());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ObsItemEditMessageReq::CopyFrom(const ObsItemEditMessageReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flremoting.protocol.ObsItemEditMessageReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObsItemEditMessageReq::IsInitialized() const {
  return true;
}

void ObsItemEditMessageReq::InternalSwap(ObsItemEditMessageReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &edit_info_, lhs_arena,
      &other->edit_info_, rhs_arena
  );
  swap(edit_msg_, other->edit_msg_);
}

std::string ObsItemEditMessageReq::GetTypeName() const {
  return "flremoting.protocol.ObsItemEditMessageReq";
}


// ===================================================================

class ObsItemEditMessageResp::_Internal {
 public:
  using HasBits = decltype(std::declval<ObsItemEditMessageResp>()._has_bits_);
  static const ::flremoting::protocol::BaseResponse& base_msg(const ObsItemEditMessageResp* msg);
  static void set_has_base_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::flremoting::protocol::ObsItemEditMessage& edit_msg(const ObsItemEditMessageResp* msg);
  static void set_has_edit_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::flremoting::protocol::BaseResponse&
ObsItemEditMessageResp::_Internal::base_msg(const ObsItemEditMessageResp* msg) {
  return *msg->base_msg_;
}
const ::flremoting::protocol::ObsItemEditMessage&
ObsItemEditMessageResp::_Internal::edit_msg(const ObsItemEditMessageResp* msg) {
  return *msg->edit_msg_;
}
void ObsItemEditMessageResp::clear_base_msg() {
  if (base_msg_ != nullptr) base_msg_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ObsItemEditMessageResp::ObsItemEditMessageResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flremoting.protocol.ObsItemEditMessageResp)
}
ObsItemEditMessageResp::ObsItemEditMessageResp(const ObsItemEditMessageResp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_base_msg()) {
    base_msg_ = new ::flremoting::protocol::BaseResponse(*from.base_msg_);
  } else {
    base_msg_ = nullptr;
  }
  if (from._internal_has_edit_msg()) {
    edit_msg_ = new ::flremoting::protocol::ObsItemEditMessage(*from.edit_msg_);
  } else {
    edit_msg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flremoting.protocol.ObsItemEditMessageResp)
}

inline void ObsItemEditMessageResp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&base_msg_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&edit_msg_) -
    reinterpret_cast<char*>(&base_msg_)) + sizeof(edit_msg_));
}

ObsItemEditMessageResp::~ObsItemEditMessageResp() {
  // @@protoc_insertion_point(destructor:flremoting.protocol.ObsItemEditMessageResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObsItemEditMessageResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete base_msg_;
  if (this != internal_default_instance()) delete edit_msg_;
}

void ObsItemEditMessageResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObsItemEditMessageResp::Clear() {
// @@protoc_insertion_point(message_clear_start:flremoting.protocol.ObsItemEditMessageResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(base_msg_ != nullptr);
      base_msg_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(edit_msg_ != nullptr);
      edit_msg_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ObsItemEditMessageResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .flremoting.protocol.BaseResponse base_msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_msg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .flremoting.protocol.ObsItemEditMessage edit_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_edit_msg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObsItemEditMessageResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flremoting.protocol.ObsItemEditMessageResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .flremoting.protocol.BaseResponse base_msg = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base_msg(this),
        _Internal::base_msg(this).GetCachedSize(), target, stream);
  }

  // optional .flremoting.protocol.ObsItemEditMessage edit_msg = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::edit_msg(this),
        _Internal::edit_msg(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flremoting.protocol.ObsItemEditMessageResp)
  return target;
}

size_t ObsItemEditMessageResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flremoting.protocol.ObsItemEditMessageResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .flremoting.protocol.BaseResponse base_msg = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *base_msg_);
    }

    // optional .flremoting.protocol.ObsItemEditMessage edit_msg = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *edit_msg_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObsItemEditMessageResp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ObsItemEditMessageResp*>(
      &from));
}

void ObsItemEditMessageResp::MergeFrom(const ObsItemEditMessageResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flremoting.protocol.ObsItemEditMessageResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_base_msg()->::flremoting::protocol::BaseResponse::MergeFrom(from._internal_base_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_edit_msg()->::flremoting::protocol::ObsItemEditMessage::MergeFrom(from._internal_edit_msg());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ObsItemEditMessageResp::CopyFrom(const ObsItemEditMessageResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flremoting.protocol.ObsItemEditMessageResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObsItemEditMessageResp::IsInitialized() const {
  return true;
}

void ObsItemEditMessageResp::InternalSwap(ObsItemEditMessageResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObsItemEditMessageResp, edit_msg_)
      + sizeof(ObsItemEditMessageResp::edit_msg_)
      - PROTOBUF_FIELD_OFFSET(ObsItemEditMessageResp, base_msg_)>(
          reinterpret_cast<char*>(&base_msg_),
          reinterpret_cast<char*>(&other->base_msg_));
}

std::string ObsItemEditMessageResp::GetTypeName() const {
  return "flremoting.protocol.ObsItemEditMessageResp";
}


// ===================================================================

class ObsDeviceInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ObsDeviceInfo>()._has_bits_);
  static void set_has_device_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_device_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ObsDeviceInfo::ObsDeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flremoting.protocol.ObsDeviceInfo)
}
ObsDeviceInfo::ObsDeviceInfo(const ObsDeviceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  device_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    device_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_device_name()) {
    device_name_.Set(from._internal_device_name(), 
      GetArenaForAllocation());
  }
  device_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    device_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_device_data()) {
    device_data_.Set(from._internal_device_data(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flremoting.protocol.ObsDeviceInfo)
}

inline void ObsDeviceInfo::SharedCtor() {
device_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  device_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
device_data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  device_data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ObsDeviceInfo::~ObsDeviceInfo() {
  // @@protoc_insertion_point(destructor:flremoting.protocol.ObsDeviceInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObsDeviceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  device_name_.Destroy();
  device_data_.Destroy();
}

void ObsDeviceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObsDeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:flremoting.protocol.ObsDeviceInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      device_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      device_data_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ObsDeviceInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string device_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_device_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string device_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_device_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObsDeviceInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flremoting.protocol.ObsDeviceInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string device_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_name(), target);
  }

  // optional string device_data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_device_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flremoting.protocol.ObsDeviceInfo)
  return target;
}

size_t ObsDeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flremoting.protocol.ObsDeviceInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string device_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_device_name());
    }

    // optional string device_data = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_device_data());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObsDeviceInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ObsDeviceInfo*>(
      &from));
}

void ObsDeviceInfo::MergeFrom(const ObsDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flremoting.protocol.ObsDeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_device_name(from._internal_device_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_device_data(from._internal_device_data());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ObsDeviceInfo::CopyFrom(const ObsDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flremoting.protocol.ObsDeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObsDeviceInfo::IsInitialized() const {
  return true;
}

void ObsDeviceInfo::InternalSwap(ObsDeviceInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &device_name_, lhs_arena,
      &other->device_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &device_data_, lhs_arena,
      &other->device_data_, rhs_arena
  );
}

std::string ObsDeviceInfo::GetTypeName() const {
  return "flremoting.protocol.ObsDeviceInfo";
}


// ===================================================================

class ObsDeviceMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ObsDeviceMessage>()._has_bits_);
  static void set_has_device_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_id_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gain_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_noise_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_activate(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_monitoring_value(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

ObsDeviceMessage::ObsDeviceMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  device_infos_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flremoting.protocol.ObsDeviceMessage)
}
ObsDeviceMessage::ObsDeviceMessage(const ObsDeviceMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      device_infos_(from.device_infos_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  id_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id_value()) {
    id_value_.Set(from._internal_id_value(), 
      GetArenaForAllocation());
  }
  ::memcpy(&device_type_, &from.device_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&monitoring_value_) -
    reinterpret_cast<char*>(&device_type_)) + sizeof(monitoring_value_));
  // @@protoc_insertion_point(copy_constructor:flremoting.protocol.ObsDeviceMessage)
}

inline void ObsDeviceMessage::SharedCtor() {
id_value_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_value_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&device_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&monitoring_value_) -
    reinterpret_cast<char*>(&device_type_)) + sizeof(monitoring_value_));
}

ObsDeviceMessage::~ObsDeviceMessage() {
  // @@protoc_insertion_point(destructor:flremoting.protocol.ObsDeviceMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObsDeviceMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_value_.Destroy();
}

void ObsDeviceMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObsDeviceMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:flremoting.protocol.ObsDeviceMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_infos_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_value_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&device_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&monitoring_value_) -
        reinterpret_cast<char*>(&device_type_)) + sizeof(monitoring_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ObsDeviceMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .flremoting.protocol.ObsDeviceType device_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::flremoting::protocol::ObsDeviceType_IsValid(val))) {
            _internal_set_device_type(static_cast<::flremoting::protocol::ObsDeviceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .flremoting.protocol.ObsDeviceInfo device_infos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_device_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string id_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_id_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double gain_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_gain_value(&has_bits);
          gain_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 noise_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_noise_value(&has_bits);
          noise_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_activate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_is_activate(&has_bits);
          is_activate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 monitoring_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_monitoring_value(&has_bits);
          monitoring_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObsDeviceMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flremoting.protocol.ObsDeviceMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .flremoting.protocol.ObsDeviceType device_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_device_type(), target);
  }

  // repeated .flremoting.protocol.ObsDeviceInfo device_infos = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_device_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_device_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string id_value = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_id_value(), target);
  }

  // optional double gain_value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_gain_value(), target);
  }

  // optional int32 noise_value = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_noise_value(), target);
  }

  // optional bool is_activate = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_is_activate(), target);
  }

  // optional int32 monitoring_value = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_monitoring_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flremoting.protocol.ObsDeviceMessage)
  return target;
}

size_t ObsDeviceMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flremoting.protocol.ObsDeviceMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flremoting.protocol.ObsDeviceInfo device_infos = 2;
  total_size += 1UL * this->_internal_device_infos_size();
  for (const auto& msg : this->device_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string id_value = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id_value());
    }

    // optional .flremoting.protocol.ObsDeviceType device_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_device_type());
    }

    // optional int32 noise_value = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_noise_value());
    }

    // optional double gain_value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional bool is_activate = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 monitoring_value = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_monitoring_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObsDeviceMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ObsDeviceMessage*>(
      &from));
}

void ObsDeviceMessage::MergeFrom(const ObsDeviceMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flremoting.protocol.ObsDeviceMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  device_infos_.MergeFrom(from.device_infos_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id_value(from._internal_id_value());
    }
    if (cached_has_bits & 0x00000002u) {
      device_type_ = from.device_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      noise_value_ = from.noise_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      gain_value_ = from.gain_value_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_activate_ = from.is_activate_;
    }
    if (cached_has_bits & 0x00000020u) {
      monitoring_value_ = from.monitoring_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ObsDeviceMessage::CopyFrom(const ObsDeviceMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flremoting.protocol.ObsDeviceMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObsDeviceMessage::IsInitialized() const {
  return true;
}

void ObsDeviceMessage::InternalSwap(ObsDeviceMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  device_infos_.InternalSwap(&other->device_infos_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_value_, lhs_arena,
      &other->id_value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObsDeviceMessage, monitoring_value_)
      + sizeof(ObsDeviceMessage::monitoring_value_)
      - PROTOBUF_FIELD_OFFSET(ObsDeviceMessage, device_type_)>(
          reinterpret_cast<char*>(&device_type_),
          reinterpret_cast<char*>(&other->device_type_));
}

std::string ObsDeviceMessage::GetTypeName() const {
  return "flremoting.protocol.ObsDeviceMessage";
}


// ===================================================================

class ObsDeviceEditMessageRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ObsDeviceEditMessageRequest>()._has_bits_);
  static void set_has_action_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_used_str_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_used_double_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_used_int_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ObsDeviceEditMessageRequest::ObsDeviceEditMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flremoting.protocol.ObsDeviceEditMessageRequest)
}
ObsDeviceEditMessageRequest::ObsDeviceEditMessageRequest(const ObsDeviceEditMessageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  used_str_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    used_str_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_used_str_value()) {
    used_str_value_.Set(from._internal_used_str_value(), 
      GetArenaForAllocation());
  }
  ::memcpy(&action_type_, &from.action_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&used_double_value_) -
    reinterpret_cast<char*>(&action_type_)) + sizeof(used_double_value_));
  // @@protoc_insertion_point(copy_constructor:flremoting.protocol.ObsDeviceEditMessageRequest)
}

inline void ObsDeviceEditMessageRequest::SharedCtor() {
used_str_value_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  used_str_value_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&action_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&used_double_value_) -
    reinterpret_cast<char*>(&action_type_)) + sizeof(used_double_value_));
}

ObsDeviceEditMessageRequest::~ObsDeviceEditMessageRequest() {
  // @@protoc_insertion_point(destructor:flremoting.protocol.ObsDeviceEditMessageRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObsDeviceEditMessageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  used_str_value_.Destroy();
}

void ObsDeviceEditMessageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObsDeviceEditMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flremoting.protocol.ObsDeviceEditMessageRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    used_str_value_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&action_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&used_double_value_) -
        reinterpret_cast<char*>(&action_type_)) + sizeof(used_double_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ObsDeviceEditMessageRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .flremoting.protocol.ObsDeviceActionType action_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::flremoting::protocol::ObsDeviceActionType_IsValid(val))) {
            _internal_set_action_type(static_cast<::flremoting::protocol::ObsDeviceActionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string used_str_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_used_str_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double used_double_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_used_double_value(&has_bits);
          used_double_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 used_int_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_used_int_value(&has_bits);
          used_int_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObsDeviceEditMessageRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flremoting.protocol.ObsDeviceEditMessageRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .flremoting.protocol.ObsDeviceActionType action_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_action_type(), target);
  }

  // optional string used_str_value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_used_str_value(), target);
  }

  // optional double used_double_value = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_used_double_value(), target);
  }

  // optional int32 used_int_value = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_used_int_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flremoting.protocol.ObsDeviceEditMessageRequest)
  return target;
}

size_t ObsDeviceEditMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flremoting.protocol.ObsDeviceEditMessageRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string used_str_value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_used_str_value());
    }

    // optional .flremoting.protocol.ObsDeviceActionType action_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_action_type());
    }

    // optional int32 used_int_value = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_used_int_value());
    }

    // optional double used_double_value = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObsDeviceEditMessageRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ObsDeviceEditMessageRequest*>(
      &from));
}

void ObsDeviceEditMessageRequest::MergeFrom(const ObsDeviceEditMessageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flremoting.protocol.ObsDeviceEditMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_used_str_value(from._internal_used_str_value());
    }
    if (cached_has_bits & 0x00000002u) {
      action_type_ = from.action_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      used_int_value_ = from.used_int_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      used_double_value_ = from.used_double_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ObsDeviceEditMessageRequest::CopyFrom(const ObsDeviceEditMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flremoting.protocol.ObsDeviceEditMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObsDeviceEditMessageRequest::IsInitialized() const {
  return true;
}

void ObsDeviceEditMessageRequest::InternalSwap(ObsDeviceEditMessageRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &used_str_value_, lhs_arena,
      &other->used_str_value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObsDeviceEditMessageRequest, used_double_value_)
      + sizeof(ObsDeviceEditMessageRequest::used_double_value_)
      - PROTOBUF_FIELD_OFFSET(ObsDeviceEditMessageRequest, action_type_)>(
          reinterpret_cast<char*>(&action_type_),
          reinterpret_cast<char*>(&other->action_type_));
}

std::string ObsDeviceEditMessageRequest::GetTypeName() const {
  return "flremoting.protocol.ObsDeviceEditMessageRequest";
}


// ===================================================================

class ObsSourceFrame2Message::_Internal {
 public:
  using HasBits = decltype(std::declval<ObsSourceFrame2Message>()._has_bits_);
  static void set_has_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_frame_format(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_frame_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_frame_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_frame_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ObsSourceFrame2Message::ObsSourceFrame2Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flremoting.protocol.ObsSourceFrame2Message)
}
ObsSourceFrame2Message::ObsSourceFrame2Message(const ObsSourceFrame2Message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  frame_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    frame_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_frame_data()) {
    frame_data_.Set(from._internal_frame_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&frame_id_, &from.frame_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_height_) -
    reinterpret_cast<char*>(&frame_id_)) + sizeof(frame_height_));
  // @@protoc_insertion_point(copy_constructor:flremoting.protocol.ObsSourceFrame2Message)
}

inline void ObsSourceFrame2Message::SharedCtor() {
frame_data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  frame_data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&frame_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&frame_height_) -
    reinterpret_cast<char*>(&frame_id_)) + sizeof(frame_height_));
}

ObsSourceFrame2Message::~ObsSourceFrame2Message() {
  // @@protoc_insertion_point(destructor:flremoting.protocol.ObsSourceFrame2Message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObsSourceFrame2Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  frame_data_.Destroy();
}

void ObsSourceFrame2Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObsSourceFrame2Message::Clear() {
// @@protoc_insertion_point(message_clear_start:flremoting.protocol.ObsSourceFrame2Message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    frame_data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&frame_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&frame_height_) -
        reinterpret_cast<char*>(&frame_id_)) + sizeof(frame_height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ObsSourceFrame2Message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 frame_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_frame_id(&has_bits);
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 frame_format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_frame_format(&has_bits);
          frame_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 frame_width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_frame_width(&has_bits);
          frame_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 frame_height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_frame_height(&has_bits);
          frame_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string frame_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_frame_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObsSourceFrame2Message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flremoting.protocol.ObsSourceFrame2Message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 frame_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_frame_id(), target);
  }

  // optional uint32 frame_format = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_frame_format(), target);
  }

  // optional uint32 frame_width = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_frame_width(), target);
  }

  // optional uint32 frame_height = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_frame_height(), target);
  }

  // optional string frame_data = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_frame_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flremoting.protocol.ObsSourceFrame2Message)
  return target;
}

size_t ObsSourceFrame2Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flremoting.protocol.ObsSourceFrame2Message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string frame_data = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_frame_data());
    }

    // optional int64 frame_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_frame_id());
    }

    // optional uint32 frame_format = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frame_format());
    }

    // optional uint32 frame_width = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frame_width());
    }

    // optional uint32 frame_height = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frame_height());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObsSourceFrame2Message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ObsSourceFrame2Message*>(
      &from));
}

void ObsSourceFrame2Message::MergeFrom(const ObsSourceFrame2Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flremoting.protocol.ObsSourceFrame2Message)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_frame_data(from._internal_frame_data());
    }
    if (cached_has_bits & 0x00000002u) {
      frame_id_ = from.frame_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      frame_format_ = from.frame_format_;
    }
    if (cached_has_bits & 0x00000008u) {
      frame_width_ = from.frame_width_;
    }
    if (cached_has_bits & 0x00000010u) {
      frame_height_ = from.frame_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ObsSourceFrame2Message::CopyFrom(const ObsSourceFrame2Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flremoting.protocol.ObsSourceFrame2Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObsSourceFrame2Message::IsInitialized() const {
  return true;
}

void ObsSourceFrame2Message::InternalSwap(ObsSourceFrame2Message* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &frame_data_, lhs_arena,
      &other->frame_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObsSourceFrame2Message, frame_height_)
      + sizeof(ObsSourceFrame2Message::frame_height_)
      - PROTOBUF_FIELD_OFFSET(ObsSourceFrame2Message, frame_id_)>(
          reinterpret_cast<char*>(&frame_id_),
          reinterpret_cast<char*>(&other->frame_id_));
}

std::string ObsSourceFrame2Message::GetTypeName() const {
  return "flremoting.protocol.ObsSourceFrame2Message";
}


// ===================================================================

class ObsSceneItemInfoData::_Internal {
 public:
  using HasBits = decltype(std::declval<ObsSceneItemInfoData>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_posx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_posy(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_itemid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

ObsSceneItemInfoData::ObsSceneItemInfoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flremoting.protocol.ObsSceneItemInfoData)
}
ObsSceneItemInfoData::ObsSceneItemInfoData(const ObsSceneItemInfoData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&posx_, &from.posx_,
    static_cast<size_t>(reinterpret_cast<char*>(&visible_) -
    reinterpret_cast<char*>(&posx_)) + sizeof(visible_));
  // @@protoc_insertion_point(copy_constructor:flremoting.protocol.ObsSceneItemInfoData)
}

inline void ObsSceneItemInfoData::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&posx_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&visible_) -
    reinterpret_cast<char*>(&posx_)) + sizeof(visible_));
}

ObsSceneItemInfoData::~ObsSceneItemInfoData() {
  // @@protoc_insertion_point(destructor:flremoting.protocol.ObsSceneItemInfoData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObsSceneItemInfoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
}

void ObsSceneItemInfoData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObsSceneItemInfoData::Clear() {
// @@protoc_insertion_point(message_clear_start:flremoting.protocol.ObsSceneItemInfoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&posx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&visible_) -
        reinterpret_cast<char*>(&posx_)) + sizeof(visible_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ObsSceneItemInfoData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float posx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_posx(&has_bits);
          posx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float posy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_posy(&has_bits);
          posy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool visible = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_visible(&has_bits);
          visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 itemid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_itemid(&has_bits);
          itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObsSceneItemInfoData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flremoting.protocol.ObsSceneItemInfoData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional float posx = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_posx(), target);
  }

  // optional float posy = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_posy(), target);
  }

  // optional float width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_width(), target);
  }

  // optional float height = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_height(), target);
  }

  // optional bool visible = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_visible(), target);
  }

  // optional int64 itemid = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_itemid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flremoting.protocol.ObsSceneItemInfoData)
  return target;
}

size_t ObsSceneItemInfoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flremoting.protocol.ObsSceneItemInfoData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional float posx = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float posy = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float width = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float height = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional int64 itemid = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_itemid());
    }

    // optional bool visible = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObsSceneItemInfoData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ObsSceneItemInfoData*>(
      &from));
}

void ObsSceneItemInfoData::MergeFrom(const ObsSceneItemInfoData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flremoting.protocol.ObsSceneItemInfoData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      posx_ = from.posx_;
    }
    if (cached_has_bits & 0x00000004u) {
      posy_ = from.posy_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000020u) {
      itemid_ = from.itemid_;
    }
    if (cached_has_bits & 0x00000040u) {
      visible_ = from.visible_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ObsSceneItemInfoData::CopyFrom(const ObsSceneItemInfoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flremoting.protocol.ObsSceneItemInfoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObsSceneItemInfoData::IsInitialized() const {
  return true;
}

void ObsSceneItemInfoData::InternalSwap(ObsSceneItemInfoData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObsSceneItemInfoData, visible_)
      + sizeof(ObsSceneItemInfoData::visible_)
      - PROTOBUF_FIELD_OFFSET(ObsSceneItemInfoData, posx_)>(
          reinterpret_cast<char*>(&posx_),
          reinterpret_cast<char*>(&other->posx_));
}

std::string ObsSceneItemInfoData::GetTypeName() const {
  return "flremoting.protocol.ObsSceneItemInfoData";
}


// ===================================================================

class ObsSceneItemInfoMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ObsSceneItemInfoMessage>()._has_bits_);
  static void set_has_fps(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_peak_volume(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ObsSceneItemInfoMessage::ObsSceneItemInfoMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  infos_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flremoting.protocol.ObsSceneItemInfoMessage)
}
ObsSceneItemInfoMessage::ObsSceneItemInfoMessage(const ObsSceneItemInfoMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&fps_, &from.fps_,
    static_cast<size_t>(reinterpret_cast<char*>(&peak_volume_) -
    reinterpret_cast<char*>(&fps_)) + sizeof(peak_volume_));
  // @@protoc_insertion_point(copy_constructor:flremoting.protocol.ObsSceneItemInfoMessage)
}

inline void ObsSceneItemInfoMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fps_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&peak_volume_) -
    reinterpret_cast<char*>(&fps_)) + sizeof(peak_volume_));
}

ObsSceneItemInfoMessage::~ObsSceneItemInfoMessage() {
  // @@protoc_insertion_point(destructor:flremoting.protocol.ObsSceneItemInfoMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObsSceneItemInfoMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ObsSceneItemInfoMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObsSceneItemInfoMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:flremoting.protocol.ObsSceneItemInfoMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&fps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&peak_volume_) -
        reinterpret_cast<char*>(&fps_)) + sizeof(peak_volume_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ObsSceneItemInfoMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .flremoting.protocol.ObsSceneItemInfoData infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional double fps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_fps(&has_bits);
          fps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 peak_volume = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_peak_volume(&has_bits);
          peak_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObsSceneItemInfoMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flremoting.protocol.ObsSceneItemInfoMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flremoting.protocol.ObsSceneItemInfoData infos = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional double fps = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_fps(), target);
  }

  // optional int32 peak_volume = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_peak_volume(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flremoting.protocol.ObsSceneItemInfoMessage)
  return target;
}

size_t ObsSceneItemInfoMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flremoting.protocol.ObsSceneItemInfoMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flremoting.protocol.ObsSceneItemInfoData infos = 1;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double fps = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 peak_volume = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_peak_volume());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObsSceneItemInfoMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ObsSceneItemInfoMessage*>(
      &from));
}

void ObsSceneItemInfoMessage::MergeFrom(const ObsSceneItemInfoMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flremoting.protocol.ObsSceneItemInfoMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      fps_ = from.fps_;
    }
    if (cached_has_bits & 0x00000002u) {
      peak_volume_ = from.peak_volume_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ObsSceneItemInfoMessage::CopyFrom(const ObsSceneItemInfoMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flremoting.protocol.ObsSceneItemInfoMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObsSceneItemInfoMessage::IsInitialized() const {
  return true;
}

void ObsSceneItemInfoMessage::InternalSwap(ObsSceneItemInfoMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  infos_.InternalSwap(&other->infos_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObsSceneItemInfoMessage, peak_volume_)
      + sizeof(ObsSceneItemInfoMessage::peak_volume_)
      - PROTOBUF_FIELD_OFFSET(ObsSceneItemInfoMessage, fps_)>(
          reinterpret_cast<char*>(&fps_),
          reinterpret_cast<char*>(&other->fps_));
}

std::string ObsSceneItemInfoMessage::GetTypeName() const {
  return "flremoting.protocol.ObsSceneItemInfoMessage";
}


// ===================================================================

class ObsFPSInfoMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ObsFPSInfoMessage>()._has_bits_);
  static void set_has_fpsnum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fpsden(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ObsFPSInfoMessage::ObsFPSInfoMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flremoting.protocol.ObsFPSInfoMessage)
}
ObsFPSInfoMessage::ObsFPSInfoMessage(const ObsFPSInfoMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&fpsnum_, &from.fpsnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&fpsden_) -
    reinterpret_cast<char*>(&fpsnum_)) + sizeof(fpsden_));
  // @@protoc_insertion_point(copy_constructor:flremoting.protocol.ObsFPSInfoMessage)
}

inline void ObsFPSInfoMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fpsnum_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fpsden_) -
    reinterpret_cast<char*>(&fpsnum_)) + sizeof(fpsden_));
}

ObsFPSInfoMessage::~ObsFPSInfoMessage() {
  // @@protoc_insertion_point(destructor:flremoting.protocol.ObsFPSInfoMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObsFPSInfoMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ObsFPSInfoMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObsFPSInfoMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:flremoting.protocol.ObsFPSInfoMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&fpsnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fpsden_) -
        reinterpret_cast<char*>(&fpsnum_)) + sizeof(fpsden_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ObsFPSInfoMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 fpsnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_fpsnum(&has_bits);
          fpsnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 fpsden = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_fpsden(&has_bits);
          fpsden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObsFPSInfoMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flremoting.protocol.ObsFPSInfoMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fpsnum = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fpsnum(), target);
  }

  // optional uint32 fpsden = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_fpsden(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flremoting.protocol.ObsFPSInfoMessage)
  return target;
}

size_t ObsFPSInfoMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flremoting.protocol.ObsFPSInfoMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 fpsnum = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fpsnum());
    }

    // optional uint32 fpsden = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fpsden());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObsFPSInfoMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ObsFPSInfoMessage*>(
      &from));
}

void ObsFPSInfoMessage::MergeFrom(const ObsFPSInfoMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flremoting.protocol.ObsFPSInfoMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      fpsnum_ = from.fpsnum_;
    }
    if (cached_has_bits & 0x00000002u) {
      fpsden_ = from.fpsden_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ObsFPSInfoMessage::CopyFrom(const ObsFPSInfoMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flremoting.protocol.ObsFPSInfoMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObsFPSInfoMessage::IsInitialized() const {
  return true;
}

void ObsFPSInfoMessage::InternalSwap(ObsFPSInfoMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObsFPSInfoMessage, fpsden_)
      + sizeof(ObsFPSInfoMessage::fpsden_)
      - PROTOBUF_FIELD_OFFSET(ObsFPSInfoMessage, fpsnum_)>(
          reinterpret_cast<char*>(&fpsnum_),
          reinterpret_cast<char*>(&other->fpsnum_));
}

std::string ObsFPSInfoMessage::GetTypeName() const {
  return "flremoting.protocol.ObsFPSInfoMessage";
}


// ===================================================================

class ObsMeanRateInfoMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ObsMeanRateInfoMessage>()._has_bits_);
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fpsnum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ObsMeanRateInfoMessage::ObsMeanRateInfoMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flremoting.protocol.ObsMeanRateInfoMessage)
}
ObsMeanRateInfoMessage::ObsMeanRateInfoMessage(const ObsMeanRateInfoMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&enable_, &from.enable_,
    static_cast<size_t>(reinterpret_cast<char*>(&fpsnum_) -
    reinterpret_cast<char*>(&enable_)) + sizeof(fpsnum_));
  // @@protoc_insertion_point(copy_constructor:flremoting.protocol.ObsMeanRateInfoMessage)
}

inline void ObsMeanRateInfoMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&enable_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fpsnum_) -
    reinterpret_cast<char*>(&enable_)) + sizeof(fpsnum_));
}

ObsMeanRateInfoMessage::~ObsMeanRateInfoMessage() {
  // @@protoc_insertion_point(destructor:flremoting.protocol.ObsMeanRateInfoMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObsMeanRateInfoMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ObsMeanRateInfoMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObsMeanRateInfoMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:flremoting.protocol.ObsMeanRateInfoMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&enable_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fpsnum_) -
        reinterpret_cast<char*>(&enable_)) + sizeof(fpsnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ObsMeanRateInfoMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_enable(&has_bits);
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 fpsnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_fpsnum(&has_bits);
          fpsnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObsMeanRateInfoMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flremoting.protocol.ObsMeanRateInfoMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  // optional int32 fpsnum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_fpsnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flremoting.protocol.ObsMeanRateInfoMessage)
  return target;
}

size_t ObsMeanRateInfoMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flremoting.protocol.ObsMeanRateInfoMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool enable = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int32 fpsnum = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_fpsnum());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObsMeanRateInfoMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ObsMeanRateInfoMessage*>(
      &from));
}

void ObsMeanRateInfoMessage::MergeFrom(const ObsMeanRateInfoMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flremoting.protocol.ObsMeanRateInfoMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      enable_ = from.enable_;
    }
    if (cached_has_bits & 0x00000002u) {
      fpsnum_ = from.fpsnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ObsMeanRateInfoMessage::CopyFrom(const ObsMeanRateInfoMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flremoting.protocol.ObsMeanRateInfoMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObsMeanRateInfoMessage::IsInitialized() const {
  return true;
}

void ObsMeanRateInfoMessage::InternalSwap(ObsMeanRateInfoMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObsMeanRateInfoMessage, fpsnum_)
      + sizeof(ObsMeanRateInfoMessage::fpsnum_)
      - PROTOBUF_FIELD_OFFSET(ObsMeanRateInfoMessage, enable_)>(
          reinterpret_cast<char*>(&enable_),
          reinterpret_cast<char*>(&other->enable_));
}

std::string ObsMeanRateInfoMessage::GetTypeName() const {
  return "flremoting.protocol.ObsMeanRateInfoMessage";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace flremoting
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flremoting::protocol::ObsPropertyDoubleInfo*
Arena::CreateMaybeMessage< ::flremoting::protocol::ObsPropertyDoubleInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flremoting::protocol::ObsPropertyDoubleInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::flremoting::protocol::ObsPropertyInt64Info*
Arena::CreateMaybeMessage< ::flremoting::protocol::ObsPropertyInt64Info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flremoting::protocol::ObsPropertyInt64Info >(arena);
}
template<> PROTOBUF_NOINLINE ::flremoting::protocol::ObsPropertyStringInfo*
Arena::CreateMaybeMessage< ::flremoting::protocol::ObsPropertyStringInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flremoting::protocol::ObsPropertyStringInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::flremoting::protocol::ObsPropertiesInfo*
Arena::CreateMaybeMessage< ::flremoting::protocol::ObsPropertiesInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flremoting::protocol::ObsPropertiesInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::flremoting::protocol::ObsPropertiesData*
Arena::CreateMaybeMessage< ::flremoting::protocol::ObsPropertiesData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flremoting::protocol::ObsPropertiesData >(arena);
}
template<> PROTOBUF_NOINLINE ::flremoting::protocol::ObsTextSourceData*
Arena::CreateMaybeMessage< ::flremoting::protocol::ObsTextSourceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flremoting::protocol::ObsTextSourceData >(arena);
}
template<> PROTOBUF_NOINLINE ::flremoting::protocol::ObsImageSourceData*
Arena::CreateMaybeMessage< ::flremoting::protocol::ObsImageSourceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flremoting::protocol::ObsImageSourceData >(arena);
}
template<> PROTOBUF_NOINLINE ::flremoting::protocol::ObsVideoSourceData*
Arena::CreateMaybeMessage< ::flremoting::protocol::ObsVideoSourceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flremoting::protocol::ObsVideoSourceData >(arena);
}
template<> PROTOBUF_NOINLINE ::flremoting::protocol::ObsCaptureSourceWindowInfo*
Arena::CreateMaybeMessage< ::flremoting::protocol::ObsCaptureSourceWindowInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flremoting::protocol::ObsCaptureSourceWindowInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::flremoting::protocol::ObsCaptureSourceGameInfo*
Arena::CreateMaybeMessage< ::flremoting::protocol::ObsCaptureSourceGameInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flremoting::protocol::ObsCaptureSourceGameInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::flremoting::protocol::ObsCaptureSourceMonitorInfo*
Arena::CreateMaybeMessage< ::flremoting::protocol::ObsCaptureSourceMonitorInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flremoting::protocol::ObsCaptureSourceMonitorInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::flremoting::protocol::ObsCaptureSourceData*
Arena::CreateMaybeMessage< ::flremoting::protocol::ObsCaptureSourceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flremoting::protocol::ObsCaptureSourceData >(arena);
}
template<> PROTOBUF_NOINLINE ::flremoting::protocol::ObsPhoneCastingSourceData*
Arena::CreateMaybeMessage< ::flremoting::protocol::ObsPhoneCastingSourceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flremoting::protocol::ObsPhoneCastingSourceData >(arena);
}
template<> PROTOBUF_NOINLINE ::flremoting::protocol::ObsCameraSourceData*
Arena::CreateMaybeMessage< ::flremoting::protocol::ObsCameraSourceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flremoting::protocol::ObsCameraSourceData >(arena);
}
template<> PROTOBUF_NOINLINE ::flremoting::protocol::InputVolumeData*
Arena::CreateMaybeMessage< ::flremoting::protocol::InputVolumeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flremoting::protocol::InputVolumeData >(arena);
}
template<> PROTOBUF_NOINLINE ::flremoting::protocol::OutputVolumeData*
Arena::CreateMaybeMessage< ::flremoting::protocol::OutputVolumeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flremoting::protocol::OutputVolumeData >(arena);
}
template<> PROTOBUF_NOINLINE ::flremoting::protocol::ObsItemMessage*
Arena::CreateMaybeMessage< ::flremoting::protocol::ObsItemMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flremoting::protocol::ObsItemMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::flremoting::protocol::ObsCursorMessage*
Arena::CreateMaybeMessage< ::flremoting::protocol::ObsCursorMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flremoting::protocol::ObsCursorMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::flremoting::protocol::ObsItemEditMessage*
Arena::CreateMaybeMessage< ::flremoting::protocol::ObsItemEditMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flremoting::protocol::ObsItemEditMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::flremoting::protocol::ObsItemEditMessageReq*
Arena::CreateMaybeMessage< ::flremoting::protocol::ObsItemEditMessageReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flremoting::protocol::ObsItemEditMessageReq >(arena);
}
template<> PROTOBUF_NOINLINE ::flremoting::protocol::ObsItemEditMessageResp*
Arena::CreateMaybeMessage< ::flremoting::protocol::ObsItemEditMessageResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flremoting::protocol::ObsItemEditMessageResp >(arena);
}
template<> PROTOBUF_NOINLINE ::flremoting::protocol::ObsDeviceInfo*
Arena::CreateMaybeMessage< ::flremoting::protocol::ObsDeviceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flremoting::protocol::ObsDeviceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::flremoting::protocol::ObsDeviceMessage*
Arena::CreateMaybeMessage< ::flremoting::protocol::ObsDeviceMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flremoting::protocol::ObsDeviceMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::flremoting::protocol::ObsDeviceEditMessageRequest*
Arena::CreateMaybeMessage< ::flremoting::protocol::ObsDeviceEditMessageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flremoting::protocol::ObsDeviceEditMessageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flremoting::protocol::ObsSourceFrame2Message*
Arena::CreateMaybeMessage< ::flremoting::protocol::ObsSourceFrame2Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flremoting::protocol::ObsSourceFrame2Message >(arena);
}
template<> PROTOBUF_NOINLINE ::flremoting::protocol::ObsSceneItemInfoData*
Arena::CreateMaybeMessage< ::flremoting::protocol::ObsSceneItemInfoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flremoting::protocol::ObsSceneItemInfoData >(arena);
}
template<> PROTOBUF_NOINLINE ::flremoting::protocol::ObsSceneItemInfoMessage*
Arena::CreateMaybeMessage< ::flremoting::protocol::ObsSceneItemInfoMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flremoting::protocol::ObsSceneItemInfoMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::flremoting::protocol::ObsFPSInfoMessage*
Arena::CreateMaybeMessage< ::flremoting::protocol::ObsFPSInfoMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flremoting::protocol::ObsFPSInfoMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::flremoting::protocol::ObsMeanRateInfoMessage*
Arena::CreateMaybeMessage< ::flremoting::protocol::ObsMeanRateInfoMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flremoting::protocol::ObsMeanRateInfoMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
