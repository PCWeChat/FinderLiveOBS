// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flframe.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flframe_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flframe_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flframe_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flframe_2eproto {
  static const uint32_t offsets[];
};
namespace flremoting {
namespace protocol {
class FrameAudioMessage;
struct FrameAudioMessageDefaultTypeInternal;
extern FrameAudioMessageDefaultTypeInternal _FrameAudioMessage_default_instance_;
class FrameVideoMessage;
struct FrameVideoMessageDefaultTypeInternal;
extern FrameVideoMessageDefaultTypeInternal _FrameVideoMessage_default_instance_;
}  // namespace protocol
}  // namespace flremoting
PROTOBUF_NAMESPACE_OPEN
template<> ::flremoting::protocol::FrameAudioMessage* Arena::CreateMaybeMessage<::flremoting::protocol::FrameAudioMessage>(Arena*);
template<> ::flremoting::protocol::FrameVideoMessage* Arena::CreateMaybeMessage<::flremoting::protocol::FrameVideoMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flremoting {
namespace protocol {

// ===================================================================

class FrameVideoMessage final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:flremoting.protocol.FrameVideoMessage) */ {
 public:
  inline FrameVideoMessage() : FrameVideoMessage(nullptr) {}
  ~FrameVideoMessage() override;
  explicit PROTOBUF_CONSTEXPR FrameVideoMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrameVideoMessage(const FrameVideoMessage& from);
  FrameVideoMessage(FrameVideoMessage&& from) noexcept
    : FrameVideoMessage() {
    *this = ::std::move(from);
  }

  inline FrameVideoMessage& operator=(const FrameVideoMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameVideoMessage& operator=(FrameVideoMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FrameVideoMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrameVideoMessage* internal_default_instance() {
    return reinterpret_cast<const FrameVideoMessage*>(
               &_FrameVideoMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FrameVideoMessage& a, FrameVideoMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameVideoMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameVideoMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FrameVideoMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FrameVideoMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FrameVideoMessage& from);
  void MergeFrom(const FrameVideoMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FrameVideoMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flremoting.protocol.FrameVideoMessage";
  }
  protected:
  explicit FrameVideoMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameMsgFieldNumber = 1,
    kFrameIdFieldNumber = 2,
    kFrameWidthFieldNumber = 3,
    kFrameTimestampFieldNumber = 5,
    kFrameHeightFieldNumber = 4,
    kFrameRotationFieldNumber = 6,
  };
  // optional string frame_msg = 1;
  bool has_frame_msg() const;
  private:
  bool _internal_has_frame_msg() const;
  public:
  void clear_frame_msg();
  const std::string& frame_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frame_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frame_msg();
  PROTOBUF_NODISCARD std::string* release_frame_msg();
  void set_allocated_frame_msg(std::string* frame_msg);
  private:
  const std::string& _internal_frame_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frame_msg(const std::string& value);
  std::string* _internal_mutable_frame_msg();
  public:

  // optional uint32 frame_id = 2;
  bool has_frame_id() const;
  private:
  bool _internal_has_frame_id() const;
  public:
  void clear_frame_id();
  uint32_t frame_id() const;
  void set_frame_id(uint32_t value);
  private:
  uint32_t _internal_frame_id() const;
  void _internal_set_frame_id(uint32_t value);
  public:

  // optional uint32 frame_width = 3;
  bool has_frame_width() const;
  private:
  bool _internal_has_frame_width() const;
  public:
  void clear_frame_width();
  uint32_t frame_width() const;
  void set_frame_width(uint32_t value);
  private:
  uint32_t _internal_frame_width() const;
  void _internal_set_frame_width(uint32_t value);
  public:

  // optional uint64 frame_timestamp = 5;
  bool has_frame_timestamp() const;
  private:
  bool _internal_has_frame_timestamp() const;
  public:
  void clear_frame_timestamp();
  uint64_t frame_timestamp() const;
  void set_frame_timestamp(uint64_t value);
  private:
  uint64_t _internal_frame_timestamp() const;
  void _internal_set_frame_timestamp(uint64_t value);
  public:

  // optional uint32 frame_height = 4;
  bool has_frame_height() const;
  private:
  bool _internal_has_frame_height() const;
  public:
  void clear_frame_height();
  uint32_t frame_height() const;
  void set_frame_height(uint32_t value);
  private:
  uint32_t _internal_frame_height() const;
  void _internal_set_frame_height(uint32_t value);
  public:

  // optional uint32 frame_rotation = 6;
  bool has_frame_rotation() const;
  private:
  bool _internal_has_frame_rotation() const;
  public:
  void clear_frame_rotation();
  uint32_t frame_rotation() const;
  void set_frame_rotation(uint32_t value);
  private:
  uint32_t _internal_frame_rotation() const;
  void _internal_set_frame_rotation(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:flremoting.protocol.FrameVideoMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_msg_;
  uint32_t frame_id_;
  uint32_t frame_width_;
  uint64_t frame_timestamp_;
  uint32_t frame_height_;
  uint32_t frame_rotation_;
  friend struct ::TableStruct_flframe_2eproto;
};
// -------------------------------------------------------------------

class FrameAudioMessage final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:flremoting.protocol.FrameAudioMessage) */ {
 public:
  inline FrameAudioMessage() : FrameAudioMessage(nullptr) {}
  ~FrameAudioMessage() override;
  explicit PROTOBUF_CONSTEXPR FrameAudioMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrameAudioMessage(const FrameAudioMessage& from);
  FrameAudioMessage(FrameAudioMessage&& from) noexcept
    : FrameAudioMessage() {
    *this = ::std::move(from);
  }

  inline FrameAudioMessage& operator=(const FrameAudioMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameAudioMessage& operator=(FrameAudioMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FrameAudioMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrameAudioMessage* internal_default_instance() {
    return reinterpret_cast<const FrameAudioMessage*>(
               &_FrameAudioMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FrameAudioMessage& a, FrameAudioMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameAudioMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameAudioMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FrameAudioMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FrameAudioMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FrameAudioMessage& from);
  void MergeFrom(const FrameAudioMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FrameAudioMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flremoting.protocol.FrameAudioMessage";
  }
  protected:
  explicit FrameAudioMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameMsgFieldNumber = 1,
    kFrameIdFieldNumber = 2,
    kFrameRateFieldNumber = 3,
    kFrameTimestampFieldNumber = 5,
    kFrameChannelFieldNumber = 4,
  };
  // optional string frame_msg = 1;
  bool has_frame_msg() const;
  private:
  bool _internal_has_frame_msg() const;
  public:
  void clear_frame_msg();
  const std::string& frame_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frame_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frame_msg();
  PROTOBUF_NODISCARD std::string* release_frame_msg();
  void set_allocated_frame_msg(std::string* frame_msg);
  private:
  const std::string& _internal_frame_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frame_msg(const std::string& value);
  std::string* _internal_mutable_frame_msg();
  public:

  // optional uint32 frame_id = 2;
  bool has_frame_id() const;
  private:
  bool _internal_has_frame_id() const;
  public:
  void clear_frame_id();
  uint32_t frame_id() const;
  void set_frame_id(uint32_t value);
  private:
  uint32_t _internal_frame_id() const;
  void _internal_set_frame_id(uint32_t value);
  public:

  // optional uint32 frame_rate = 3;
  bool has_frame_rate() const;
  private:
  bool _internal_has_frame_rate() const;
  public:
  void clear_frame_rate();
  uint32_t frame_rate() const;
  void set_frame_rate(uint32_t value);
  private:
  uint32_t _internal_frame_rate() const;
  void _internal_set_frame_rate(uint32_t value);
  public:

  // optional uint64 frame_timestamp = 5;
  bool has_frame_timestamp() const;
  private:
  bool _internal_has_frame_timestamp() const;
  public:
  void clear_frame_timestamp();
  uint64_t frame_timestamp() const;
  void set_frame_timestamp(uint64_t value);
  private:
  uint64_t _internal_frame_timestamp() const;
  void _internal_set_frame_timestamp(uint64_t value);
  public:

  // optional uint32 frame_channel = 4;
  bool has_frame_channel() const;
  private:
  bool _internal_has_frame_channel() const;
  public:
  void clear_frame_channel();
  uint32_t frame_channel() const;
  void set_frame_channel(uint32_t value);
  private:
  uint32_t _internal_frame_channel() const;
  void _internal_set_frame_channel(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:flremoting.protocol.FrameAudioMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_msg_;
  uint32_t frame_id_;
  uint32_t frame_rate_;
  uint64_t frame_timestamp_;
  uint32_t frame_channel_;
  friend struct ::TableStruct_flframe_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FrameVideoMessage

// optional string frame_msg = 1;
inline bool FrameVideoMessage::_internal_has_frame_msg() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FrameVideoMessage::has_frame_msg() const {
  return _internal_has_frame_msg();
}
inline void FrameVideoMessage::clear_frame_msg() {
  frame_msg_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FrameVideoMessage::frame_msg() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.FrameVideoMessage.frame_msg)
  return _internal_frame_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FrameVideoMessage::set_frame_msg(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 frame_msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flremoting.protocol.FrameVideoMessage.frame_msg)
}
inline std::string* FrameVideoMessage::mutable_frame_msg() {
  std::string* _s = _internal_mutable_frame_msg();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.FrameVideoMessage.frame_msg)
  return _s;
}
inline const std::string& FrameVideoMessage::_internal_frame_msg() const {
  return frame_msg_.Get();
}
inline void FrameVideoMessage::_internal_set_frame_msg(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  frame_msg_.Set(value, GetArenaForAllocation());
}
inline std::string* FrameVideoMessage::_internal_mutable_frame_msg() {
  _has_bits_[0] |= 0x00000001u;
  return frame_msg_.Mutable(GetArenaForAllocation());
}
inline std::string* FrameVideoMessage::release_frame_msg() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.FrameVideoMessage.frame_msg)
  if (!_internal_has_frame_msg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = frame_msg_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (frame_msg_.IsDefault()) {
    frame_msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FrameVideoMessage::set_allocated_frame_msg(std::string* frame_msg) {
  if (frame_msg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  frame_msg_.SetAllocated(frame_msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (frame_msg_.IsDefault()) {
    frame_msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.FrameVideoMessage.frame_msg)
}

// optional uint32 frame_id = 2;
inline bool FrameVideoMessage::_internal_has_frame_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FrameVideoMessage::has_frame_id() const {
  return _internal_has_frame_id();
}
inline void FrameVideoMessage::clear_frame_id() {
  frame_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t FrameVideoMessage::_internal_frame_id() const {
  return frame_id_;
}
inline uint32_t FrameVideoMessage::frame_id() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.FrameVideoMessage.frame_id)
  return _internal_frame_id();
}
inline void FrameVideoMessage::_internal_set_frame_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  frame_id_ = value;
}
inline void FrameVideoMessage::set_frame_id(uint32_t value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.FrameVideoMessage.frame_id)
}

// optional uint32 frame_width = 3;
inline bool FrameVideoMessage::_internal_has_frame_width() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FrameVideoMessage::has_frame_width() const {
  return _internal_has_frame_width();
}
inline void FrameVideoMessage::clear_frame_width() {
  frame_width_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t FrameVideoMessage::_internal_frame_width() const {
  return frame_width_;
}
inline uint32_t FrameVideoMessage::frame_width() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.FrameVideoMessage.frame_width)
  return _internal_frame_width();
}
inline void FrameVideoMessage::_internal_set_frame_width(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  frame_width_ = value;
}
inline void FrameVideoMessage::set_frame_width(uint32_t value) {
  _internal_set_frame_width(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.FrameVideoMessage.frame_width)
}

// optional uint32 frame_height = 4;
inline bool FrameVideoMessage::_internal_has_frame_height() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FrameVideoMessage::has_frame_height() const {
  return _internal_has_frame_height();
}
inline void FrameVideoMessage::clear_frame_height() {
  frame_height_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t FrameVideoMessage::_internal_frame_height() const {
  return frame_height_;
}
inline uint32_t FrameVideoMessage::frame_height() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.FrameVideoMessage.frame_height)
  return _internal_frame_height();
}
inline void FrameVideoMessage::_internal_set_frame_height(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  frame_height_ = value;
}
inline void FrameVideoMessage::set_frame_height(uint32_t value) {
  _internal_set_frame_height(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.FrameVideoMessage.frame_height)
}

// optional uint64 frame_timestamp = 5;
inline bool FrameVideoMessage::_internal_has_frame_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FrameVideoMessage::has_frame_timestamp() const {
  return _internal_has_frame_timestamp();
}
inline void FrameVideoMessage::clear_frame_timestamp() {
  frame_timestamp_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t FrameVideoMessage::_internal_frame_timestamp() const {
  return frame_timestamp_;
}
inline uint64_t FrameVideoMessage::frame_timestamp() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.FrameVideoMessage.frame_timestamp)
  return _internal_frame_timestamp();
}
inline void FrameVideoMessage::_internal_set_frame_timestamp(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  frame_timestamp_ = value;
}
inline void FrameVideoMessage::set_frame_timestamp(uint64_t value) {
  _internal_set_frame_timestamp(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.FrameVideoMessage.frame_timestamp)
}

// optional uint32 frame_rotation = 6;
inline bool FrameVideoMessage::_internal_has_frame_rotation() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FrameVideoMessage::has_frame_rotation() const {
  return _internal_has_frame_rotation();
}
inline void FrameVideoMessage::clear_frame_rotation() {
  frame_rotation_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t FrameVideoMessage::_internal_frame_rotation() const {
  return frame_rotation_;
}
inline uint32_t FrameVideoMessage::frame_rotation() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.FrameVideoMessage.frame_rotation)
  return _internal_frame_rotation();
}
inline void FrameVideoMessage::_internal_set_frame_rotation(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  frame_rotation_ = value;
}
inline void FrameVideoMessage::set_frame_rotation(uint32_t value) {
  _internal_set_frame_rotation(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.FrameVideoMessage.frame_rotation)
}

// -------------------------------------------------------------------

// FrameAudioMessage

// optional string frame_msg = 1;
inline bool FrameAudioMessage::_internal_has_frame_msg() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FrameAudioMessage::has_frame_msg() const {
  return _internal_has_frame_msg();
}
inline void FrameAudioMessage::clear_frame_msg() {
  frame_msg_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FrameAudioMessage::frame_msg() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.FrameAudioMessage.frame_msg)
  return _internal_frame_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FrameAudioMessage::set_frame_msg(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 frame_msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flremoting.protocol.FrameAudioMessage.frame_msg)
}
inline std::string* FrameAudioMessage::mutable_frame_msg() {
  std::string* _s = _internal_mutable_frame_msg();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.FrameAudioMessage.frame_msg)
  return _s;
}
inline const std::string& FrameAudioMessage::_internal_frame_msg() const {
  return frame_msg_.Get();
}
inline void FrameAudioMessage::_internal_set_frame_msg(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  frame_msg_.Set(value, GetArenaForAllocation());
}
inline std::string* FrameAudioMessage::_internal_mutable_frame_msg() {
  _has_bits_[0] |= 0x00000001u;
  return frame_msg_.Mutable(GetArenaForAllocation());
}
inline std::string* FrameAudioMessage::release_frame_msg() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.FrameAudioMessage.frame_msg)
  if (!_internal_has_frame_msg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = frame_msg_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (frame_msg_.IsDefault()) {
    frame_msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FrameAudioMessage::set_allocated_frame_msg(std::string* frame_msg) {
  if (frame_msg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  frame_msg_.SetAllocated(frame_msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (frame_msg_.IsDefault()) {
    frame_msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.FrameAudioMessage.frame_msg)
}

// optional uint32 frame_id = 2;
inline bool FrameAudioMessage::_internal_has_frame_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FrameAudioMessage::has_frame_id() const {
  return _internal_has_frame_id();
}
inline void FrameAudioMessage::clear_frame_id() {
  frame_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t FrameAudioMessage::_internal_frame_id() const {
  return frame_id_;
}
inline uint32_t FrameAudioMessage::frame_id() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.FrameAudioMessage.frame_id)
  return _internal_frame_id();
}
inline void FrameAudioMessage::_internal_set_frame_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  frame_id_ = value;
}
inline void FrameAudioMessage::set_frame_id(uint32_t value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.FrameAudioMessage.frame_id)
}

// optional uint32 frame_rate = 3;
inline bool FrameAudioMessage::_internal_has_frame_rate() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FrameAudioMessage::has_frame_rate() const {
  return _internal_has_frame_rate();
}
inline void FrameAudioMessage::clear_frame_rate() {
  frame_rate_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t FrameAudioMessage::_internal_frame_rate() const {
  return frame_rate_;
}
inline uint32_t FrameAudioMessage::frame_rate() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.FrameAudioMessage.frame_rate)
  return _internal_frame_rate();
}
inline void FrameAudioMessage::_internal_set_frame_rate(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  frame_rate_ = value;
}
inline void FrameAudioMessage::set_frame_rate(uint32_t value) {
  _internal_set_frame_rate(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.FrameAudioMessage.frame_rate)
}

// optional uint32 frame_channel = 4;
inline bool FrameAudioMessage::_internal_has_frame_channel() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FrameAudioMessage::has_frame_channel() const {
  return _internal_has_frame_channel();
}
inline void FrameAudioMessage::clear_frame_channel() {
  frame_channel_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t FrameAudioMessage::_internal_frame_channel() const {
  return frame_channel_;
}
inline uint32_t FrameAudioMessage::frame_channel() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.FrameAudioMessage.frame_channel)
  return _internal_frame_channel();
}
inline void FrameAudioMessage::_internal_set_frame_channel(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  frame_channel_ = value;
}
inline void FrameAudioMessage::set_frame_channel(uint32_t value) {
  _internal_set_frame_channel(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.FrameAudioMessage.frame_channel)
}

// optional uint64 frame_timestamp = 5;
inline bool FrameAudioMessage::_internal_has_frame_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FrameAudioMessage::has_frame_timestamp() const {
  return _internal_has_frame_timestamp();
}
inline void FrameAudioMessage::clear_frame_timestamp() {
  frame_timestamp_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t FrameAudioMessage::_internal_frame_timestamp() const {
  return frame_timestamp_;
}
inline uint64_t FrameAudioMessage::frame_timestamp() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.FrameAudioMessage.frame_timestamp)
  return _internal_frame_timestamp();
}
inline void FrameAudioMessage::_internal_set_frame_timestamp(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  frame_timestamp_ = value;
}
inline void FrameAudioMessage::set_frame_timestamp(uint64_t value) {
  _internal_set_frame_timestamp(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.FrameAudioMessage.frame_timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace flremoting

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flframe_2eproto
