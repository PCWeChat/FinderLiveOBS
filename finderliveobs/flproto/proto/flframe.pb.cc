// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flframe.proto

#include "flframe.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace flremoting {
namespace protocol {
PROTOBUF_CONSTEXPR FrameVideoMessage::FrameVideoMessage(
    ::_pbi::ConstantInitialized)
  : frame_msg_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , frame_id_(0u)
  , frame_width_(0u)
  , frame_timestamp_(uint64_t{0u})
  , frame_height_(0u)
  , frame_rotation_(0u){}
struct FrameVideoMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameVideoMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameVideoMessageDefaultTypeInternal() {}
  union {
    FrameVideoMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameVideoMessageDefaultTypeInternal _FrameVideoMessage_default_instance_;
PROTOBUF_CONSTEXPR FrameAudioMessage::FrameAudioMessage(
    ::_pbi::ConstantInitialized)
  : frame_msg_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , frame_id_(0u)
  , frame_rate_(0u)
  , frame_timestamp_(uint64_t{0u})
  , frame_channel_(0u){}
struct FrameAudioMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameAudioMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameAudioMessageDefaultTypeInternal() {}
  union {
    FrameAudioMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameAudioMessageDefaultTypeInternal _FrameAudioMessage_default_instance_;
}  // namespace protocol
}  // namespace flremoting
namespace flremoting {
namespace protocol {

// ===================================================================

class FrameVideoMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameVideoMessage>()._has_bits_);
  static void set_has_frame_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_frame_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_frame_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_frame_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_frame_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

FrameVideoMessage::FrameVideoMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flremoting.protocol.FrameVideoMessage)
}
FrameVideoMessage::FrameVideoMessage(const FrameVideoMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  frame_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    frame_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_frame_msg()) {
    frame_msg_.Set(from._internal_frame_msg(), 
      GetArenaForAllocation());
  }
  ::memcpy(&frame_id_, &from.frame_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_rotation_) -
    reinterpret_cast<char*>(&frame_id_)) + sizeof(frame_rotation_));
  // @@protoc_insertion_point(copy_constructor:flremoting.protocol.FrameVideoMessage)
}

inline void FrameVideoMessage::SharedCtor() {
frame_msg_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  frame_msg_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&frame_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&frame_rotation_) -
    reinterpret_cast<char*>(&frame_id_)) + sizeof(frame_rotation_));
}

FrameVideoMessage::~FrameVideoMessage() {
  // @@protoc_insertion_point(destructor:flremoting.protocol.FrameVideoMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FrameVideoMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  frame_msg_.Destroy();
}

void FrameVideoMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FrameVideoMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:flremoting.protocol.FrameVideoMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    frame_msg_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&frame_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&frame_rotation_) -
        reinterpret_cast<char*>(&frame_id_)) + sizeof(frame_rotation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FrameVideoMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string frame_msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_frame_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 frame_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_frame_id(&has_bits);
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 frame_width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_frame_width(&has_bits);
          frame_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 frame_height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_frame_height(&has_bits);
          frame_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 frame_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_frame_timestamp(&has_bits);
          frame_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 frame_rotation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_frame_rotation(&has_bits);
          frame_rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FrameVideoMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flremoting.protocol.FrameVideoMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string frame_msg = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_frame_msg(), target);
  }

  // optional uint32 frame_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_frame_id(), target);
  }

  // optional uint32 frame_width = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_frame_width(), target);
  }

  // optional uint32 frame_height = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_frame_height(), target);
  }

  // optional uint64 frame_timestamp = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_frame_timestamp(), target);
  }

  // optional uint32 frame_rotation = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_frame_rotation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flremoting.protocol.FrameVideoMessage)
  return target;
}

size_t FrameVideoMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flremoting.protocol.FrameVideoMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string frame_msg = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_frame_msg());
    }

    // optional uint32 frame_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frame_id());
    }

    // optional uint32 frame_width = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frame_width());
    }

    // optional uint64 frame_timestamp = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_frame_timestamp());
    }

    // optional uint32 frame_height = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frame_height());
    }

    // optional uint32 frame_rotation = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frame_rotation());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameVideoMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FrameVideoMessage*>(
      &from));
}

void FrameVideoMessage::MergeFrom(const FrameVideoMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flremoting.protocol.FrameVideoMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_frame_msg(from._internal_frame_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      frame_id_ = from.frame_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      frame_width_ = from.frame_width_;
    }
    if (cached_has_bits & 0x00000008u) {
      frame_timestamp_ = from.frame_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      frame_height_ = from.frame_height_;
    }
    if (cached_has_bits & 0x00000020u) {
      frame_rotation_ = from.frame_rotation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FrameVideoMessage::CopyFrom(const FrameVideoMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flremoting.protocol.FrameVideoMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameVideoMessage::IsInitialized() const {
  return true;
}

void FrameVideoMessage::InternalSwap(FrameVideoMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &frame_msg_, lhs_arena,
      &other->frame_msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameVideoMessage, frame_rotation_)
      + sizeof(FrameVideoMessage::frame_rotation_)
      - PROTOBUF_FIELD_OFFSET(FrameVideoMessage, frame_id_)>(
          reinterpret_cast<char*>(&frame_id_),
          reinterpret_cast<char*>(&other->frame_id_));
}

std::string FrameVideoMessage::GetTypeName() const {
  return "flremoting.protocol.FrameVideoMessage";
}


// ===================================================================

class FrameAudioMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameAudioMessage>()._has_bits_);
  static void set_has_frame_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_frame_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_frame_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_frame_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

FrameAudioMessage::FrameAudioMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flremoting.protocol.FrameAudioMessage)
}
FrameAudioMessage::FrameAudioMessage(const FrameAudioMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  frame_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    frame_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_frame_msg()) {
    frame_msg_.Set(from._internal_frame_msg(), 
      GetArenaForAllocation());
  }
  ::memcpy(&frame_id_, &from.frame_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_channel_) -
    reinterpret_cast<char*>(&frame_id_)) + sizeof(frame_channel_));
  // @@protoc_insertion_point(copy_constructor:flremoting.protocol.FrameAudioMessage)
}

inline void FrameAudioMessage::SharedCtor() {
frame_msg_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  frame_msg_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&frame_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&frame_channel_) -
    reinterpret_cast<char*>(&frame_id_)) + sizeof(frame_channel_));
}

FrameAudioMessage::~FrameAudioMessage() {
  // @@protoc_insertion_point(destructor:flremoting.protocol.FrameAudioMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FrameAudioMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  frame_msg_.Destroy();
}

void FrameAudioMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FrameAudioMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:flremoting.protocol.FrameAudioMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    frame_msg_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&frame_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&frame_channel_) -
        reinterpret_cast<char*>(&frame_id_)) + sizeof(frame_channel_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FrameAudioMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string frame_msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_frame_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 frame_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_frame_id(&has_bits);
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 frame_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_frame_rate(&has_bits);
          frame_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 frame_channel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_frame_channel(&has_bits);
          frame_channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 frame_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_frame_timestamp(&has_bits);
          frame_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FrameAudioMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flremoting.protocol.FrameAudioMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string frame_msg = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_frame_msg(), target);
  }

  // optional uint32 frame_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_frame_id(), target);
  }

  // optional uint32 frame_rate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_frame_rate(), target);
  }

  // optional uint32 frame_channel = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_frame_channel(), target);
  }

  // optional uint64 frame_timestamp = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_frame_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flremoting.protocol.FrameAudioMessage)
  return target;
}

size_t FrameAudioMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flremoting.protocol.FrameAudioMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string frame_msg = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_frame_msg());
    }

    // optional uint32 frame_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frame_id());
    }

    // optional uint32 frame_rate = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frame_rate());
    }

    // optional uint64 frame_timestamp = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_frame_timestamp());
    }

    // optional uint32 frame_channel = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frame_channel());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameAudioMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FrameAudioMessage*>(
      &from));
}

void FrameAudioMessage::MergeFrom(const FrameAudioMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flremoting.protocol.FrameAudioMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_frame_msg(from._internal_frame_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      frame_id_ = from.frame_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      frame_rate_ = from.frame_rate_;
    }
    if (cached_has_bits & 0x00000008u) {
      frame_timestamp_ = from.frame_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      frame_channel_ = from.frame_channel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FrameAudioMessage::CopyFrom(const FrameAudioMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flremoting.protocol.FrameAudioMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameAudioMessage::IsInitialized() const {
  return true;
}

void FrameAudioMessage::InternalSwap(FrameAudioMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &frame_msg_, lhs_arena,
      &other->frame_msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameAudioMessage, frame_channel_)
      + sizeof(FrameAudioMessage::frame_channel_)
      - PROTOBUF_FIELD_OFFSET(FrameAudioMessage, frame_id_)>(
          reinterpret_cast<char*>(&frame_id_),
          reinterpret_cast<char*>(&other->frame_id_));
}

std::string FrameAudioMessage::GetTypeName() const {
  return "flremoting.protocol.FrameAudioMessage";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace flremoting
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flremoting::protocol::FrameVideoMessage*
Arena::CreateMaybeMessage< ::flremoting::protocol::FrameVideoMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flremoting::protocol::FrameVideoMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::flremoting::protocol::FrameAudioMessage*
Arena::CreateMaybeMessage< ::flremoting::protocol::FrameAudioMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flremoting::protocol::FrameAudioMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
