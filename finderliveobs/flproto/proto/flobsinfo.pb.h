// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flobsinfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flobsinfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flobsinfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "flcomm.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flobsinfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flobsinfo_2eproto {
  static const uint32_t offsets[];
};
namespace flremoting {
namespace protocol {
class InputVolumeData;
struct InputVolumeDataDefaultTypeInternal;
extern InputVolumeDataDefaultTypeInternal _InputVolumeData_default_instance_;
class ObsCameraSourceData;
struct ObsCameraSourceDataDefaultTypeInternal;
extern ObsCameraSourceDataDefaultTypeInternal _ObsCameraSourceData_default_instance_;
class ObsCaptureSourceData;
struct ObsCaptureSourceDataDefaultTypeInternal;
extern ObsCaptureSourceDataDefaultTypeInternal _ObsCaptureSourceData_default_instance_;
class ObsCaptureSourceGameInfo;
struct ObsCaptureSourceGameInfoDefaultTypeInternal;
extern ObsCaptureSourceGameInfoDefaultTypeInternal _ObsCaptureSourceGameInfo_default_instance_;
class ObsCaptureSourceMonitorInfo;
struct ObsCaptureSourceMonitorInfoDefaultTypeInternal;
extern ObsCaptureSourceMonitorInfoDefaultTypeInternal _ObsCaptureSourceMonitorInfo_default_instance_;
class ObsCaptureSourceWindowInfo;
struct ObsCaptureSourceWindowInfoDefaultTypeInternal;
extern ObsCaptureSourceWindowInfoDefaultTypeInternal _ObsCaptureSourceWindowInfo_default_instance_;
class ObsCursorMessage;
struct ObsCursorMessageDefaultTypeInternal;
extern ObsCursorMessageDefaultTypeInternal _ObsCursorMessage_default_instance_;
class ObsDeviceEditMessageRequest;
struct ObsDeviceEditMessageRequestDefaultTypeInternal;
extern ObsDeviceEditMessageRequestDefaultTypeInternal _ObsDeviceEditMessageRequest_default_instance_;
class ObsDeviceInfo;
struct ObsDeviceInfoDefaultTypeInternal;
extern ObsDeviceInfoDefaultTypeInternal _ObsDeviceInfo_default_instance_;
class ObsDeviceMessage;
struct ObsDeviceMessageDefaultTypeInternal;
extern ObsDeviceMessageDefaultTypeInternal _ObsDeviceMessage_default_instance_;
class ObsFPSInfoMessage;
struct ObsFPSInfoMessageDefaultTypeInternal;
extern ObsFPSInfoMessageDefaultTypeInternal _ObsFPSInfoMessage_default_instance_;
class ObsImageSourceData;
struct ObsImageSourceDataDefaultTypeInternal;
extern ObsImageSourceDataDefaultTypeInternal _ObsImageSourceData_default_instance_;
class ObsItemEditMessage;
struct ObsItemEditMessageDefaultTypeInternal;
extern ObsItemEditMessageDefaultTypeInternal _ObsItemEditMessage_default_instance_;
class ObsItemEditMessageReq;
struct ObsItemEditMessageReqDefaultTypeInternal;
extern ObsItemEditMessageReqDefaultTypeInternal _ObsItemEditMessageReq_default_instance_;
class ObsItemEditMessageResp;
struct ObsItemEditMessageRespDefaultTypeInternal;
extern ObsItemEditMessageRespDefaultTypeInternal _ObsItemEditMessageResp_default_instance_;
class ObsItemMessage;
struct ObsItemMessageDefaultTypeInternal;
extern ObsItemMessageDefaultTypeInternal _ObsItemMessage_default_instance_;
class ObsMeanRateInfoMessage;
struct ObsMeanRateInfoMessageDefaultTypeInternal;
extern ObsMeanRateInfoMessageDefaultTypeInternal _ObsMeanRateInfoMessage_default_instance_;
class ObsPhoneCastingSourceData;
struct ObsPhoneCastingSourceDataDefaultTypeInternal;
extern ObsPhoneCastingSourceDataDefaultTypeInternal _ObsPhoneCastingSourceData_default_instance_;
class ObsPropertiesData;
struct ObsPropertiesDataDefaultTypeInternal;
extern ObsPropertiesDataDefaultTypeInternal _ObsPropertiesData_default_instance_;
class ObsPropertiesInfo;
struct ObsPropertiesInfoDefaultTypeInternal;
extern ObsPropertiesInfoDefaultTypeInternal _ObsPropertiesInfo_default_instance_;
class ObsPropertyDoubleInfo;
struct ObsPropertyDoubleInfoDefaultTypeInternal;
extern ObsPropertyDoubleInfoDefaultTypeInternal _ObsPropertyDoubleInfo_default_instance_;
class ObsPropertyInt64Info;
struct ObsPropertyInt64InfoDefaultTypeInternal;
extern ObsPropertyInt64InfoDefaultTypeInternal _ObsPropertyInt64Info_default_instance_;
class ObsPropertyStringInfo;
struct ObsPropertyStringInfoDefaultTypeInternal;
extern ObsPropertyStringInfoDefaultTypeInternal _ObsPropertyStringInfo_default_instance_;
class ObsSceneItemInfoData;
struct ObsSceneItemInfoDataDefaultTypeInternal;
extern ObsSceneItemInfoDataDefaultTypeInternal _ObsSceneItemInfoData_default_instance_;
class ObsSceneItemInfoMessage;
struct ObsSceneItemInfoMessageDefaultTypeInternal;
extern ObsSceneItemInfoMessageDefaultTypeInternal _ObsSceneItemInfoMessage_default_instance_;
class ObsSourceFrame2Message;
struct ObsSourceFrame2MessageDefaultTypeInternal;
extern ObsSourceFrame2MessageDefaultTypeInternal _ObsSourceFrame2Message_default_instance_;
class ObsTextSourceData;
struct ObsTextSourceDataDefaultTypeInternal;
extern ObsTextSourceDataDefaultTypeInternal _ObsTextSourceData_default_instance_;
class ObsVideoSourceData;
struct ObsVideoSourceDataDefaultTypeInternal;
extern ObsVideoSourceDataDefaultTypeInternal _ObsVideoSourceData_default_instance_;
class OutputVolumeData;
struct OutputVolumeDataDefaultTypeInternal;
extern OutputVolumeDataDefaultTypeInternal _OutputVolumeData_default_instance_;
}  // namespace protocol
}  // namespace flremoting
PROTOBUF_NAMESPACE_OPEN
template<> ::flremoting::protocol::InputVolumeData* Arena::CreateMaybeMessage<::flremoting::protocol::InputVolumeData>(Arena*);
template<> ::flremoting::protocol::ObsCameraSourceData* Arena::CreateMaybeMessage<::flremoting::protocol::ObsCameraSourceData>(Arena*);
template<> ::flremoting::protocol::ObsCaptureSourceData* Arena::CreateMaybeMessage<::flremoting::protocol::ObsCaptureSourceData>(Arena*);
template<> ::flremoting::protocol::ObsCaptureSourceGameInfo* Arena::CreateMaybeMessage<::flremoting::protocol::ObsCaptureSourceGameInfo>(Arena*);
template<> ::flremoting::protocol::ObsCaptureSourceMonitorInfo* Arena::CreateMaybeMessage<::flremoting::protocol::ObsCaptureSourceMonitorInfo>(Arena*);
template<> ::flremoting::protocol::ObsCaptureSourceWindowInfo* Arena::CreateMaybeMessage<::flremoting::protocol::ObsCaptureSourceWindowInfo>(Arena*);
template<> ::flremoting::protocol::ObsCursorMessage* Arena::CreateMaybeMessage<::flremoting::protocol::ObsCursorMessage>(Arena*);
template<> ::flremoting::protocol::ObsDeviceEditMessageRequest* Arena::CreateMaybeMessage<::flremoting::protocol::ObsDeviceEditMessageRequest>(Arena*);
template<> ::flremoting::protocol::ObsDeviceInfo* Arena::CreateMaybeMessage<::flremoting::protocol::ObsDeviceInfo>(Arena*);
template<> ::flremoting::protocol::ObsDeviceMessage* Arena::CreateMaybeMessage<::flremoting::protocol::ObsDeviceMessage>(Arena*);
template<> ::flremoting::protocol::ObsFPSInfoMessage* Arena::CreateMaybeMessage<::flremoting::protocol::ObsFPSInfoMessage>(Arena*);
template<> ::flremoting::protocol::ObsImageSourceData* Arena::CreateMaybeMessage<::flremoting::protocol::ObsImageSourceData>(Arena*);
template<> ::flremoting::protocol::ObsItemEditMessage* Arena::CreateMaybeMessage<::flremoting::protocol::ObsItemEditMessage>(Arena*);
template<> ::flremoting::protocol::ObsItemEditMessageReq* Arena::CreateMaybeMessage<::flremoting::protocol::ObsItemEditMessageReq>(Arena*);
template<> ::flremoting::protocol::ObsItemEditMessageResp* Arena::CreateMaybeMessage<::flremoting::protocol::ObsItemEditMessageResp>(Arena*);
template<> ::flremoting::protocol::ObsItemMessage* Arena::CreateMaybeMessage<::flremoting::protocol::ObsItemMessage>(Arena*);
template<> ::flremoting::protocol::ObsMeanRateInfoMessage* Arena::CreateMaybeMessage<::flremoting::protocol::ObsMeanRateInfoMessage>(Arena*);
template<> ::flremoting::protocol::ObsPhoneCastingSourceData* Arena::CreateMaybeMessage<::flremoting::protocol::ObsPhoneCastingSourceData>(Arena*);
template<> ::flremoting::protocol::ObsPropertiesData* Arena::CreateMaybeMessage<::flremoting::protocol::ObsPropertiesData>(Arena*);
template<> ::flremoting::protocol::ObsPropertiesInfo* Arena::CreateMaybeMessage<::flremoting::protocol::ObsPropertiesInfo>(Arena*);
template<> ::flremoting::protocol::ObsPropertyDoubleInfo* Arena::CreateMaybeMessage<::flremoting::protocol::ObsPropertyDoubleInfo>(Arena*);
template<> ::flremoting::protocol::ObsPropertyInt64Info* Arena::CreateMaybeMessage<::flremoting::protocol::ObsPropertyInt64Info>(Arena*);
template<> ::flremoting::protocol::ObsPropertyStringInfo* Arena::CreateMaybeMessage<::flremoting::protocol::ObsPropertyStringInfo>(Arena*);
template<> ::flremoting::protocol::ObsSceneItemInfoData* Arena::CreateMaybeMessage<::flremoting::protocol::ObsSceneItemInfoData>(Arena*);
template<> ::flremoting::protocol::ObsSceneItemInfoMessage* Arena::CreateMaybeMessage<::flremoting::protocol::ObsSceneItemInfoMessage>(Arena*);
template<> ::flremoting::protocol::ObsSourceFrame2Message* Arena::CreateMaybeMessage<::flremoting::protocol::ObsSourceFrame2Message>(Arena*);
template<> ::flremoting::protocol::ObsTextSourceData* Arena::CreateMaybeMessage<::flremoting::protocol::ObsTextSourceData>(Arena*);
template<> ::flremoting::protocol::ObsVideoSourceData* Arena::CreateMaybeMessage<::flremoting::protocol::ObsVideoSourceData>(Arena*);
template<> ::flremoting::protocol::OutputVolumeData* Arena::CreateMaybeMessage<::flremoting::protocol::OutputVolumeData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flremoting {
namespace protocol {

enum ObsPropertyType : int {
  OBS_PROPERTY_INVALID = 0,
  OBS_PROPERTY_BOOL = 1,
  OBS_PROPERTY_INT = 2,
  OBS_PROPERTY_FLOAT = 3,
  OBS_PROPERTY_TEXT = 4,
  OBS_PROPERTY_PATH = 5,
  OBS_PROPERTY_LIST = 6,
  OBS_PROPERTY_COLOR = 7,
  OBS_PROPERTY_BUTTON = 8,
  OBS_PROPERTY_FONT = 9,
  OBS_PROPERTY_EDITABLE_LIST = 10,
  OBS_PROPERTY_FRAME_RATE = 11,
  OBS_PROPERTY_GROUP = 12,
  OBS_PROPERTY_COLOR_ALPHA = 13
};
bool ObsPropertyType_IsValid(int value);
constexpr ObsPropertyType ObsPropertyType_MIN = OBS_PROPERTY_INVALID;
constexpr ObsPropertyType ObsPropertyType_MAX = OBS_PROPERTY_COLOR_ALPHA;
constexpr int ObsPropertyType_ARRAYSIZE = ObsPropertyType_MAX + 1;

const std::string& ObsPropertyType_Name(ObsPropertyType value);
template<typename T>
inline const std::string& ObsPropertyType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObsPropertyType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObsPropertyType_Name.");
  return ObsPropertyType_Name(static_cast<ObsPropertyType>(enum_t_value));
}
bool ObsPropertyType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ObsPropertyType* value);
enum ObsItemActionType : int {
  OBS_ITEMACTION_REMOVE = 0,
  OBS_ITEMACTION_UP = 1,
  OBS_ITEMACTION_DOWN = 2,
  OBS_ITEMACTION_TOP = 3,
  OBS_ITEMACTION_BOTTOM = 4,
  OBS_ITEMACTION_SHOW = 5,
  OBS_ITEMACTION_HIDE = 6,
  OBS_ITEMACTION_RESET = 7,
  OBS_ITEMACTION_FULL = 8,
  OBS_ITEMACTION_FULLNON = 9,
  OBS_ITEMACTION_ROT = 10,
  OBS_ITEMACTION_ANTI_ROT = 11,
  OBS_ITEMACTION_SELECT = 12,
  OBS_ITEMACTION_HOR_FLIP = 13,
  OBS_ITEMACTION_VER_FLIP = 14,
  OBS_ITEMACTION_RENAME = 15,
  OBS_ITEMACTION_LOCK = 16,
  OBS_ITEMACTION_UNLOCK = 17,
  OBS_ITEMACTION_POSITION = 18
};
bool ObsItemActionType_IsValid(int value);
constexpr ObsItemActionType ObsItemActionType_MIN = OBS_ITEMACTION_REMOVE;
constexpr ObsItemActionType ObsItemActionType_MAX = OBS_ITEMACTION_POSITION;
constexpr int ObsItemActionType_ARRAYSIZE = ObsItemActionType_MAX + 1;

const std::string& ObsItemActionType_Name(ObsItemActionType value);
template<typename T>
inline const std::string& ObsItemActionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObsItemActionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObsItemActionType_Name.");
  return ObsItemActionType_Name(static_cast<ObsItemActionType>(enum_t_value));
}
bool ObsItemActionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ObsItemActionType* value);
enum ObsDeviceType : int {
  OBS_DEVICE_INPUT_MIC = 0,
  OBS_DEVICE_OUTPUT_SPEAKER = 1
};
bool ObsDeviceType_IsValid(int value);
constexpr ObsDeviceType ObsDeviceType_MIN = OBS_DEVICE_INPUT_MIC;
constexpr ObsDeviceType ObsDeviceType_MAX = OBS_DEVICE_OUTPUT_SPEAKER;
constexpr int ObsDeviceType_ARRAYSIZE = ObsDeviceType_MAX + 1;

const std::string& ObsDeviceType_Name(ObsDeviceType value);
template<typename T>
inline const std::string& ObsDeviceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObsDeviceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObsDeviceType_Name.");
  return ObsDeviceType_Name(static_cast<ObsDeviceType>(enum_t_value));
}
bool ObsDeviceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ObsDeviceType* value);
enum ObsDeviceActionType : int {
  OBS_DEVICEACTION_INPUT_ID = 0,
  OBS_DEVICEACTION_OUTPUT_ID = 1,
  OBS_DEVICEACTION_INPUT_GAIN = 2,
  OBS_DEVICEACTION_INPUT_NOISE = 3,
  OBS_DEVICEACTION_OUTPUT_GAIN = 4,
  OBS_DEVICEACTION_INPUT_MT = 5
};
bool ObsDeviceActionType_IsValid(int value);
constexpr ObsDeviceActionType ObsDeviceActionType_MIN = OBS_DEVICEACTION_INPUT_ID;
constexpr ObsDeviceActionType ObsDeviceActionType_MAX = OBS_DEVICEACTION_INPUT_MT;
constexpr int ObsDeviceActionType_ARRAYSIZE = ObsDeviceActionType_MAX + 1;

const std::string& ObsDeviceActionType_Name(ObsDeviceActionType value);
template<typename T>
inline const std::string& ObsDeviceActionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObsDeviceActionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObsDeviceActionType_Name.");
  return ObsDeviceActionType_Name(static_cast<ObsDeviceActionType>(enum_t_value));
}
bool ObsDeviceActionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ObsDeviceActionType* value);
// ===================================================================

class ObsPropertyDoubleInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:flremoting.protocol.ObsPropertyDoubleInfo) */ {
 public:
  inline ObsPropertyDoubleInfo() : ObsPropertyDoubleInfo(nullptr) {}
  ~ObsPropertyDoubleInfo() override;
  explicit PROTOBUF_CONSTEXPR ObsPropertyDoubleInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObsPropertyDoubleInfo(const ObsPropertyDoubleInfo& from);
  ObsPropertyDoubleInfo(ObsPropertyDoubleInfo&& from) noexcept
    : ObsPropertyDoubleInfo() {
    *this = ::std::move(from);
  }

  inline ObsPropertyDoubleInfo& operator=(const ObsPropertyDoubleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObsPropertyDoubleInfo& operator=(ObsPropertyDoubleInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ObsPropertyDoubleInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObsPropertyDoubleInfo* internal_default_instance() {
    return reinterpret_cast<const ObsPropertyDoubleInfo*>(
               &_ObsPropertyDoubleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ObsPropertyDoubleInfo& a, ObsPropertyDoubleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ObsPropertyDoubleInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObsPropertyDoubleInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObsPropertyDoubleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObsPropertyDoubleInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ObsPropertyDoubleInfo& from);
  void MergeFrom(const ObsPropertyDoubleInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObsPropertyDoubleInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flremoting.protocol.ObsPropertyDoubleInfo";
  }
  protected:
  explicit ObsPropertyDoubleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional double value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:flremoting.protocol.ObsPropertyDoubleInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  double value_;
  friend struct ::TableStruct_flobsinfo_2eproto;
};
// -------------------------------------------------------------------

class ObsPropertyInt64Info final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:flremoting.protocol.ObsPropertyInt64Info) */ {
 public:
  inline ObsPropertyInt64Info() : ObsPropertyInt64Info(nullptr) {}
  ~ObsPropertyInt64Info() override;
  explicit PROTOBUF_CONSTEXPR ObsPropertyInt64Info(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObsPropertyInt64Info(const ObsPropertyInt64Info& from);
  ObsPropertyInt64Info(ObsPropertyInt64Info&& from) noexcept
    : ObsPropertyInt64Info() {
    *this = ::std::move(from);
  }

  inline ObsPropertyInt64Info& operator=(const ObsPropertyInt64Info& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObsPropertyInt64Info& operator=(ObsPropertyInt64Info&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ObsPropertyInt64Info& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObsPropertyInt64Info* internal_default_instance() {
    return reinterpret_cast<const ObsPropertyInt64Info*>(
               &_ObsPropertyInt64Info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ObsPropertyInt64Info& a, ObsPropertyInt64Info& b) {
    a.Swap(&b);
  }
  inline void Swap(ObsPropertyInt64Info* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObsPropertyInt64Info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObsPropertyInt64Info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObsPropertyInt64Info>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ObsPropertyInt64Info& from);
  void MergeFrom(const ObsPropertyInt64Info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObsPropertyInt64Info* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flremoting.protocol.ObsPropertyInt64Info";
  }
  protected:
  explicit ObsPropertyInt64Info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional int64 value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  int64_t value() const;
  void set_value(int64_t value);
  private:
  int64_t _internal_value() const;
  void _internal_set_value(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:flremoting.protocol.ObsPropertyInt64Info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int64_t value_;
  friend struct ::TableStruct_flobsinfo_2eproto;
};
// -------------------------------------------------------------------

class ObsPropertyStringInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:flremoting.protocol.ObsPropertyStringInfo) */ {
 public:
  inline ObsPropertyStringInfo() : ObsPropertyStringInfo(nullptr) {}
  ~ObsPropertyStringInfo() override;
  explicit PROTOBUF_CONSTEXPR ObsPropertyStringInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObsPropertyStringInfo(const ObsPropertyStringInfo& from);
  ObsPropertyStringInfo(ObsPropertyStringInfo&& from) noexcept
    : ObsPropertyStringInfo() {
    *this = ::std::move(from);
  }

  inline ObsPropertyStringInfo& operator=(const ObsPropertyStringInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObsPropertyStringInfo& operator=(ObsPropertyStringInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ObsPropertyStringInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObsPropertyStringInfo* internal_default_instance() {
    return reinterpret_cast<const ObsPropertyStringInfo*>(
               &_ObsPropertyStringInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ObsPropertyStringInfo& a, ObsPropertyStringInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ObsPropertyStringInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObsPropertyStringInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObsPropertyStringInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObsPropertyStringInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ObsPropertyStringInfo& from);
  void MergeFrom(const ObsPropertyStringInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObsPropertyStringInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flremoting.protocol.ObsPropertyStringInfo";
  }
  protected:
  explicit ObsPropertyStringInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:flremoting.protocol.ObsPropertyStringInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_flobsinfo_2eproto;
};
// -------------------------------------------------------------------

class ObsPropertiesInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:flremoting.protocol.ObsPropertiesInfo) */ {
 public:
  inline ObsPropertiesInfo() : ObsPropertiesInfo(nullptr) {}
  ~ObsPropertiesInfo() override;
  explicit PROTOBUF_CONSTEXPR ObsPropertiesInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObsPropertiesInfo(const ObsPropertiesInfo& from);
  ObsPropertiesInfo(ObsPropertiesInfo&& from) noexcept
    : ObsPropertiesInfo() {
    *this = ::std::move(from);
  }

  inline ObsPropertiesInfo& operator=(const ObsPropertiesInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObsPropertiesInfo& operator=(ObsPropertiesInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ObsPropertiesInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObsPropertiesInfo* internal_default_instance() {
    return reinterpret_cast<const ObsPropertiesInfo*>(
               &_ObsPropertiesInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ObsPropertiesInfo& a, ObsPropertiesInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ObsPropertiesInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObsPropertiesInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObsPropertiesInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObsPropertiesInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ObsPropertiesInfo& from);
  void MergeFrom(const ObsPropertiesInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObsPropertiesInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flremoting.protocol.ObsPropertiesInfo";
  }
  protected:
  explicit ObsPropertiesInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoDoubleValuesFieldNumber = 7,
    kInfoInt64ValuesFieldNumber = 8,
    kInfoStringValuesFieldNumber = 9,
    kInfoNameFieldNumber = 1,
    kInfoStringValueFieldNumber = 6,
    kInfoTypeFieldNumber = 2,
    kInfoBoolValueFieldNumber = 3,
    kInfoDoubleValueFieldNumber = 5,
    kInfoIntValueFieldNumber = 4,
  };
  // repeated .flremoting.protocol.ObsPropertyDoubleInfo info_double_values = 7;
  int info_double_values_size() const;
  private:
  int _internal_info_double_values_size() const;
  public:
  void clear_info_double_values();
  ::flremoting::protocol::ObsPropertyDoubleInfo* mutable_info_double_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flremoting::protocol::ObsPropertyDoubleInfo >*
      mutable_info_double_values();
  private:
  const ::flremoting::protocol::ObsPropertyDoubleInfo& _internal_info_double_values(int index) const;
  ::flremoting::protocol::ObsPropertyDoubleInfo* _internal_add_info_double_values();
  public:
  const ::flremoting::protocol::ObsPropertyDoubleInfo& info_double_values(int index) const;
  ::flremoting::protocol::ObsPropertyDoubleInfo* add_info_double_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flremoting::protocol::ObsPropertyDoubleInfo >&
      info_double_values() const;

  // repeated .flremoting.protocol.ObsPropertyInt64Info info_int64_values = 8;
  int info_int64_values_size() const;
  private:
  int _internal_info_int64_values_size() const;
  public:
  void clear_info_int64_values();
  ::flremoting::protocol::ObsPropertyInt64Info* mutable_info_int64_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flremoting::protocol::ObsPropertyInt64Info >*
      mutable_info_int64_values();
  private:
  const ::flremoting::protocol::ObsPropertyInt64Info& _internal_info_int64_values(int index) const;
  ::flremoting::protocol::ObsPropertyInt64Info* _internal_add_info_int64_values();
  public:
  const ::flremoting::protocol::ObsPropertyInt64Info& info_int64_values(int index) const;
  ::flremoting::protocol::ObsPropertyInt64Info* add_info_int64_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flremoting::protocol::ObsPropertyInt64Info >&
      info_int64_values() const;

  // repeated .flremoting.protocol.ObsPropertyStringInfo info_string_values = 9;
  int info_string_values_size() const;
  private:
  int _internal_info_string_values_size() const;
  public:
  void clear_info_string_values();
  ::flremoting::protocol::ObsPropertyStringInfo* mutable_info_string_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flremoting::protocol::ObsPropertyStringInfo >*
      mutable_info_string_values();
  private:
  const ::flremoting::protocol::ObsPropertyStringInfo& _internal_info_string_values(int index) const;
  ::flremoting::protocol::ObsPropertyStringInfo* _internal_add_info_string_values();
  public:
  const ::flremoting::protocol::ObsPropertyStringInfo& info_string_values(int index) const;
  ::flremoting::protocol::ObsPropertyStringInfo* add_info_string_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flremoting::protocol::ObsPropertyStringInfo >&
      info_string_values() const;

  // optional string info_name = 1;
  bool has_info_name() const;
  private:
  bool _internal_has_info_name() const;
  public:
  void clear_info_name();
  const std::string& info_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_info_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_info_name();
  PROTOBUF_NODISCARD std::string* release_info_name();
  void set_allocated_info_name(std::string* info_name);
  private:
  const std::string& _internal_info_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_info_name(const std::string& value);
  std::string* _internal_mutable_info_name();
  public:

  // optional string info_string_value = 6;
  bool has_info_string_value() const;
  private:
  bool _internal_has_info_string_value() const;
  public:
  void clear_info_string_value();
  const std::string& info_string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_info_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_info_string_value();
  PROTOBUF_NODISCARD std::string* release_info_string_value();
  void set_allocated_info_string_value(std::string* info_string_value);
  private:
  const std::string& _internal_info_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_info_string_value(const std::string& value);
  std::string* _internal_mutable_info_string_value();
  public:

  // optional .flremoting.protocol.ObsPropertyType info_type = 2;
  bool has_info_type() const;
  private:
  bool _internal_has_info_type() const;
  public:
  void clear_info_type();
  ::flremoting::protocol::ObsPropertyType info_type() const;
  void set_info_type(::flremoting::protocol::ObsPropertyType value);
  private:
  ::flremoting::protocol::ObsPropertyType _internal_info_type() const;
  void _internal_set_info_type(::flremoting::protocol::ObsPropertyType value);
  public:

  // optional bool info_bool_value = 3;
  bool has_info_bool_value() const;
  private:
  bool _internal_has_info_bool_value() const;
  public:
  void clear_info_bool_value();
  bool info_bool_value() const;
  void set_info_bool_value(bool value);
  private:
  bool _internal_info_bool_value() const;
  void _internal_set_info_bool_value(bool value);
  public:

  // optional double info_double_value = 5;
  bool has_info_double_value() const;
  private:
  bool _internal_has_info_double_value() const;
  public:
  void clear_info_double_value();
  double info_double_value() const;
  void set_info_double_value(double value);
  private:
  double _internal_info_double_value() const;
  void _internal_set_info_double_value(double value);
  public:

  // optional int32 info_int_value = 4;
  bool has_info_int_value() const;
  private:
  bool _internal_has_info_int_value() const;
  public:
  void clear_info_int_value();
  int32_t info_int_value() const;
  void set_info_int_value(int32_t value);
  private:
  int32_t _internal_info_int_value() const;
  void _internal_set_info_int_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:flremoting.protocol.ObsPropertiesInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flremoting::protocol::ObsPropertyDoubleInfo > info_double_values_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flremoting::protocol::ObsPropertyInt64Info > info_int64_values_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flremoting::protocol::ObsPropertyStringInfo > info_string_values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_string_value_;
  int info_type_;
  bool info_bool_value_;
  double info_double_value_;
  int32_t info_int_value_;
  friend struct ::TableStruct_flobsinfo_2eproto;
};
// -------------------------------------------------------------------

class ObsPropertiesData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:flremoting.protocol.ObsPropertiesData) */ {
 public:
  inline ObsPropertiesData() : ObsPropertiesData(nullptr) {}
  ~ObsPropertiesData() override;
  explicit PROTOBUF_CONSTEXPR ObsPropertiesData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObsPropertiesData(const ObsPropertiesData& from);
  ObsPropertiesData(ObsPropertiesData&& from) noexcept
    : ObsPropertiesData() {
    *this = ::std::move(from);
  }

  inline ObsPropertiesData& operator=(const ObsPropertiesData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObsPropertiesData& operator=(ObsPropertiesData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ObsPropertiesData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObsPropertiesData* internal_default_instance() {
    return reinterpret_cast<const ObsPropertiesData*>(
               &_ObsPropertiesData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ObsPropertiesData& a, ObsPropertiesData& b) {
    a.Swap(&b);
  }
  inline void Swap(ObsPropertiesData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObsPropertiesData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObsPropertiesData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObsPropertiesData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ObsPropertiesData& from);
  void MergeFrom(const ObsPropertiesData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObsPropertiesData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flremoting.protocol.ObsPropertiesData";
  }
  protected:
  explicit ObsPropertiesData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObsPropertiesInfosFieldNumber = 1,
  };
  // repeated .flremoting.protocol.ObsPropertiesInfo obs_properties_infos = 1;
  int obs_properties_infos_size() const;
  private:
  int _internal_obs_properties_infos_size() const;
  public:
  void clear_obs_properties_infos();
  ::flremoting::protocol::ObsPropertiesInfo* mutable_obs_properties_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flremoting::protocol::ObsPropertiesInfo >*
      mutable_obs_properties_infos();
  private:
  const ::flremoting::protocol::ObsPropertiesInfo& _internal_obs_properties_infos(int index) const;
  ::flremoting::protocol::ObsPropertiesInfo* _internal_add_obs_properties_infos();
  public:
  const ::flremoting::protocol::ObsPropertiesInfo& obs_properties_infos(int index) const;
  ::flremoting::protocol::ObsPropertiesInfo* add_obs_properties_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flremoting::protocol::ObsPropertiesInfo >&
      obs_properties_infos() const;

  // @@protoc_insertion_point(class_scope:flremoting.protocol.ObsPropertiesData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flremoting::protocol::ObsPropertiesInfo > obs_properties_infos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flobsinfo_2eproto;
};
// -------------------------------------------------------------------

class ObsTextSourceData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:flremoting.protocol.ObsTextSourceData) */ {
 public:
  inline ObsTextSourceData() : ObsTextSourceData(nullptr) {}
  ~ObsTextSourceData() override;
  explicit PROTOBUF_CONSTEXPR ObsTextSourceData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObsTextSourceData(const ObsTextSourceData& from);
  ObsTextSourceData(ObsTextSourceData&& from) noexcept
    : ObsTextSourceData() {
    *this = ::std::move(from);
  }

  inline ObsTextSourceData& operator=(const ObsTextSourceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObsTextSourceData& operator=(ObsTextSourceData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ObsTextSourceData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObsTextSourceData* internal_default_instance() {
    return reinterpret_cast<const ObsTextSourceData*>(
               &_ObsTextSourceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ObsTextSourceData& a, ObsTextSourceData& b) {
    a.Swap(&b);
  }
  inline void Swap(ObsTextSourceData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObsTextSourceData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObsTextSourceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObsTextSourceData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ObsTextSourceData& from);
  void MergeFrom(const ObsTextSourceData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObsTextSourceData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flremoting.protocol.ObsTextSourceData";
  }
  protected:
  explicit ObsTextSourceData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceIdFieldNumber = 1,
    kSourceNameFieldNumber = 2,
    kFaceFieldNumber = 3,
    kStyleFieldNumber = 5,
    kObsPropertiesDataFieldNumber = 7,
    kFlagsFieldNumber = 4,
    kSizeFieldNumber = 6,
  };
  // optional string source_id = 1;
  bool has_source_id() const;
  private:
  bool _internal_has_source_id() const;
  public:
  void clear_source_id();
  const std::string& source_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_id();
  PROTOBUF_NODISCARD std::string* release_source_id();
  void set_allocated_source_id(std::string* source_id);
  private:
  const std::string& _internal_source_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_id(const std::string& value);
  std::string* _internal_mutable_source_id();
  public:

  // optional string source_name = 2;
  bool has_source_name() const;
  private:
  bool _internal_has_source_name() const;
  public:
  void clear_source_name();
  const std::string& source_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_name();
  PROTOBUF_NODISCARD std::string* release_source_name();
  void set_allocated_source_name(std::string* source_name);
  private:
  const std::string& _internal_source_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_name(const std::string& value);
  std::string* _internal_mutable_source_name();
  public:

  // optional string face = 3;
  bool has_face() const;
  private:
  bool _internal_has_face() const;
  public:
  void clear_face();
  const std::string& face() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_face(ArgT0&& arg0, ArgT... args);
  std::string* mutable_face();
  PROTOBUF_NODISCARD std::string* release_face();
  void set_allocated_face(std::string* face);
  private:
  const std::string& _internal_face() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_face(const std::string& value);
  std::string* _internal_mutable_face();
  public:

  // optional string style = 5;
  bool has_style() const;
  private:
  bool _internal_has_style() const;
  public:
  void clear_style();
  const std::string& style() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_style(ArgT0&& arg0, ArgT... args);
  std::string* mutable_style();
  PROTOBUF_NODISCARD std::string* release_style();
  void set_allocated_style(std::string* style);
  private:
  const std::string& _internal_style() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_style(const std::string& value);
  std::string* _internal_mutable_style();
  public:

  // optional .flremoting.protocol.ObsPropertiesData obs_properties_data = 7;
  bool has_obs_properties_data() const;
  private:
  bool _internal_has_obs_properties_data() const;
  public:
  void clear_obs_properties_data();
  const ::flremoting::protocol::ObsPropertiesData& obs_properties_data() const;
  PROTOBUF_NODISCARD ::flremoting::protocol::ObsPropertiesData* release_obs_properties_data();
  ::flremoting::protocol::ObsPropertiesData* mutable_obs_properties_data();
  void set_allocated_obs_properties_data(::flremoting::protocol::ObsPropertiesData* obs_properties_data);
  private:
  const ::flremoting::protocol::ObsPropertiesData& _internal_obs_properties_data() const;
  ::flremoting::protocol::ObsPropertiesData* _internal_mutable_obs_properties_data();
  public:
  void unsafe_arena_set_allocated_obs_properties_data(
      ::flremoting::protocol::ObsPropertiesData* obs_properties_data);
  ::flremoting::protocol::ObsPropertiesData* unsafe_arena_release_obs_properties_data();

  // optional int32 flags = 4;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  int32_t flags() const;
  void set_flags(int32_t value);
  private:
  int32_t _internal_flags() const;
  void _internal_set_flags(int32_t value);
  public:

  // optional int32 size = 6;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  int32_t size() const;
  void set_size(int32_t value);
  private:
  int32_t _internal_size() const;
  void _internal_set_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:flremoting.protocol.ObsTextSourceData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr face_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr style_;
  ::flremoting::protocol::ObsPropertiesData* obs_properties_data_;
  int32_t flags_;
  int32_t size_;
  friend struct ::TableStruct_flobsinfo_2eproto;
};
// -------------------------------------------------------------------

class ObsImageSourceData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:flremoting.protocol.ObsImageSourceData) */ {
 public:
  inline ObsImageSourceData() : ObsImageSourceData(nullptr) {}
  ~ObsImageSourceData() override;
  explicit PROTOBUF_CONSTEXPR ObsImageSourceData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObsImageSourceData(const ObsImageSourceData& from);
  ObsImageSourceData(ObsImageSourceData&& from) noexcept
    : ObsImageSourceData() {
    *this = ::std::move(from);
  }

  inline ObsImageSourceData& operator=(const ObsImageSourceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObsImageSourceData& operator=(ObsImageSourceData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ObsImageSourceData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObsImageSourceData* internal_default_instance() {
    return reinterpret_cast<const ObsImageSourceData*>(
               &_ObsImageSourceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ObsImageSourceData& a, ObsImageSourceData& b) {
    a.Swap(&b);
  }
  inline void Swap(ObsImageSourceData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObsImageSourceData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObsImageSourceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObsImageSourceData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ObsImageSourceData& from);
  void MergeFrom(const ObsImageSourceData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObsImageSourceData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flremoting.protocol.ObsImageSourceData";
  }
  protected:
  explicit ObsImageSourceData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceIdFieldNumber = 1,
    kSourceNameFieldNumber = 2,
    kObsPropertiesDataFieldNumber = 3,
  };
  // optional string source_id = 1;
  bool has_source_id() const;
  private:
  bool _internal_has_source_id() const;
  public:
  void clear_source_id();
  const std::string& source_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_id();
  PROTOBUF_NODISCARD std::string* release_source_id();
  void set_allocated_source_id(std::string* source_id);
  private:
  const std::string& _internal_source_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_id(const std::string& value);
  std::string* _internal_mutable_source_id();
  public:

  // optional string source_name = 2;
  bool has_source_name() const;
  private:
  bool _internal_has_source_name() const;
  public:
  void clear_source_name();
  const std::string& source_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_name();
  PROTOBUF_NODISCARD std::string* release_source_name();
  void set_allocated_source_name(std::string* source_name);
  private:
  const std::string& _internal_source_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_name(const std::string& value);
  std::string* _internal_mutable_source_name();
  public:

  // optional .flremoting.protocol.ObsPropertiesData obs_properties_data = 3;
  bool has_obs_properties_data() const;
  private:
  bool _internal_has_obs_properties_data() const;
  public:
  void clear_obs_properties_data();
  const ::flremoting::protocol::ObsPropertiesData& obs_properties_data() const;
  PROTOBUF_NODISCARD ::flremoting::protocol::ObsPropertiesData* release_obs_properties_data();
  ::flremoting::protocol::ObsPropertiesData* mutable_obs_properties_data();
  void set_allocated_obs_properties_data(::flremoting::protocol::ObsPropertiesData* obs_properties_data);
  private:
  const ::flremoting::protocol::ObsPropertiesData& _internal_obs_properties_data() const;
  ::flremoting::protocol::ObsPropertiesData* _internal_mutable_obs_properties_data();
  public:
  void unsafe_arena_set_allocated_obs_properties_data(
      ::flremoting::protocol::ObsPropertiesData* obs_properties_data);
  ::flremoting::protocol::ObsPropertiesData* unsafe_arena_release_obs_properties_data();

  // @@protoc_insertion_point(class_scope:flremoting.protocol.ObsImageSourceData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_name_;
  ::flremoting::protocol::ObsPropertiesData* obs_properties_data_;
  friend struct ::TableStruct_flobsinfo_2eproto;
};
// -------------------------------------------------------------------

class ObsVideoSourceData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:flremoting.protocol.ObsVideoSourceData) */ {
 public:
  inline ObsVideoSourceData() : ObsVideoSourceData(nullptr) {}
  ~ObsVideoSourceData() override;
  explicit PROTOBUF_CONSTEXPR ObsVideoSourceData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObsVideoSourceData(const ObsVideoSourceData& from);
  ObsVideoSourceData(ObsVideoSourceData&& from) noexcept
    : ObsVideoSourceData() {
    *this = ::std::move(from);
  }

  inline ObsVideoSourceData& operator=(const ObsVideoSourceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObsVideoSourceData& operator=(ObsVideoSourceData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ObsVideoSourceData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObsVideoSourceData* internal_default_instance() {
    return reinterpret_cast<const ObsVideoSourceData*>(
               &_ObsVideoSourceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ObsVideoSourceData& a, ObsVideoSourceData& b) {
    a.Swap(&b);
  }
  inline void Swap(ObsVideoSourceData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObsVideoSourceData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObsVideoSourceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObsVideoSourceData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ObsVideoSourceData& from);
  void MergeFrom(const ObsVideoSourceData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObsVideoSourceData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flremoting.protocol.ObsVideoSourceData";
  }
  protected:
  explicit ObsVideoSourceData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceIdFieldNumber = 1,
    kSourceNameFieldNumber = 2,
    kObsPropertiesDataFieldNumber = 3,
  };
  // optional string source_id = 1;
  bool has_source_id() const;
  private:
  bool _internal_has_source_id() const;
  public:
  void clear_source_id();
  const std::string& source_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_id();
  PROTOBUF_NODISCARD std::string* release_source_id();
  void set_allocated_source_id(std::string* source_id);
  private:
  const std::string& _internal_source_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_id(const std::string& value);
  std::string* _internal_mutable_source_id();
  public:

  // optional string source_name = 2;
  bool has_source_name() const;
  private:
  bool _internal_has_source_name() const;
  public:
  void clear_source_name();
  const std::string& source_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_name();
  PROTOBUF_NODISCARD std::string* release_source_name();
  void set_allocated_source_name(std::string* source_name);
  private:
  const std::string& _internal_source_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_name(const std::string& value);
  std::string* _internal_mutable_source_name();
  public:

  // optional .flremoting.protocol.ObsPropertiesData obs_properties_data = 3;
  bool has_obs_properties_data() const;
  private:
  bool _internal_has_obs_properties_data() const;
  public:
  void clear_obs_properties_data();
  const ::flremoting::protocol::ObsPropertiesData& obs_properties_data() const;
  PROTOBUF_NODISCARD ::flremoting::protocol::ObsPropertiesData* release_obs_properties_data();
  ::flremoting::protocol::ObsPropertiesData* mutable_obs_properties_data();
  void set_allocated_obs_properties_data(::flremoting::protocol::ObsPropertiesData* obs_properties_data);
  private:
  const ::flremoting::protocol::ObsPropertiesData& _internal_obs_properties_data() const;
  ::flremoting::protocol::ObsPropertiesData* _internal_mutable_obs_properties_data();
  public:
  void unsafe_arena_set_allocated_obs_properties_data(
      ::flremoting::protocol::ObsPropertiesData* obs_properties_data);
  ::flremoting::protocol::ObsPropertiesData* unsafe_arena_release_obs_properties_data();

  // @@protoc_insertion_point(class_scope:flremoting.protocol.ObsVideoSourceData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_name_;
  ::flremoting::protocol::ObsPropertiesData* obs_properties_data_;
  friend struct ::TableStruct_flobsinfo_2eproto;
};
// -------------------------------------------------------------------

class ObsCaptureSourceWindowInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:flremoting.protocol.ObsCaptureSourceWindowInfo) */ {
 public:
  inline ObsCaptureSourceWindowInfo() : ObsCaptureSourceWindowInfo(nullptr) {}
  ~ObsCaptureSourceWindowInfo() override;
  explicit PROTOBUF_CONSTEXPR ObsCaptureSourceWindowInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObsCaptureSourceWindowInfo(const ObsCaptureSourceWindowInfo& from);
  ObsCaptureSourceWindowInfo(ObsCaptureSourceWindowInfo&& from) noexcept
    : ObsCaptureSourceWindowInfo() {
    *this = ::std::move(from);
  }

  inline ObsCaptureSourceWindowInfo& operator=(const ObsCaptureSourceWindowInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObsCaptureSourceWindowInfo& operator=(ObsCaptureSourceWindowInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ObsCaptureSourceWindowInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObsCaptureSourceWindowInfo* internal_default_instance() {
    return reinterpret_cast<const ObsCaptureSourceWindowInfo*>(
               &_ObsCaptureSourceWindowInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ObsCaptureSourceWindowInfo& a, ObsCaptureSourceWindowInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ObsCaptureSourceWindowInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObsCaptureSourceWindowInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObsCaptureSourceWindowInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObsCaptureSourceWindowInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ObsCaptureSourceWindowInfo& from);
  void MergeFrom(const ObsCaptureSourceWindowInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObsCaptureSourceWindowInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flremoting.protocol.ObsCaptureSourceWindowInfo";
  }
  protected:
  explicit ObsCaptureSourceWindowInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWindowFieldNumber = 1,
    kOfficeFileFieldNumber = 4,
    kCursorFieldNumber = 2,
    kClientAreaFieldNumber = 3,
  };
  // optional string window = 1;
  bool has_window() const;
  private:
  bool _internal_has_window() const;
  public:
  void clear_window();
  const std::string& window() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_window(ArgT0&& arg0, ArgT... args);
  std::string* mutable_window();
  PROTOBUF_NODISCARD std::string* release_window();
  void set_allocated_window(std::string* window);
  private:
  const std::string& _internal_window() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_window(const std::string& value);
  std::string* _internal_mutable_window();
  public:

  // optional string office_file = 4;
  bool has_office_file() const;
  private:
  bool _internal_has_office_file() const;
  public:
  void clear_office_file();
  const std::string& office_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_office_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_office_file();
  PROTOBUF_NODISCARD std::string* release_office_file();
  void set_allocated_office_file(std::string* office_file);
  private:
  const std::string& _internal_office_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_office_file(const std::string& value);
  std::string* _internal_mutable_office_file();
  public:

  // optional bool cursor = 2;
  bool has_cursor() const;
  private:
  bool _internal_has_cursor() const;
  public:
  void clear_cursor();
  bool cursor() const;
  void set_cursor(bool value);
  private:
  bool _internal_cursor() const;
  void _internal_set_cursor(bool value);
  public:

  // optional bool client_area = 3;
  bool has_client_area() const;
  private:
  bool _internal_has_client_area() const;
  public:
  void clear_client_area();
  bool client_area() const;
  void set_client_area(bool value);
  private:
  bool _internal_client_area() const;
  void _internal_set_client_area(bool value);
  public:

  // @@protoc_insertion_point(class_scope:flremoting.protocol.ObsCaptureSourceWindowInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr window_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr office_file_;
  bool cursor_;
  bool client_area_;
  friend struct ::TableStruct_flobsinfo_2eproto;
};
// -------------------------------------------------------------------

class ObsCaptureSourceGameInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:flremoting.protocol.ObsCaptureSourceGameInfo) */ {
 public:
  inline ObsCaptureSourceGameInfo() : ObsCaptureSourceGameInfo(nullptr) {}
  ~ObsCaptureSourceGameInfo() override;
  explicit PROTOBUF_CONSTEXPR ObsCaptureSourceGameInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObsCaptureSourceGameInfo(const ObsCaptureSourceGameInfo& from);
  ObsCaptureSourceGameInfo(ObsCaptureSourceGameInfo&& from) noexcept
    : ObsCaptureSourceGameInfo() {
    *this = ::std::move(from);
  }

  inline ObsCaptureSourceGameInfo& operator=(const ObsCaptureSourceGameInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObsCaptureSourceGameInfo& operator=(ObsCaptureSourceGameInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ObsCaptureSourceGameInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObsCaptureSourceGameInfo* internal_default_instance() {
    return reinterpret_cast<const ObsCaptureSourceGameInfo*>(
               &_ObsCaptureSourceGameInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ObsCaptureSourceGameInfo& a, ObsCaptureSourceGameInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ObsCaptureSourceGameInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObsCaptureSourceGameInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObsCaptureSourceGameInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObsCaptureSourceGameInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ObsCaptureSourceGameInfo& from);
  void MergeFrom(const ObsCaptureSourceGameInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObsCaptureSourceGameInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flremoting.protocol.ObsCaptureSourceGameInfo";
  }
  protected:
  explicit ObsCaptureSourceGameInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCaptureModeFieldNumber = 1,
    kWindowFieldNumber = 2,
    kAntiCheatHookFieldNumber = 3,
    kCaptureOverlaysFieldNumber = 4,
    kCaptureCursorFieldNumber = 5,
  };
  // optional string capture_mode = 1;
  bool has_capture_mode() const;
  private:
  bool _internal_has_capture_mode() const;
  public:
  void clear_capture_mode();
  const std::string& capture_mode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_capture_mode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_capture_mode();
  PROTOBUF_NODISCARD std::string* release_capture_mode();
  void set_allocated_capture_mode(std::string* capture_mode);
  private:
  const std::string& _internal_capture_mode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_capture_mode(const std::string& value);
  std::string* _internal_mutable_capture_mode();
  public:

  // optional string window = 2;
  bool has_window() const;
  private:
  bool _internal_has_window() const;
  public:
  void clear_window();
  const std::string& window() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_window(ArgT0&& arg0, ArgT... args);
  std::string* mutable_window();
  PROTOBUF_NODISCARD std::string* release_window();
  void set_allocated_window(std::string* window);
  private:
  const std::string& _internal_window() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_window(const std::string& value);
  std::string* _internal_mutable_window();
  public:

  // optional bool anti_cheat_hook = 3;
  bool has_anti_cheat_hook() const;
  private:
  bool _internal_has_anti_cheat_hook() const;
  public:
  void clear_anti_cheat_hook();
  bool anti_cheat_hook() const;
  void set_anti_cheat_hook(bool value);
  private:
  bool _internal_anti_cheat_hook() const;
  void _internal_set_anti_cheat_hook(bool value);
  public:

  // optional bool capture_overlays = 4;
  bool has_capture_overlays() const;
  private:
  bool _internal_has_capture_overlays() const;
  public:
  void clear_capture_overlays();
  bool capture_overlays() const;
  void set_capture_overlays(bool value);
  private:
  bool _internal_capture_overlays() const;
  void _internal_set_capture_overlays(bool value);
  public:

  // optional bool capture_cursor = 5;
  bool has_capture_cursor() const;
  private:
  bool _internal_has_capture_cursor() const;
  public:
  void clear_capture_cursor();
  bool capture_cursor() const;
  void set_capture_cursor(bool value);
  private:
  bool _internal_capture_cursor() const;
  void _internal_set_capture_cursor(bool value);
  public:

  // @@protoc_insertion_point(class_scope:flremoting.protocol.ObsCaptureSourceGameInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr capture_mode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr window_;
  bool anti_cheat_hook_;
  bool capture_overlays_;
  bool capture_cursor_;
  friend struct ::TableStruct_flobsinfo_2eproto;
};
// -------------------------------------------------------------------

class ObsCaptureSourceMonitorInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:flremoting.protocol.ObsCaptureSourceMonitorInfo) */ {
 public:
  inline ObsCaptureSourceMonitorInfo() : ObsCaptureSourceMonitorInfo(nullptr) {}
  ~ObsCaptureSourceMonitorInfo() override;
  explicit PROTOBUF_CONSTEXPR ObsCaptureSourceMonitorInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObsCaptureSourceMonitorInfo(const ObsCaptureSourceMonitorInfo& from);
  ObsCaptureSourceMonitorInfo(ObsCaptureSourceMonitorInfo&& from) noexcept
    : ObsCaptureSourceMonitorInfo() {
    *this = ::std::move(from);
  }

  inline ObsCaptureSourceMonitorInfo& operator=(const ObsCaptureSourceMonitorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObsCaptureSourceMonitorInfo& operator=(ObsCaptureSourceMonitorInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ObsCaptureSourceMonitorInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObsCaptureSourceMonitorInfo* internal_default_instance() {
    return reinterpret_cast<const ObsCaptureSourceMonitorInfo*>(
               &_ObsCaptureSourceMonitorInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ObsCaptureSourceMonitorInfo& a, ObsCaptureSourceMonitorInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ObsCaptureSourceMonitorInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObsCaptureSourceMonitorInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObsCaptureSourceMonitorInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObsCaptureSourceMonitorInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ObsCaptureSourceMonitorInfo& from);
  void MergeFrom(const ObsCaptureSourceMonitorInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObsCaptureSourceMonitorInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flremoting.protocol.ObsCaptureSourceMonitorInfo";
  }
  protected:
  explicit ObsCaptureSourceMonitorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMonitorFieldNumber = 1,
    kLeftFieldNumber = 3,
    kRightFieldNumber = 4,
    kTopFieldNumber = 5,
    kBottomFieldNumber = 6,
    kUseRectFieldNumber = 2,
    kCaptureCursorFieldNumber = 7,
  };
  // optional int64 monitor = 1;
  bool has_monitor() const;
  private:
  bool _internal_has_monitor() const;
  public:
  void clear_monitor();
  int64_t monitor() const;
  void set_monitor(int64_t value);
  private:
  int64_t _internal_monitor() const;
  void _internal_set_monitor(int64_t value);
  public:

  // optional int64 left = 3;
  bool has_left() const;
  private:
  bool _internal_has_left() const;
  public:
  void clear_left();
  int64_t left() const;
  void set_left(int64_t value);
  private:
  int64_t _internal_left() const;
  void _internal_set_left(int64_t value);
  public:

  // optional int64 right = 4;
  bool has_right() const;
  private:
  bool _internal_has_right() const;
  public:
  void clear_right();
  int64_t right() const;
  void set_right(int64_t value);
  private:
  int64_t _internal_right() const;
  void _internal_set_right(int64_t value);
  public:

  // optional int64 top = 5;
  bool has_top() const;
  private:
  bool _internal_has_top() const;
  public:
  void clear_top();
  int64_t top() const;
  void set_top(int64_t value);
  private:
  int64_t _internal_top() const;
  void _internal_set_top(int64_t value);
  public:

  // optional int64 bottom = 6;
  bool has_bottom() const;
  private:
  bool _internal_has_bottom() const;
  public:
  void clear_bottom();
  int64_t bottom() const;
  void set_bottom(int64_t value);
  private:
  int64_t _internal_bottom() const;
  void _internal_set_bottom(int64_t value);
  public:

  // optional bool use_rect = 2;
  bool has_use_rect() const;
  private:
  bool _internal_has_use_rect() const;
  public:
  void clear_use_rect();
  bool use_rect() const;
  void set_use_rect(bool value);
  private:
  bool _internal_use_rect() const;
  void _internal_set_use_rect(bool value);
  public:

  // optional bool capture_cursor = 7;
  bool has_capture_cursor() const;
  private:
  bool _internal_has_capture_cursor() const;
  public:
  void clear_capture_cursor();
  bool capture_cursor() const;
  void set_capture_cursor(bool value);
  private:
  bool _internal_capture_cursor() const;
  void _internal_set_capture_cursor(bool value);
  public:

  // @@protoc_insertion_point(class_scope:flremoting.protocol.ObsCaptureSourceMonitorInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t monitor_;
  int64_t left_;
  int64_t right_;
  int64_t top_;
  int64_t bottom_;
  bool use_rect_;
  bool capture_cursor_;
  friend struct ::TableStruct_flobsinfo_2eproto;
};
// -------------------------------------------------------------------

class ObsCaptureSourceData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:flremoting.protocol.ObsCaptureSourceData) */ {
 public:
  inline ObsCaptureSourceData() : ObsCaptureSourceData(nullptr) {}
  ~ObsCaptureSourceData() override;
  explicit PROTOBUF_CONSTEXPR ObsCaptureSourceData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObsCaptureSourceData(const ObsCaptureSourceData& from);
  ObsCaptureSourceData(ObsCaptureSourceData&& from) noexcept
    : ObsCaptureSourceData() {
    *this = ::std::move(from);
  }

  inline ObsCaptureSourceData& operator=(const ObsCaptureSourceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObsCaptureSourceData& operator=(ObsCaptureSourceData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ObsCaptureSourceData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObsCaptureSourceData* internal_default_instance() {
    return reinterpret_cast<const ObsCaptureSourceData*>(
               &_ObsCaptureSourceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ObsCaptureSourceData& a, ObsCaptureSourceData& b) {
    a.Swap(&b);
  }
  inline void Swap(ObsCaptureSourceData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObsCaptureSourceData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObsCaptureSourceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObsCaptureSourceData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ObsCaptureSourceData& from);
  void MergeFrom(const ObsCaptureSourceData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObsCaptureSourceData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flremoting.protocol.ObsCaptureSourceData";
  }
  protected:
  explicit ObsCaptureSourceData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceIdFieldNumber = 1,
    kSourceNameFieldNumber = 2,
    kPayloadFieldNumber = 4,
    kMethodFieldNumber = 3,
    kPriorityFieldNumber = 5,
    kUseWildcardsFieldNumber = 6,
    kCompatibilityFieldNumber = 7,
  };
  // optional string source_id = 1;
  bool has_source_id() const;
  private:
  bool _internal_has_source_id() const;
  public:
  void clear_source_id();
  const std::string& source_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_id();
  PROTOBUF_NODISCARD std::string* release_source_id();
  void set_allocated_source_id(std::string* source_id);
  private:
  const std::string& _internal_source_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_id(const std::string& value);
  std::string* _internal_mutable_source_id();
  public:

  // optional string source_name = 2;
  bool has_source_name() const;
  private:
  bool _internal_has_source_name() const;
  public:
  void clear_source_name();
  const std::string& source_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_name();
  PROTOBUF_NODISCARD std::string* release_source_name();
  void set_allocated_source_name(std::string* source_name);
  private:
  const std::string& _internal_source_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_name(const std::string& value);
  std::string* _internal_mutable_source_name();
  public:

  // optional bytes payload = 4;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // optional int64 method = 3;
  bool has_method() const;
  private:
  bool _internal_has_method() const;
  public:
  void clear_method();
  int64_t method() const;
  void set_method(int64_t value);
  private:
  int64_t _internal_method() const;
  void _internal_set_method(int64_t value);
  public:

  // optional int64 priority = 5;
  bool has_priority() const;
  private:
  bool _internal_has_priority() const;
  public:
  void clear_priority();
  int64_t priority() const;
  void set_priority(int64_t value);
  private:
  int64_t _internal_priority() const;
  void _internal_set_priority(int64_t value);
  public:

  // optional bool use_wildcards = 6;
  bool has_use_wildcards() const;
  private:
  bool _internal_has_use_wildcards() const;
  public:
  void clear_use_wildcards();
  bool use_wildcards() const;
  void set_use_wildcards(bool value);
  private:
  bool _internal_use_wildcards() const;
  void _internal_set_use_wildcards(bool value);
  public:

  // optional bool compatibility = 7;
  bool has_compatibility() const;
  private:
  bool _internal_has_compatibility() const;
  public:
  void clear_compatibility();
  bool compatibility() const;
  void set_compatibility(bool value);
  private:
  bool _internal_compatibility() const;
  void _internal_set_compatibility(bool value);
  public:

  // @@protoc_insertion_point(class_scope:flremoting.protocol.ObsCaptureSourceData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  int64_t method_;
  int64_t priority_;
  bool use_wildcards_;
  bool compatibility_;
  friend struct ::TableStruct_flobsinfo_2eproto;
};
// -------------------------------------------------------------------

class ObsPhoneCastingSourceData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:flremoting.protocol.ObsPhoneCastingSourceData) */ {
 public:
  inline ObsPhoneCastingSourceData() : ObsPhoneCastingSourceData(nullptr) {}
  ~ObsPhoneCastingSourceData() override;
  explicit PROTOBUF_CONSTEXPR ObsPhoneCastingSourceData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObsPhoneCastingSourceData(const ObsPhoneCastingSourceData& from);
  ObsPhoneCastingSourceData(ObsPhoneCastingSourceData&& from) noexcept
    : ObsPhoneCastingSourceData() {
    *this = ::std::move(from);
  }

  inline ObsPhoneCastingSourceData& operator=(const ObsPhoneCastingSourceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObsPhoneCastingSourceData& operator=(ObsPhoneCastingSourceData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ObsPhoneCastingSourceData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObsPhoneCastingSourceData* internal_default_instance() {
    return reinterpret_cast<const ObsPhoneCastingSourceData*>(
               &_ObsPhoneCastingSourceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ObsPhoneCastingSourceData& a, ObsPhoneCastingSourceData& b) {
    a.Swap(&b);
  }
  inline void Swap(ObsPhoneCastingSourceData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObsPhoneCastingSourceData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObsPhoneCastingSourceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObsPhoneCastingSourceData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ObsPhoneCastingSourceData& from);
  void MergeFrom(const ObsPhoneCastingSourceData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObsPhoneCastingSourceData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flremoting.protocol.ObsPhoneCastingSourceData";
  }
  protected:
  explicit ObsPhoneCastingSourceData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceIdFieldNumber = 1,
    kSourceNameFieldNumber = 2,
    kMethodFieldNumber = 3,
    kAudioChannelFieldNumber = 7,
    kAudioSampleRateFieldNumber = 8,
    kCastingFrameFieldNumber = 9,
    kHardwareDecodeFieldNumber = 4,
    kCpuStatusFieldNumber = 5,
    kForceUpdateFieldNumber = 6,
  };
  // optional string source_id = 1;
  bool has_source_id() const;
  private:
  bool _internal_has_source_id() const;
  public:
  void clear_source_id();
  const std::string& source_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_id();
  PROTOBUF_NODISCARD std::string* release_source_id();
  void set_allocated_source_id(std::string* source_id);
  private:
  const std::string& _internal_source_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_id(const std::string& value);
  std::string* _internal_mutable_source_id();
  public:

  // optional string source_name = 2;
  bool has_source_name() const;
  private:
  bool _internal_has_source_name() const;
  public:
  void clear_source_name();
  const std::string& source_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_name();
  PROTOBUF_NODISCARD std::string* release_source_name();
  void set_allocated_source_name(std::string* source_name);
  private:
  const std::string& _internal_source_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_name(const std::string& value);
  std::string* _internal_mutable_source_name();
  public:

  // optional int64 method = 3;
  bool has_method() const;
  private:
  bool _internal_has_method() const;
  public:
  void clear_method();
  int64_t method() const;
  void set_method(int64_t value);
  private:
  int64_t _internal_method() const;
  void _internal_set_method(int64_t value);
  public:

  // optional int64 audio_channel = 7;
  bool has_audio_channel() const;
  private:
  bool _internal_has_audio_channel() const;
  public:
  void clear_audio_channel();
  int64_t audio_channel() const;
  void set_audio_channel(int64_t value);
  private:
  int64_t _internal_audio_channel() const;
  void _internal_set_audio_channel(int64_t value);
  public:

  // optional int64 audio_sample_rate = 8;
  bool has_audio_sample_rate() const;
  private:
  bool _internal_has_audio_sample_rate() const;
  public:
  void clear_audio_sample_rate();
  int64_t audio_sample_rate() const;
  void set_audio_sample_rate(int64_t value);
  private:
  int64_t _internal_audio_sample_rate() const;
  void _internal_set_audio_sample_rate(int64_t value);
  public:

  // optional int64 casting_frame = 9;
  bool has_casting_frame() const;
  private:
  bool _internal_has_casting_frame() const;
  public:
  void clear_casting_frame();
  int64_t casting_frame() const;
  void set_casting_frame(int64_t value);
  private:
  int64_t _internal_casting_frame() const;
  void _internal_set_casting_frame(int64_t value);
  public:

  // optional bool hardware_decode = 4;
  bool has_hardware_decode() const;
  private:
  bool _internal_has_hardware_decode() const;
  public:
  void clear_hardware_decode();
  bool hardware_decode() const;
  void set_hardware_decode(bool value);
  private:
  bool _internal_hardware_decode() const;
  void _internal_set_hardware_decode(bool value);
  public:

  // optional bool cpu_status = 5;
  bool has_cpu_status() const;
  private:
  bool _internal_has_cpu_status() const;
  public:
  void clear_cpu_status();
  bool cpu_status() const;
  void set_cpu_status(bool value);
  private:
  bool _internal_cpu_status() const;
  void _internal_set_cpu_status(bool value);
  public:

  // optional bool force_update = 6;
  bool has_force_update() const;
  private:
  bool _internal_has_force_update() const;
  public:
  void clear_force_update();
  bool force_update() const;
  void set_force_update(bool value);
  private:
  bool _internal_force_update() const;
  void _internal_set_force_update(bool value);
  public:

  // @@protoc_insertion_point(class_scope:flremoting.protocol.ObsPhoneCastingSourceData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_name_;
  int64_t method_;
  int64_t audio_channel_;
  int64_t audio_sample_rate_;
  int64_t casting_frame_;
  bool hardware_decode_;
  bool cpu_status_;
  bool force_update_;
  friend struct ::TableStruct_flobsinfo_2eproto;
};
// -------------------------------------------------------------------

class ObsCameraSourceData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:flremoting.protocol.ObsCameraSourceData) */ {
 public:
  inline ObsCameraSourceData() : ObsCameraSourceData(nullptr) {}
  ~ObsCameraSourceData() override;
  explicit PROTOBUF_CONSTEXPR ObsCameraSourceData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObsCameraSourceData(const ObsCameraSourceData& from);
  ObsCameraSourceData(ObsCameraSourceData&& from) noexcept
    : ObsCameraSourceData() {
    *this = ::std::move(from);
  }

  inline ObsCameraSourceData& operator=(const ObsCameraSourceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObsCameraSourceData& operator=(ObsCameraSourceData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ObsCameraSourceData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObsCameraSourceData* internal_default_instance() {
    return reinterpret_cast<const ObsCameraSourceData*>(
               &_ObsCameraSourceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ObsCameraSourceData& a, ObsCameraSourceData& b) {
    a.Swap(&b);
  }
  inline void Swap(ObsCameraSourceData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObsCameraSourceData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObsCameraSourceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObsCameraSourceData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ObsCameraSourceData& from);
  void MergeFrom(const ObsCameraSourceData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObsCameraSourceData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flremoting.protocol.ObsCameraSourceData";
  }
  protected:
  explicit ObsCameraSourceData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceIdFieldNumber = 1,
    kSourceNameFieldNumber = 2,
    kObsPropertiesDataFieldNumber = 4,
    kSourceHwndFieldNumber = 3,
    kSaveSourceFieldNumber = 5,
    kChangeIdFieldNumber = 6,
  };
  // optional string source_id = 1;
  bool has_source_id() const;
  private:
  bool _internal_has_source_id() const;
  public:
  void clear_source_id();
  const std::string& source_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_id();
  PROTOBUF_NODISCARD std::string* release_source_id();
  void set_allocated_source_id(std::string* source_id);
  private:
  const std::string& _internal_source_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_id(const std::string& value);
  std::string* _internal_mutable_source_id();
  public:

  // optional string source_name = 2;
  bool has_source_name() const;
  private:
  bool _internal_has_source_name() const;
  public:
  void clear_source_name();
  const std::string& source_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_name();
  PROTOBUF_NODISCARD std::string* release_source_name();
  void set_allocated_source_name(std::string* source_name);
  private:
  const std::string& _internal_source_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_name(const std::string& value);
  std::string* _internal_mutable_source_name();
  public:

  // optional .flremoting.protocol.ObsPropertiesData obs_properties_data = 4;
  bool has_obs_properties_data() const;
  private:
  bool _internal_has_obs_properties_data() const;
  public:
  void clear_obs_properties_data();
  const ::flremoting::protocol::ObsPropertiesData& obs_properties_data() const;
  PROTOBUF_NODISCARD ::flremoting::protocol::ObsPropertiesData* release_obs_properties_data();
  ::flremoting::protocol::ObsPropertiesData* mutable_obs_properties_data();
  void set_allocated_obs_properties_data(::flremoting::protocol::ObsPropertiesData* obs_properties_data);
  private:
  const ::flremoting::protocol::ObsPropertiesData& _internal_obs_properties_data() const;
  ::flremoting::protocol::ObsPropertiesData* _internal_mutable_obs_properties_data();
  public:
  void unsafe_arena_set_allocated_obs_properties_data(
      ::flremoting::protocol::ObsPropertiesData* obs_properties_data);
  ::flremoting::protocol::ObsPropertiesData* unsafe_arena_release_obs_properties_data();

  // optional uint32 source_hwnd = 3;
  bool has_source_hwnd() const;
  private:
  bool _internal_has_source_hwnd() const;
  public:
  void clear_source_hwnd();
  uint32_t source_hwnd() const;
  void set_source_hwnd(uint32_t value);
  private:
  uint32_t _internal_source_hwnd() const;
  void _internal_set_source_hwnd(uint32_t value);
  public:

  // optional bool save_source = 5;
  bool has_save_source() const;
  private:
  bool _internal_has_save_source() const;
  public:
  void clear_save_source();
  bool save_source() const;
  void set_save_source(bool value);
  private:
  bool _internal_save_source() const;
  void _internal_set_save_source(bool value);
  public:

  // optional bool change_id = 6;
  bool has_change_id() const;
  private:
  bool _internal_has_change_id() const;
  public:
  void clear_change_id();
  bool change_id() const;
  void set_change_id(bool value);
  private:
  bool _internal_change_id() const;
  void _internal_set_change_id(bool value);
  public:

  // @@protoc_insertion_point(class_scope:flremoting.protocol.ObsCameraSourceData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_name_;
  ::flremoting::protocol::ObsPropertiesData* obs_properties_data_;
  uint32_t source_hwnd_;
  bool save_source_;
  bool change_id_;
  friend struct ::TableStruct_flobsinfo_2eproto;
};
// -------------------------------------------------------------------

class InputVolumeData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:flremoting.protocol.InputVolumeData) */ {
 public:
  inline InputVolumeData() : InputVolumeData(nullptr) {}
  ~InputVolumeData() override;
  explicit PROTOBUF_CONSTEXPR InputVolumeData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InputVolumeData(const InputVolumeData& from);
  InputVolumeData(InputVolumeData&& from) noexcept
    : InputVolumeData() {
    *this = ::std::move(from);
  }

  inline InputVolumeData& operator=(const InputVolumeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputVolumeData& operator=(InputVolumeData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const InputVolumeData& default_instance() {
    return *internal_default_instance();
  }
  static inline const InputVolumeData* internal_default_instance() {
    return reinterpret_cast<const InputVolumeData*>(
               &_InputVolumeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(InputVolumeData& a, InputVolumeData& b) {
    a.Swap(&b);
  }
  inline void Swap(InputVolumeData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputVolumeData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InputVolumeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InputVolumeData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const InputVolumeData& from);
  void MergeFrom(const InputVolumeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InputVolumeData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flremoting.protocol.InputVolumeData";
  }
  protected:
  explicit InputVolumeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // optional int32 value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:flremoting.protocol.InputVolumeData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t value_;
  friend struct ::TableStruct_flobsinfo_2eproto;
};
// -------------------------------------------------------------------

class OutputVolumeData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:flremoting.protocol.OutputVolumeData) */ {
 public:
  inline OutputVolumeData() : OutputVolumeData(nullptr) {}
  ~OutputVolumeData() override;
  explicit PROTOBUF_CONSTEXPR OutputVolumeData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OutputVolumeData(const OutputVolumeData& from);
  OutputVolumeData(OutputVolumeData&& from) noexcept
    : OutputVolumeData() {
    *this = ::std::move(from);
  }

  inline OutputVolumeData& operator=(const OutputVolumeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputVolumeData& operator=(OutputVolumeData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const OutputVolumeData& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutputVolumeData* internal_default_instance() {
    return reinterpret_cast<const OutputVolumeData*>(
               &_OutputVolumeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(OutputVolumeData& a, OutputVolumeData& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputVolumeData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutputVolumeData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OutputVolumeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OutputVolumeData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const OutputVolumeData& from);
  void MergeFrom(const OutputVolumeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OutputVolumeData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flremoting.protocol.OutputVolumeData";
  }
  protected:
  explicit OutputVolumeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // optional int32 value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:flremoting.protocol.OutputVolumeData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t value_;
  friend struct ::TableStruct_flobsinfo_2eproto;
};
// -------------------------------------------------------------------

class ObsItemMessage final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:flremoting.protocol.ObsItemMessage) */ {
 public:
  inline ObsItemMessage() : ObsItemMessage(nullptr) {}
  ~ObsItemMessage() override;
  explicit PROTOBUF_CONSTEXPR ObsItemMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObsItemMessage(const ObsItemMessage& from);
  ObsItemMessage(ObsItemMessage&& from) noexcept
    : ObsItemMessage() {
    *this = ::std::move(from);
  }

  inline ObsItemMessage& operator=(const ObsItemMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObsItemMessage& operator=(ObsItemMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ObsItemMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObsItemMessage* internal_default_instance() {
    return reinterpret_cast<const ObsItemMessage*>(
               &_ObsItemMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ObsItemMessage& a, ObsItemMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ObsItemMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObsItemMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObsItemMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObsItemMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ObsItemMessage& from);
  void MergeFrom(const ObsItemMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObsItemMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flremoting.protocol.ObsItemMessage";
  }
  protected:
  explicit ObsItemMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceTypeFieldNumber = 3,
    kSourceNameFieldNumber = 4,
    kSourceDataFieldNumber = 7,
    kItemIdFieldNumber = 2,
    kItemVisibleFieldNumber = 1,
    kItemLockStatusFieldNumber = 8,
    kSourceWidthFieldNumber = 5,
    kSourceHeightFieldNumber = 6,
  };
  // optional string source_type = 3;
  bool has_source_type() const;
  private:
  bool _internal_has_source_type() const;
  public:
  void clear_source_type();
  const std::string& source_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_type();
  PROTOBUF_NODISCARD std::string* release_source_type();
  void set_allocated_source_type(std::string* source_type);
  private:
  const std::string& _internal_source_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_type(const std::string& value);
  std::string* _internal_mutable_source_type();
  public:

  // optional string source_name = 4;
  bool has_source_name() const;
  private:
  bool _internal_has_source_name() const;
  public:
  void clear_source_name();
  const std::string& source_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_name();
  PROTOBUF_NODISCARD std::string* release_source_name();
  void set_allocated_source_name(std::string* source_name);
  private:
  const std::string& _internal_source_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_name(const std::string& value);
  std::string* _internal_mutable_source_name();
  public:

  // optional bytes source_data = 7;
  bool has_source_data() const;
  private:
  bool _internal_has_source_data() const;
  public:
  void clear_source_data();
  const std::string& source_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_data();
  PROTOBUF_NODISCARD std::string* release_source_data();
  void set_allocated_source_data(std::string* source_data);
  private:
  const std::string& _internal_source_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_data(const std::string& value);
  std::string* _internal_mutable_source_data();
  public:

  // optional int64 item_id = 2;
  bool has_item_id() const;
  private:
  bool _internal_has_item_id() const;
  public:
  void clear_item_id();
  int64_t item_id() const;
  void set_item_id(int64_t value);
  private:
  int64_t _internal_item_id() const;
  void _internal_set_item_id(int64_t value);
  public:

  // optional bool item_visible = 1;
  bool has_item_visible() const;
  private:
  bool _internal_has_item_visible() const;
  public:
  void clear_item_visible();
  bool item_visible() const;
  void set_item_visible(bool value);
  private:
  bool _internal_item_visible() const;
  void _internal_set_item_visible(bool value);
  public:

  // optional bool item_lock_status = 8;
  bool has_item_lock_status() const;
  private:
  bool _internal_has_item_lock_status() const;
  public:
  void clear_item_lock_status();
  bool item_lock_status() const;
  void set_item_lock_status(bool value);
  private:
  bool _internal_item_lock_status() const;
  void _internal_set_item_lock_status(bool value);
  public:

  // optional uint32 source_width = 5;
  bool has_source_width() const;
  private:
  bool _internal_has_source_width() const;
  public:
  void clear_source_width();
  uint32_t source_width() const;
  void set_source_width(uint32_t value);
  private:
  uint32_t _internal_source_width() const;
  void _internal_set_source_width(uint32_t value);
  public:

  // optional uint32 source_height = 6;
  bool has_source_height() const;
  private:
  bool _internal_has_source_height() const;
  public:
  void clear_source_height();
  uint32_t source_height() const;
  void set_source_height(uint32_t value);
  private:
  uint32_t _internal_source_height() const;
  void _internal_set_source_height(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:flremoting.protocol.ObsItemMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_data_;
  int64_t item_id_;
  bool item_visible_;
  bool item_lock_status_;
  uint32_t source_width_;
  uint32_t source_height_;
  friend struct ::TableStruct_flobsinfo_2eproto;
};
// -------------------------------------------------------------------

class ObsCursorMessage final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:flremoting.protocol.ObsCursorMessage) */ {
 public:
  inline ObsCursorMessage() : ObsCursorMessage(nullptr) {}
  ~ObsCursorMessage() override;
  explicit PROTOBUF_CONSTEXPR ObsCursorMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObsCursorMessage(const ObsCursorMessage& from);
  ObsCursorMessage(ObsCursorMessage&& from) noexcept
    : ObsCursorMessage() {
    *this = ::std::move(from);
  }

  inline ObsCursorMessage& operator=(const ObsCursorMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObsCursorMessage& operator=(ObsCursorMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ObsCursorMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObsCursorMessage* internal_default_instance() {
    return reinterpret_cast<const ObsCursorMessage*>(
               &_ObsCursorMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ObsCursorMessage& a, ObsCursorMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ObsCursorMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObsCursorMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObsCursorMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObsCursorMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ObsCursorMessage& from);
  void MergeFrom(const ObsCursorMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObsCursorMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flremoting.protocol.ObsCursorMessage";
  }
  protected:
  explicit ObsCursorMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCursorStatusFieldNumber = 1,
  };
  // optional bool cursor_status = 1;
  bool has_cursor_status() const;
  private:
  bool _internal_has_cursor_status() const;
  public:
  void clear_cursor_status();
  bool cursor_status() const;
  void set_cursor_status(bool value);
  private:
  bool _internal_cursor_status() const;
  void _internal_set_cursor_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:flremoting.protocol.ObsCursorMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool cursor_status_;
  friend struct ::TableStruct_flobsinfo_2eproto;
};
// -------------------------------------------------------------------

class ObsItemEditMessage final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:flremoting.protocol.ObsItemEditMessage) */ {
 public:
  inline ObsItemEditMessage() : ObsItemEditMessage(nullptr) {}
  ~ObsItemEditMessage() override;
  explicit PROTOBUF_CONSTEXPR ObsItemEditMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObsItemEditMessage(const ObsItemEditMessage& from);
  ObsItemEditMessage(ObsItemEditMessage&& from) noexcept
    : ObsItemEditMessage() {
    *this = ::std::move(from);
  }

  inline ObsItemEditMessage& operator=(const ObsItemEditMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObsItemEditMessage& operator=(ObsItemEditMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ObsItemEditMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObsItemEditMessage* internal_default_instance() {
    return reinterpret_cast<const ObsItemEditMessage*>(
               &_ObsItemEditMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ObsItemEditMessage& a, ObsItemEditMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ObsItemEditMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObsItemEditMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObsItemEditMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObsItemEditMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ObsItemEditMessage& from);
  void MergeFrom(const ObsItemEditMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObsItemEditMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flremoting.protocol.ObsItemEditMessage";
  }
  protected:
  explicit ObsItemEditMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 1,
    kActionTypeFieldNumber = 2,
  };
  // optional int64 item_id = 1;
  bool has_item_id() const;
  private:
  bool _internal_has_item_id() const;
  public:
  void clear_item_id();
  int64_t item_id() const;
  void set_item_id(int64_t value);
  private:
  int64_t _internal_item_id() const;
  void _internal_set_item_id(int64_t value);
  public:

  // optional .flremoting.protocol.ObsItemActionType action_type = 2;
  bool has_action_type() const;
  private:
  bool _internal_has_action_type() const;
  public:
  void clear_action_type();
  ::flremoting::protocol::ObsItemActionType action_type() const;
  void set_action_type(::flremoting::protocol::ObsItemActionType value);
  private:
  ::flremoting::protocol::ObsItemActionType _internal_action_type() const;
  void _internal_set_action_type(::flremoting::protocol::ObsItemActionType value);
  public:

  // @@protoc_insertion_point(class_scope:flremoting.protocol.ObsItemEditMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t item_id_;
  int action_type_;
  friend struct ::TableStruct_flobsinfo_2eproto;
};
// -------------------------------------------------------------------

class ObsItemEditMessageReq final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:flremoting.protocol.ObsItemEditMessageReq) */ {
 public:
  inline ObsItemEditMessageReq() : ObsItemEditMessageReq(nullptr) {}
  ~ObsItemEditMessageReq() override;
  explicit PROTOBUF_CONSTEXPR ObsItemEditMessageReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObsItemEditMessageReq(const ObsItemEditMessageReq& from);
  ObsItemEditMessageReq(ObsItemEditMessageReq&& from) noexcept
    : ObsItemEditMessageReq() {
    *this = ::std::move(from);
  }

  inline ObsItemEditMessageReq& operator=(const ObsItemEditMessageReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObsItemEditMessageReq& operator=(ObsItemEditMessageReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ObsItemEditMessageReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObsItemEditMessageReq* internal_default_instance() {
    return reinterpret_cast<const ObsItemEditMessageReq*>(
               &_ObsItemEditMessageReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ObsItemEditMessageReq& a, ObsItemEditMessageReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ObsItemEditMessageReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObsItemEditMessageReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObsItemEditMessageReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObsItemEditMessageReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ObsItemEditMessageReq& from);
  void MergeFrom(const ObsItemEditMessageReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObsItemEditMessageReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flremoting.protocol.ObsItemEditMessageReq";
  }
  protected:
  explicit ObsItemEditMessageReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEditInfoFieldNumber = 2,
    kEditMsgFieldNumber = 1,
  };
  // optional string edit_info = 2;
  bool has_edit_info() const;
  private:
  bool _internal_has_edit_info() const;
  public:
  void clear_edit_info();
  const std::string& edit_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_edit_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_edit_info();
  PROTOBUF_NODISCARD std::string* release_edit_info();
  void set_allocated_edit_info(std::string* edit_info);
  private:
  const std::string& _internal_edit_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_edit_info(const std::string& value);
  std::string* _internal_mutable_edit_info();
  public:

  // optional .flremoting.protocol.ObsItemEditMessage edit_msg = 1;
  bool has_edit_msg() const;
  private:
  bool _internal_has_edit_msg() const;
  public:
  void clear_edit_msg();
  const ::flremoting::protocol::ObsItemEditMessage& edit_msg() const;
  PROTOBUF_NODISCARD ::flremoting::protocol::ObsItemEditMessage* release_edit_msg();
  ::flremoting::protocol::ObsItemEditMessage* mutable_edit_msg();
  void set_allocated_edit_msg(::flremoting::protocol::ObsItemEditMessage* edit_msg);
  private:
  const ::flremoting::protocol::ObsItemEditMessage& _internal_edit_msg() const;
  ::flremoting::protocol::ObsItemEditMessage* _internal_mutable_edit_msg();
  public:
  void unsafe_arena_set_allocated_edit_msg(
      ::flremoting::protocol::ObsItemEditMessage* edit_msg);
  ::flremoting::protocol::ObsItemEditMessage* unsafe_arena_release_edit_msg();

  // @@protoc_insertion_point(class_scope:flremoting.protocol.ObsItemEditMessageReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr edit_info_;
  ::flremoting::protocol::ObsItemEditMessage* edit_msg_;
  friend struct ::TableStruct_flobsinfo_2eproto;
};
// -------------------------------------------------------------------

class ObsItemEditMessageResp final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:flremoting.protocol.ObsItemEditMessageResp) */ {
 public:
  inline ObsItemEditMessageResp() : ObsItemEditMessageResp(nullptr) {}
  ~ObsItemEditMessageResp() override;
  explicit PROTOBUF_CONSTEXPR ObsItemEditMessageResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObsItemEditMessageResp(const ObsItemEditMessageResp& from);
  ObsItemEditMessageResp(ObsItemEditMessageResp&& from) noexcept
    : ObsItemEditMessageResp() {
    *this = ::std::move(from);
  }

  inline ObsItemEditMessageResp& operator=(const ObsItemEditMessageResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObsItemEditMessageResp& operator=(ObsItemEditMessageResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ObsItemEditMessageResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObsItemEditMessageResp* internal_default_instance() {
    return reinterpret_cast<const ObsItemEditMessageResp*>(
               &_ObsItemEditMessageResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ObsItemEditMessageResp& a, ObsItemEditMessageResp& b) {
    a.Swap(&b);
  }
  inline void Swap(ObsItemEditMessageResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObsItemEditMessageResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObsItemEditMessageResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObsItemEditMessageResp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ObsItemEditMessageResp& from);
  void MergeFrom(const ObsItemEditMessageResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObsItemEditMessageResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flremoting.protocol.ObsItemEditMessageResp";
  }
  protected:
  explicit ObsItemEditMessageResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseMsgFieldNumber = 1,
    kEditMsgFieldNumber = 2,
  };
  // optional .flremoting.protocol.BaseResponse base_msg = 1;
  bool has_base_msg() const;
  private:
  bool _internal_has_base_msg() const;
  public:
  void clear_base_msg();
  const ::flremoting::protocol::BaseResponse& base_msg() const;
  PROTOBUF_NODISCARD ::flremoting::protocol::BaseResponse* release_base_msg();
  ::flremoting::protocol::BaseResponse* mutable_base_msg();
  void set_allocated_base_msg(::flremoting::protocol::BaseResponse* base_msg);
  private:
  const ::flremoting::protocol::BaseResponse& _internal_base_msg() const;
  ::flremoting::protocol::BaseResponse* _internal_mutable_base_msg();
  public:
  void unsafe_arena_set_allocated_base_msg(
      ::flremoting::protocol::BaseResponse* base_msg);
  ::flremoting::protocol::BaseResponse* unsafe_arena_release_base_msg();

  // optional .flremoting.protocol.ObsItemEditMessage edit_msg = 2;
  bool has_edit_msg() const;
  private:
  bool _internal_has_edit_msg() const;
  public:
  void clear_edit_msg();
  const ::flremoting::protocol::ObsItemEditMessage& edit_msg() const;
  PROTOBUF_NODISCARD ::flremoting::protocol::ObsItemEditMessage* release_edit_msg();
  ::flremoting::protocol::ObsItemEditMessage* mutable_edit_msg();
  void set_allocated_edit_msg(::flremoting::protocol::ObsItemEditMessage* edit_msg);
  private:
  const ::flremoting::protocol::ObsItemEditMessage& _internal_edit_msg() const;
  ::flremoting::protocol::ObsItemEditMessage* _internal_mutable_edit_msg();
  public:
  void unsafe_arena_set_allocated_edit_msg(
      ::flremoting::protocol::ObsItemEditMessage* edit_msg);
  ::flremoting::protocol::ObsItemEditMessage* unsafe_arena_release_edit_msg();

  // @@protoc_insertion_point(class_scope:flremoting.protocol.ObsItemEditMessageResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::flremoting::protocol::BaseResponse* base_msg_;
  ::flremoting::protocol::ObsItemEditMessage* edit_msg_;
  friend struct ::TableStruct_flobsinfo_2eproto;
};
// -------------------------------------------------------------------

class ObsDeviceInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:flremoting.protocol.ObsDeviceInfo) */ {
 public:
  inline ObsDeviceInfo() : ObsDeviceInfo(nullptr) {}
  ~ObsDeviceInfo() override;
  explicit PROTOBUF_CONSTEXPR ObsDeviceInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObsDeviceInfo(const ObsDeviceInfo& from);
  ObsDeviceInfo(ObsDeviceInfo&& from) noexcept
    : ObsDeviceInfo() {
    *this = ::std::move(from);
  }

  inline ObsDeviceInfo& operator=(const ObsDeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObsDeviceInfo& operator=(ObsDeviceInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ObsDeviceInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObsDeviceInfo* internal_default_instance() {
    return reinterpret_cast<const ObsDeviceInfo*>(
               &_ObsDeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ObsDeviceInfo& a, ObsDeviceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ObsDeviceInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObsDeviceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObsDeviceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObsDeviceInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ObsDeviceInfo& from);
  void MergeFrom(const ObsDeviceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObsDeviceInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flremoting.protocol.ObsDeviceInfo";
  }
  protected:
  explicit ObsDeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceNameFieldNumber = 1,
    kDeviceDataFieldNumber = 2,
  };
  // optional string device_name = 1;
  bool has_device_name() const;
  private:
  bool _internal_has_device_name() const;
  public:
  void clear_device_name();
  const std::string& device_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_name();
  PROTOBUF_NODISCARD std::string* release_device_name();
  void set_allocated_device_name(std::string* device_name);
  private:
  const std::string& _internal_device_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_name(const std::string& value);
  std::string* _internal_mutable_device_name();
  public:

  // optional string device_data = 2;
  bool has_device_data() const;
  private:
  bool _internal_has_device_data() const;
  public:
  void clear_device_data();
  const std::string& device_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_data();
  PROTOBUF_NODISCARD std::string* release_device_data();
  void set_allocated_device_data(std::string* device_data);
  private:
  const std::string& _internal_device_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_data(const std::string& value);
  std::string* _internal_mutable_device_data();
  public:

  // @@protoc_insertion_point(class_scope:flremoting.protocol.ObsDeviceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_data_;
  friend struct ::TableStruct_flobsinfo_2eproto;
};
// -------------------------------------------------------------------

class ObsDeviceMessage final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:flremoting.protocol.ObsDeviceMessage) */ {
 public:
  inline ObsDeviceMessage() : ObsDeviceMessage(nullptr) {}
  ~ObsDeviceMessage() override;
  explicit PROTOBUF_CONSTEXPR ObsDeviceMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObsDeviceMessage(const ObsDeviceMessage& from);
  ObsDeviceMessage(ObsDeviceMessage&& from) noexcept
    : ObsDeviceMessage() {
    *this = ::std::move(from);
  }

  inline ObsDeviceMessage& operator=(const ObsDeviceMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObsDeviceMessage& operator=(ObsDeviceMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ObsDeviceMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObsDeviceMessage* internal_default_instance() {
    return reinterpret_cast<const ObsDeviceMessage*>(
               &_ObsDeviceMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ObsDeviceMessage& a, ObsDeviceMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ObsDeviceMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObsDeviceMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObsDeviceMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObsDeviceMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ObsDeviceMessage& from);
  void MergeFrom(const ObsDeviceMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObsDeviceMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flremoting.protocol.ObsDeviceMessage";
  }
  protected:
  explicit ObsDeviceMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceInfosFieldNumber = 2,
    kIdValueFieldNumber = 3,
    kDeviceTypeFieldNumber = 1,
    kNoiseValueFieldNumber = 5,
    kGainValueFieldNumber = 4,
    kIsActivateFieldNumber = 6,
    kMonitoringValueFieldNumber = 7,
  };
  // repeated .flremoting.protocol.ObsDeviceInfo device_infos = 2;
  int device_infos_size() const;
  private:
  int _internal_device_infos_size() const;
  public:
  void clear_device_infos();
  ::flremoting::protocol::ObsDeviceInfo* mutable_device_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flremoting::protocol::ObsDeviceInfo >*
      mutable_device_infos();
  private:
  const ::flremoting::protocol::ObsDeviceInfo& _internal_device_infos(int index) const;
  ::flremoting::protocol::ObsDeviceInfo* _internal_add_device_infos();
  public:
  const ::flremoting::protocol::ObsDeviceInfo& device_infos(int index) const;
  ::flremoting::protocol::ObsDeviceInfo* add_device_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flremoting::protocol::ObsDeviceInfo >&
      device_infos() const;

  // optional string id_value = 3;
  bool has_id_value() const;
  private:
  bool _internal_has_id_value() const;
  public:
  void clear_id_value();
  const std::string& id_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id_value();
  PROTOBUF_NODISCARD std::string* release_id_value();
  void set_allocated_id_value(std::string* id_value);
  private:
  const std::string& _internal_id_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id_value(const std::string& value);
  std::string* _internal_mutable_id_value();
  public:

  // optional .flremoting.protocol.ObsDeviceType device_type = 1;
  bool has_device_type() const;
  private:
  bool _internal_has_device_type() const;
  public:
  void clear_device_type();
  ::flremoting::protocol::ObsDeviceType device_type() const;
  void set_device_type(::flremoting::protocol::ObsDeviceType value);
  private:
  ::flremoting::protocol::ObsDeviceType _internal_device_type() const;
  void _internal_set_device_type(::flremoting::protocol::ObsDeviceType value);
  public:

  // optional int32 noise_value = 5;
  bool has_noise_value() const;
  private:
  bool _internal_has_noise_value() const;
  public:
  void clear_noise_value();
  int32_t noise_value() const;
  void set_noise_value(int32_t value);
  private:
  int32_t _internal_noise_value() const;
  void _internal_set_noise_value(int32_t value);
  public:

  // optional double gain_value = 4;
  bool has_gain_value() const;
  private:
  bool _internal_has_gain_value() const;
  public:
  void clear_gain_value();
  double gain_value() const;
  void set_gain_value(double value);
  private:
  double _internal_gain_value() const;
  void _internal_set_gain_value(double value);
  public:

  // optional bool is_activate = 6;
  bool has_is_activate() const;
  private:
  bool _internal_has_is_activate() const;
  public:
  void clear_is_activate();
  bool is_activate() const;
  void set_is_activate(bool value);
  private:
  bool _internal_is_activate() const;
  void _internal_set_is_activate(bool value);
  public:

  // optional int32 monitoring_value = 7;
  bool has_monitoring_value() const;
  private:
  bool _internal_has_monitoring_value() const;
  public:
  void clear_monitoring_value();
  int32_t monitoring_value() const;
  void set_monitoring_value(int32_t value);
  private:
  int32_t _internal_monitoring_value() const;
  void _internal_set_monitoring_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:flremoting.protocol.ObsDeviceMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flremoting::protocol::ObsDeviceInfo > device_infos_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_value_;
  int device_type_;
  int32_t noise_value_;
  double gain_value_;
  bool is_activate_;
  int32_t monitoring_value_;
  friend struct ::TableStruct_flobsinfo_2eproto;
};
// -------------------------------------------------------------------

class ObsDeviceEditMessageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:flremoting.protocol.ObsDeviceEditMessageRequest) */ {
 public:
  inline ObsDeviceEditMessageRequest() : ObsDeviceEditMessageRequest(nullptr) {}
  ~ObsDeviceEditMessageRequest() override;
  explicit PROTOBUF_CONSTEXPR ObsDeviceEditMessageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObsDeviceEditMessageRequest(const ObsDeviceEditMessageRequest& from);
  ObsDeviceEditMessageRequest(ObsDeviceEditMessageRequest&& from) noexcept
    : ObsDeviceEditMessageRequest() {
    *this = ::std::move(from);
  }

  inline ObsDeviceEditMessageRequest& operator=(const ObsDeviceEditMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObsDeviceEditMessageRequest& operator=(ObsDeviceEditMessageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ObsDeviceEditMessageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObsDeviceEditMessageRequest* internal_default_instance() {
    return reinterpret_cast<const ObsDeviceEditMessageRequest*>(
               &_ObsDeviceEditMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ObsDeviceEditMessageRequest& a, ObsDeviceEditMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ObsDeviceEditMessageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObsDeviceEditMessageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObsDeviceEditMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObsDeviceEditMessageRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ObsDeviceEditMessageRequest& from);
  void MergeFrom(const ObsDeviceEditMessageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObsDeviceEditMessageRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flremoting.protocol.ObsDeviceEditMessageRequest";
  }
  protected:
  explicit ObsDeviceEditMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsedStrValueFieldNumber = 2,
    kActionTypeFieldNumber = 1,
    kUsedIntValueFieldNumber = 4,
    kUsedDoubleValueFieldNumber = 3,
  };
  // optional string used_str_value = 2;
  bool has_used_str_value() const;
  private:
  bool _internal_has_used_str_value() const;
  public:
  void clear_used_str_value();
  const std::string& used_str_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_used_str_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_used_str_value();
  PROTOBUF_NODISCARD std::string* release_used_str_value();
  void set_allocated_used_str_value(std::string* used_str_value);
  private:
  const std::string& _internal_used_str_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_used_str_value(const std::string& value);
  std::string* _internal_mutable_used_str_value();
  public:

  // optional .flremoting.protocol.ObsDeviceActionType action_type = 1;
  bool has_action_type() const;
  private:
  bool _internal_has_action_type() const;
  public:
  void clear_action_type();
  ::flremoting::protocol::ObsDeviceActionType action_type() const;
  void set_action_type(::flremoting::protocol::ObsDeviceActionType value);
  private:
  ::flremoting::protocol::ObsDeviceActionType _internal_action_type() const;
  void _internal_set_action_type(::flremoting::protocol::ObsDeviceActionType value);
  public:

  // optional int32 used_int_value = 4;
  bool has_used_int_value() const;
  private:
  bool _internal_has_used_int_value() const;
  public:
  void clear_used_int_value();
  int32_t used_int_value() const;
  void set_used_int_value(int32_t value);
  private:
  int32_t _internal_used_int_value() const;
  void _internal_set_used_int_value(int32_t value);
  public:

  // optional double used_double_value = 3;
  bool has_used_double_value() const;
  private:
  bool _internal_has_used_double_value() const;
  public:
  void clear_used_double_value();
  double used_double_value() const;
  void set_used_double_value(double value);
  private:
  double _internal_used_double_value() const;
  void _internal_set_used_double_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:flremoting.protocol.ObsDeviceEditMessageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr used_str_value_;
  int action_type_;
  int32_t used_int_value_;
  double used_double_value_;
  friend struct ::TableStruct_flobsinfo_2eproto;
};
// -------------------------------------------------------------------

class ObsSourceFrame2Message final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:flremoting.protocol.ObsSourceFrame2Message) */ {
 public:
  inline ObsSourceFrame2Message() : ObsSourceFrame2Message(nullptr) {}
  ~ObsSourceFrame2Message() override;
  explicit PROTOBUF_CONSTEXPR ObsSourceFrame2Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObsSourceFrame2Message(const ObsSourceFrame2Message& from);
  ObsSourceFrame2Message(ObsSourceFrame2Message&& from) noexcept
    : ObsSourceFrame2Message() {
    *this = ::std::move(from);
  }

  inline ObsSourceFrame2Message& operator=(const ObsSourceFrame2Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObsSourceFrame2Message& operator=(ObsSourceFrame2Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ObsSourceFrame2Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObsSourceFrame2Message* internal_default_instance() {
    return reinterpret_cast<const ObsSourceFrame2Message*>(
               &_ObsSourceFrame2Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ObsSourceFrame2Message& a, ObsSourceFrame2Message& b) {
    a.Swap(&b);
  }
  inline void Swap(ObsSourceFrame2Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObsSourceFrame2Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObsSourceFrame2Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObsSourceFrame2Message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ObsSourceFrame2Message& from);
  void MergeFrom(const ObsSourceFrame2Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObsSourceFrame2Message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flremoting.protocol.ObsSourceFrame2Message";
  }
  protected:
  explicit ObsSourceFrame2Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameDataFieldNumber = 5,
    kFrameIdFieldNumber = 1,
    kFrameFormatFieldNumber = 2,
    kFrameWidthFieldNumber = 3,
    kFrameHeightFieldNumber = 4,
  };
  // optional string frame_data = 5;
  bool has_frame_data() const;
  private:
  bool _internal_has_frame_data() const;
  public:
  void clear_frame_data();
  const std::string& frame_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frame_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frame_data();
  PROTOBUF_NODISCARD std::string* release_frame_data();
  void set_allocated_frame_data(std::string* frame_data);
  private:
  const std::string& _internal_frame_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frame_data(const std::string& value);
  std::string* _internal_mutable_frame_data();
  public:

  // optional int64 frame_id = 1;
  bool has_frame_id() const;
  private:
  bool _internal_has_frame_id() const;
  public:
  void clear_frame_id();
  int64_t frame_id() const;
  void set_frame_id(int64_t value);
  private:
  int64_t _internal_frame_id() const;
  void _internal_set_frame_id(int64_t value);
  public:

  // optional uint32 frame_format = 2;
  bool has_frame_format() const;
  private:
  bool _internal_has_frame_format() const;
  public:
  void clear_frame_format();
  uint32_t frame_format() const;
  void set_frame_format(uint32_t value);
  private:
  uint32_t _internal_frame_format() const;
  void _internal_set_frame_format(uint32_t value);
  public:

  // optional uint32 frame_width = 3;
  bool has_frame_width() const;
  private:
  bool _internal_has_frame_width() const;
  public:
  void clear_frame_width();
  uint32_t frame_width() const;
  void set_frame_width(uint32_t value);
  private:
  uint32_t _internal_frame_width() const;
  void _internal_set_frame_width(uint32_t value);
  public:

  // optional uint32 frame_height = 4;
  bool has_frame_height() const;
  private:
  bool _internal_has_frame_height() const;
  public:
  void clear_frame_height();
  uint32_t frame_height() const;
  void set_frame_height(uint32_t value);
  private:
  uint32_t _internal_frame_height() const;
  void _internal_set_frame_height(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:flremoting.protocol.ObsSourceFrame2Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_data_;
  int64_t frame_id_;
  uint32_t frame_format_;
  uint32_t frame_width_;
  uint32_t frame_height_;
  friend struct ::TableStruct_flobsinfo_2eproto;
};
// -------------------------------------------------------------------

class ObsSceneItemInfoData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:flremoting.protocol.ObsSceneItemInfoData) */ {
 public:
  inline ObsSceneItemInfoData() : ObsSceneItemInfoData(nullptr) {}
  ~ObsSceneItemInfoData() override;
  explicit PROTOBUF_CONSTEXPR ObsSceneItemInfoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObsSceneItemInfoData(const ObsSceneItemInfoData& from);
  ObsSceneItemInfoData(ObsSceneItemInfoData&& from) noexcept
    : ObsSceneItemInfoData() {
    *this = ::std::move(from);
  }

  inline ObsSceneItemInfoData& operator=(const ObsSceneItemInfoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObsSceneItemInfoData& operator=(ObsSceneItemInfoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ObsSceneItemInfoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObsSceneItemInfoData* internal_default_instance() {
    return reinterpret_cast<const ObsSceneItemInfoData*>(
               &_ObsSceneItemInfoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ObsSceneItemInfoData& a, ObsSceneItemInfoData& b) {
    a.Swap(&b);
  }
  inline void Swap(ObsSceneItemInfoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObsSceneItemInfoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObsSceneItemInfoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObsSceneItemInfoData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ObsSceneItemInfoData& from);
  void MergeFrom(const ObsSceneItemInfoData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObsSceneItemInfoData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flremoting.protocol.ObsSceneItemInfoData";
  }
  protected:
  explicit ObsSceneItemInfoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPosxFieldNumber = 2,
    kPosyFieldNumber = 3,
    kWidthFieldNumber = 4,
    kHeightFieldNumber = 5,
    kItemidFieldNumber = 7,
    kVisibleFieldNumber = 6,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional float posx = 2;
  bool has_posx() const;
  private:
  bool _internal_has_posx() const;
  public:
  void clear_posx();
  float posx() const;
  void set_posx(float value);
  private:
  float _internal_posx() const;
  void _internal_set_posx(float value);
  public:

  // optional float posy = 3;
  bool has_posy() const;
  private:
  bool _internal_has_posy() const;
  public:
  void clear_posy();
  float posy() const;
  void set_posy(float value);
  private:
  float _internal_posy() const;
  void _internal_set_posy(float value);
  public:

  // optional float width = 4;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  float width() const;
  void set_width(float value);
  private:
  float _internal_width() const;
  void _internal_set_width(float value);
  public:

  // optional float height = 5;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // optional int64 itemid = 7;
  bool has_itemid() const;
  private:
  bool _internal_has_itemid() const;
  public:
  void clear_itemid();
  int64_t itemid() const;
  void set_itemid(int64_t value);
  private:
  int64_t _internal_itemid() const;
  void _internal_set_itemid(int64_t value);
  public:

  // optional bool visible = 6;
  bool has_visible() const;
  private:
  bool _internal_has_visible() const;
  public:
  void clear_visible();
  bool visible() const;
  void set_visible(bool value);
  private:
  bool _internal_visible() const;
  void _internal_set_visible(bool value);
  public:

  // @@protoc_insertion_point(class_scope:flremoting.protocol.ObsSceneItemInfoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  float posx_;
  float posy_;
  float width_;
  float height_;
  int64_t itemid_;
  bool visible_;
  friend struct ::TableStruct_flobsinfo_2eproto;
};
// -------------------------------------------------------------------

class ObsSceneItemInfoMessage final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:flremoting.protocol.ObsSceneItemInfoMessage) */ {
 public:
  inline ObsSceneItemInfoMessage() : ObsSceneItemInfoMessage(nullptr) {}
  ~ObsSceneItemInfoMessage() override;
  explicit PROTOBUF_CONSTEXPR ObsSceneItemInfoMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObsSceneItemInfoMessage(const ObsSceneItemInfoMessage& from);
  ObsSceneItemInfoMessage(ObsSceneItemInfoMessage&& from) noexcept
    : ObsSceneItemInfoMessage() {
    *this = ::std::move(from);
  }

  inline ObsSceneItemInfoMessage& operator=(const ObsSceneItemInfoMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObsSceneItemInfoMessage& operator=(ObsSceneItemInfoMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ObsSceneItemInfoMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObsSceneItemInfoMessage* internal_default_instance() {
    return reinterpret_cast<const ObsSceneItemInfoMessage*>(
               &_ObsSceneItemInfoMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ObsSceneItemInfoMessage& a, ObsSceneItemInfoMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ObsSceneItemInfoMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObsSceneItemInfoMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObsSceneItemInfoMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObsSceneItemInfoMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ObsSceneItemInfoMessage& from);
  void MergeFrom(const ObsSceneItemInfoMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObsSceneItemInfoMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flremoting.protocol.ObsSceneItemInfoMessage";
  }
  protected:
  explicit ObsSceneItemInfoMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 1,
    kFpsFieldNumber = 2,
    kPeakVolumeFieldNumber = 3,
  };
  // repeated .flremoting.protocol.ObsSceneItemInfoData infos = 1;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::flremoting::protocol::ObsSceneItemInfoData* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flremoting::protocol::ObsSceneItemInfoData >*
      mutable_infos();
  private:
  const ::flremoting::protocol::ObsSceneItemInfoData& _internal_infos(int index) const;
  ::flremoting::protocol::ObsSceneItemInfoData* _internal_add_infos();
  public:
  const ::flremoting::protocol::ObsSceneItemInfoData& infos(int index) const;
  ::flremoting::protocol::ObsSceneItemInfoData* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flremoting::protocol::ObsSceneItemInfoData >&
      infos() const;

  // optional double fps = 2;
  bool has_fps() const;
  private:
  bool _internal_has_fps() const;
  public:
  void clear_fps();
  double fps() const;
  void set_fps(double value);
  private:
  double _internal_fps() const;
  void _internal_set_fps(double value);
  public:

  // optional int32 peak_volume = 3;
  bool has_peak_volume() const;
  private:
  bool _internal_has_peak_volume() const;
  public:
  void clear_peak_volume();
  int32_t peak_volume() const;
  void set_peak_volume(int32_t value);
  private:
  int32_t _internal_peak_volume() const;
  void _internal_set_peak_volume(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:flremoting.protocol.ObsSceneItemInfoMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flremoting::protocol::ObsSceneItemInfoData > infos_;
  double fps_;
  int32_t peak_volume_;
  friend struct ::TableStruct_flobsinfo_2eproto;
};
// -------------------------------------------------------------------

class ObsFPSInfoMessage final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:flremoting.protocol.ObsFPSInfoMessage) */ {
 public:
  inline ObsFPSInfoMessage() : ObsFPSInfoMessage(nullptr) {}
  ~ObsFPSInfoMessage() override;
  explicit PROTOBUF_CONSTEXPR ObsFPSInfoMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObsFPSInfoMessage(const ObsFPSInfoMessage& from);
  ObsFPSInfoMessage(ObsFPSInfoMessage&& from) noexcept
    : ObsFPSInfoMessage() {
    *this = ::std::move(from);
  }

  inline ObsFPSInfoMessage& operator=(const ObsFPSInfoMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObsFPSInfoMessage& operator=(ObsFPSInfoMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ObsFPSInfoMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObsFPSInfoMessage* internal_default_instance() {
    return reinterpret_cast<const ObsFPSInfoMessage*>(
               &_ObsFPSInfoMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ObsFPSInfoMessage& a, ObsFPSInfoMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ObsFPSInfoMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObsFPSInfoMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObsFPSInfoMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObsFPSInfoMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ObsFPSInfoMessage& from);
  void MergeFrom(const ObsFPSInfoMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObsFPSInfoMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flremoting.protocol.ObsFPSInfoMessage";
  }
  protected:
  explicit ObsFPSInfoMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFpsnumFieldNumber = 1,
    kFpsdenFieldNumber = 2,
  };
  // optional uint32 fpsnum = 1;
  bool has_fpsnum() const;
  private:
  bool _internal_has_fpsnum() const;
  public:
  void clear_fpsnum();
  uint32_t fpsnum() const;
  void set_fpsnum(uint32_t value);
  private:
  uint32_t _internal_fpsnum() const;
  void _internal_set_fpsnum(uint32_t value);
  public:

  // optional uint32 fpsden = 2;
  bool has_fpsden() const;
  private:
  bool _internal_has_fpsden() const;
  public:
  void clear_fpsden();
  uint32_t fpsden() const;
  void set_fpsden(uint32_t value);
  private:
  uint32_t _internal_fpsden() const;
  void _internal_set_fpsden(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:flremoting.protocol.ObsFPSInfoMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t fpsnum_;
  uint32_t fpsden_;
  friend struct ::TableStruct_flobsinfo_2eproto;
};
// -------------------------------------------------------------------

class ObsMeanRateInfoMessage final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:flremoting.protocol.ObsMeanRateInfoMessage) */ {
 public:
  inline ObsMeanRateInfoMessage() : ObsMeanRateInfoMessage(nullptr) {}
  ~ObsMeanRateInfoMessage() override;
  explicit PROTOBUF_CONSTEXPR ObsMeanRateInfoMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObsMeanRateInfoMessage(const ObsMeanRateInfoMessage& from);
  ObsMeanRateInfoMessage(ObsMeanRateInfoMessage&& from) noexcept
    : ObsMeanRateInfoMessage() {
    *this = ::std::move(from);
  }

  inline ObsMeanRateInfoMessage& operator=(const ObsMeanRateInfoMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObsMeanRateInfoMessage& operator=(ObsMeanRateInfoMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ObsMeanRateInfoMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObsMeanRateInfoMessage* internal_default_instance() {
    return reinterpret_cast<const ObsMeanRateInfoMessage*>(
               &_ObsMeanRateInfoMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ObsMeanRateInfoMessage& a, ObsMeanRateInfoMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ObsMeanRateInfoMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObsMeanRateInfoMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObsMeanRateInfoMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObsMeanRateInfoMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ObsMeanRateInfoMessage& from);
  void MergeFrom(const ObsMeanRateInfoMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObsMeanRateInfoMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flremoting.protocol.ObsMeanRateInfoMessage";
  }
  protected:
  explicit ObsMeanRateInfoMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableFieldNumber = 1,
    kFpsnumFieldNumber = 2,
  };
  // optional bool enable = 1;
  bool has_enable() const;
  private:
  bool _internal_has_enable() const;
  public:
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // optional int32 fpsnum = 2;
  bool has_fpsnum() const;
  private:
  bool _internal_has_fpsnum() const;
  public:
  void clear_fpsnum();
  int32_t fpsnum() const;
  void set_fpsnum(int32_t value);
  private:
  int32_t _internal_fpsnum() const;
  void _internal_set_fpsnum(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:flremoting.protocol.ObsMeanRateInfoMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool enable_;
  int32_t fpsnum_;
  friend struct ::TableStruct_flobsinfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ObsPropertyDoubleInfo

// optional string name = 1;
inline bool ObsPropertyDoubleInfo::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObsPropertyDoubleInfo::has_name() const {
  return _internal_has_name();
}
inline void ObsPropertyDoubleInfo::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ObsPropertyDoubleInfo::name() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsPropertyDoubleInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObsPropertyDoubleInfo::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsPropertyDoubleInfo.name)
}
inline std::string* ObsPropertyDoubleInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsPropertyDoubleInfo.name)
  return _s;
}
inline const std::string& ObsPropertyDoubleInfo::_internal_name() const {
  return name_.Get();
}
inline void ObsPropertyDoubleInfo::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* ObsPropertyDoubleInfo::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* ObsPropertyDoubleInfo::release_name() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.ObsPropertyDoubleInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ObsPropertyDoubleInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.ObsPropertyDoubleInfo.name)
}

// optional double value = 2;
inline bool ObsPropertyDoubleInfo::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObsPropertyDoubleInfo::has_value() const {
  return _internal_has_value();
}
inline void ObsPropertyDoubleInfo::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double ObsPropertyDoubleInfo::_internal_value() const {
  return value_;
}
inline double ObsPropertyDoubleInfo::value() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsPropertyDoubleInfo.value)
  return _internal_value();
}
inline void ObsPropertyDoubleInfo::_internal_set_value(double value) {
  _has_bits_[0] |= 0x00000002u;
  value_ = value;
}
inline void ObsPropertyDoubleInfo::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsPropertyDoubleInfo.value)
}

// -------------------------------------------------------------------

// ObsPropertyInt64Info

// optional string name = 1;
inline bool ObsPropertyInt64Info::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObsPropertyInt64Info::has_name() const {
  return _internal_has_name();
}
inline void ObsPropertyInt64Info::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ObsPropertyInt64Info::name() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsPropertyInt64Info.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObsPropertyInt64Info::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsPropertyInt64Info.name)
}
inline std::string* ObsPropertyInt64Info::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsPropertyInt64Info.name)
  return _s;
}
inline const std::string& ObsPropertyInt64Info::_internal_name() const {
  return name_.Get();
}
inline void ObsPropertyInt64Info::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* ObsPropertyInt64Info::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* ObsPropertyInt64Info::release_name() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.ObsPropertyInt64Info.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ObsPropertyInt64Info::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.ObsPropertyInt64Info.name)
}

// optional int64 value = 2;
inline bool ObsPropertyInt64Info::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObsPropertyInt64Info::has_value() const {
  return _internal_has_value();
}
inline void ObsPropertyInt64Info::clear_value() {
  value_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t ObsPropertyInt64Info::_internal_value() const {
  return value_;
}
inline int64_t ObsPropertyInt64Info::value() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsPropertyInt64Info.value)
  return _internal_value();
}
inline void ObsPropertyInt64Info::_internal_set_value(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  value_ = value;
}
inline void ObsPropertyInt64Info::set_value(int64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsPropertyInt64Info.value)
}

// -------------------------------------------------------------------

// ObsPropertyStringInfo

// optional string name = 1;
inline bool ObsPropertyStringInfo::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObsPropertyStringInfo::has_name() const {
  return _internal_has_name();
}
inline void ObsPropertyStringInfo::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ObsPropertyStringInfo::name() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsPropertyStringInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObsPropertyStringInfo::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsPropertyStringInfo.name)
}
inline std::string* ObsPropertyStringInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsPropertyStringInfo.name)
  return _s;
}
inline const std::string& ObsPropertyStringInfo::_internal_name() const {
  return name_.Get();
}
inline void ObsPropertyStringInfo::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* ObsPropertyStringInfo::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* ObsPropertyStringInfo::release_name() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.ObsPropertyStringInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ObsPropertyStringInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.ObsPropertyStringInfo.name)
}

// optional string value = 2;
inline bool ObsPropertyStringInfo::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObsPropertyStringInfo::has_value() const {
  return _internal_has_value();
}
inline void ObsPropertyStringInfo::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ObsPropertyStringInfo::value() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsPropertyStringInfo.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObsPropertyStringInfo::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsPropertyStringInfo.value)
}
inline std::string* ObsPropertyStringInfo::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsPropertyStringInfo.value)
  return _s;
}
inline const std::string& ObsPropertyStringInfo::_internal_value() const {
  return value_.Get();
}
inline void ObsPropertyStringInfo::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(value, GetArenaForAllocation());
}
inline std::string* ObsPropertyStringInfo::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(GetArenaForAllocation());
}
inline std::string* ObsPropertyStringInfo::release_value() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.ObsPropertyStringInfo.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault()) {
    value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ObsPropertyStringInfo::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault()) {
    value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.ObsPropertyStringInfo.value)
}

// -------------------------------------------------------------------

// ObsPropertiesInfo

// optional string info_name = 1;
inline bool ObsPropertiesInfo::_internal_has_info_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObsPropertiesInfo::has_info_name() const {
  return _internal_has_info_name();
}
inline void ObsPropertiesInfo::clear_info_name() {
  info_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ObsPropertiesInfo::info_name() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsPropertiesInfo.info_name)
  return _internal_info_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObsPropertiesInfo::set_info_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 info_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsPropertiesInfo.info_name)
}
inline std::string* ObsPropertiesInfo::mutable_info_name() {
  std::string* _s = _internal_mutable_info_name();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsPropertiesInfo.info_name)
  return _s;
}
inline const std::string& ObsPropertiesInfo::_internal_info_name() const {
  return info_name_.Get();
}
inline void ObsPropertiesInfo::_internal_set_info_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  info_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ObsPropertiesInfo::_internal_mutable_info_name() {
  _has_bits_[0] |= 0x00000001u;
  return info_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ObsPropertiesInfo::release_info_name() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.ObsPropertiesInfo.info_name)
  if (!_internal_has_info_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = info_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (info_name_.IsDefault()) {
    info_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ObsPropertiesInfo::set_allocated_info_name(std::string* info_name) {
  if (info_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  info_name_.SetAllocated(info_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (info_name_.IsDefault()) {
    info_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.ObsPropertiesInfo.info_name)
}

// optional .flremoting.protocol.ObsPropertyType info_type = 2;
inline bool ObsPropertiesInfo::_internal_has_info_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ObsPropertiesInfo::has_info_type() const {
  return _internal_has_info_type();
}
inline void ObsPropertiesInfo::clear_info_type() {
  info_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::flremoting::protocol::ObsPropertyType ObsPropertiesInfo::_internal_info_type() const {
  return static_cast< ::flremoting::protocol::ObsPropertyType >(info_type_);
}
inline ::flremoting::protocol::ObsPropertyType ObsPropertiesInfo::info_type() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsPropertiesInfo.info_type)
  return _internal_info_type();
}
inline void ObsPropertiesInfo::_internal_set_info_type(::flremoting::protocol::ObsPropertyType value) {
  assert(::flremoting::protocol::ObsPropertyType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  info_type_ = value;
}
inline void ObsPropertiesInfo::set_info_type(::flremoting::protocol::ObsPropertyType value) {
  _internal_set_info_type(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsPropertiesInfo.info_type)
}

// optional bool info_bool_value = 3;
inline bool ObsPropertiesInfo::_internal_has_info_bool_value() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ObsPropertiesInfo::has_info_bool_value() const {
  return _internal_has_info_bool_value();
}
inline void ObsPropertiesInfo::clear_info_bool_value() {
  info_bool_value_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ObsPropertiesInfo::_internal_info_bool_value() const {
  return info_bool_value_;
}
inline bool ObsPropertiesInfo::info_bool_value() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsPropertiesInfo.info_bool_value)
  return _internal_info_bool_value();
}
inline void ObsPropertiesInfo::_internal_set_info_bool_value(bool value) {
  _has_bits_[0] |= 0x00000008u;
  info_bool_value_ = value;
}
inline void ObsPropertiesInfo::set_info_bool_value(bool value) {
  _internal_set_info_bool_value(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsPropertiesInfo.info_bool_value)
}

// optional int32 info_int_value = 4;
inline bool ObsPropertiesInfo::_internal_has_info_int_value() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ObsPropertiesInfo::has_info_int_value() const {
  return _internal_has_info_int_value();
}
inline void ObsPropertiesInfo::clear_info_int_value() {
  info_int_value_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t ObsPropertiesInfo::_internal_info_int_value() const {
  return info_int_value_;
}
inline int32_t ObsPropertiesInfo::info_int_value() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsPropertiesInfo.info_int_value)
  return _internal_info_int_value();
}
inline void ObsPropertiesInfo::_internal_set_info_int_value(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  info_int_value_ = value;
}
inline void ObsPropertiesInfo::set_info_int_value(int32_t value) {
  _internal_set_info_int_value(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsPropertiesInfo.info_int_value)
}

// optional double info_double_value = 5;
inline bool ObsPropertiesInfo::_internal_has_info_double_value() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ObsPropertiesInfo::has_info_double_value() const {
  return _internal_has_info_double_value();
}
inline void ObsPropertiesInfo::clear_info_double_value() {
  info_double_value_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double ObsPropertiesInfo::_internal_info_double_value() const {
  return info_double_value_;
}
inline double ObsPropertiesInfo::info_double_value() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsPropertiesInfo.info_double_value)
  return _internal_info_double_value();
}
inline void ObsPropertiesInfo::_internal_set_info_double_value(double value) {
  _has_bits_[0] |= 0x00000010u;
  info_double_value_ = value;
}
inline void ObsPropertiesInfo::set_info_double_value(double value) {
  _internal_set_info_double_value(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsPropertiesInfo.info_double_value)
}

// optional string info_string_value = 6;
inline bool ObsPropertiesInfo::_internal_has_info_string_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObsPropertiesInfo::has_info_string_value() const {
  return _internal_has_info_string_value();
}
inline void ObsPropertiesInfo::clear_info_string_value() {
  info_string_value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ObsPropertiesInfo::info_string_value() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsPropertiesInfo.info_string_value)
  return _internal_info_string_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObsPropertiesInfo::set_info_string_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 info_string_value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsPropertiesInfo.info_string_value)
}
inline std::string* ObsPropertiesInfo::mutable_info_string_value() {
  std::string* _s = _internal_mutable_info_string_value();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsPropertiesInfo.info_string_value)
  return _s;
}
inline const std::string& ObsPropertiesInfo::_internal_info_string_value() const {
  return info_string_value_.Get();
}
inline void ObsPropertiesInfo::_internal_set_info_string_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  info_string_value_.Set(value, GetArenaForAllocation());
}
inline std::string* ObsPropertiesInfo::_internal_mutable_info_string_value() {
  _has_bits_[0] |= 0x00000002u;
  return info_string_value_.Mutable(GetArenaForAllocation());
}
inline std::string* ObsPropertiesInfo::release_info_string_value() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.ObsPropertiesInfo.info_string_value)
  if (!_internal_has_info_string_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = info_string_value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (info_string_value_.IsDefault()) {
    info_string_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ObsPropertiesInfo::set_allocated_info_string_value(std::string* info_string_value) {
  if (info_string_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  info_string_value_.SetAllocated(info_string_value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (info_string_value_.IsDefault()) {
    info_string_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.ObsPropertiesInfo.info_string_value)
}

// repeated .flremoting.protocol.ObsPropertyDoubleInfo info_double_values = 7;
inline int ObsPropertiesInfo::_internal_info_double_values_size() const {
  return info_double_values_.size();
}
inline int ObsPropertiesInfo::info_double_values_size() const {
  return _internal_info_double_values_size();
}
inline void ObsPropertiesInfo::clear_info_double_values() {
  info_double_values_.Clear();
}
inline ::flremoting::protocol::ObsPropertyDoubleInfo* ObsPropertiesInfo::mutable_info_double_values(int index) {
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsPropertiesInfo.info_double_values)
  return info_double_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flremoting::protocol::ObsPropertyDoubleInfo >*
ObsPropertiesInfo::mutable_info_double_values() {
  // @@protoc_insertion_point(field_mutable_list:flremoting.protocol.ObsPropertiesInfo.info_double_values)
  return &info_double_values_;
}
inline const ::flremoting::protocol::ObsPropertyDoubleInfo& ObsPropertiesInfo::_internal_info_double_values(int index) const {
  return info_double_values_.Get(index);
}
inline const ::flremoting::protocol::ObsPropertyDoubleInfo& ObsPropertiesInfo::info_double_values(int index) const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsPropertiesInfo.info_double_values)
  return _internal_info_double_values(index);
}
inline ::flremoting::protocol::ObsPropertyDoubleInfo* ObsPropertiesInfo::_internal_add_info_double_values() {
  return info_double_values_.Add();
}
inline ::flremoting::protocol::ObsPropertyDoubleInfo* ObsPropertiesInfo::add_info_double_values() {
  ::flremoting::protocol::ObsPropertyDoubleInfo* _add = _internal_add_info_double_values();
  // @@protoc_insertion_point(field_add:flremoting.protocol.ObsPropertiesInfo.info_double_values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flremoting::protocol::ObsPropertyDoubleInfo >&
ObsPropertiesInfo::info_double_values() const {
  // @@protoc_insertion_point(field_list:flremoting.protocol.ObsPropertiesInfo.info_double_values)
  return info_double_values_;
}

// repeated .flremoting.protocol.ObsPropertyInt64Info info_int64_values = 8;
inline int ObsPropertiesInfo::_internal_info_int64_values_size() const {
  return info_int64_values_.size();
}
inline int ObsPropertiesInfo::info_int64_values_size() const {
  return _internal_info_int64_values_size();
}
inline void ObsPropertiesInfo::clear_info_int64_values() {
  info_int64_values_.Clear();
}
inline ::flremoting::protocol::ObsPropertyInt64Info* ObsPropertiesInfo::mutable_info_int64_values(int index) {
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsPropertiesInfo.info_int64_values)
  return info_int64_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flremoting::protocol::ObsPropertyInt64Info >*
ObsPropertiesInfo::mutable_info_int64_values() {
  // @@protoc_insertion_point(field_mutable_list:flremoting.protocol.ObsPropertiesInfo.info_int64_values)
  return &info_int64_values_;
}
inline const ::flremoting::protocol::ObsPropertyInt64Info& ObsPropertiesInfo::_internal_info_int64_values(int index) const {
  return info_int64_values_.Get(index);
}
inline const ::flremoting::protocol::ObsPropertyInt64Info& ObsPropertiesInfo::info_int64_values(int index) const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsPropertiesInfo.info_int64_values)
  return _internal_info_int64_values(index);
}
inline ::flremoting::protocol::ObsPropertyInt64Info* ObsPropertiesInfo::_internal_add_info_int64_values() {
  return info_int64_values_.Add();
}
inline ::flremoting::protocol::ObsPropertyInt64Info* ObsPropertiesInfo::add_info_int64_values() {
  ::flremoting::protocol::ObsPropertyInt64Info* _add = _internal_add_info_int64_values();
  // @@protoc_insertion_point(field_add:flremoting.protocol.ObsPropertiesInfo.info_int64_values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flremoting::protocol::ObsPropertyInt64Info >&
ObsPropertiesInfo::info_int64_values() const {
  // @@protoc_insertion_point(field_list:flremoting.protocol.ObsPropertiesInfo.info_int64_values)
  return info_int64_values_;
}

// repeated .flremoting.protocol.ObsPropertyStringInfo info_string_values = 9;
inline int ObsPropertiesInfo::_internal_info_string_values_size() const {
  return info_string_values_.size();
}
inline int ObsPropertiesInfo::info_string_values_size() const {
  return _internal_info_string_values_size();
}
inline void ObsPropertiesInfo::clear_info_string_values() {
  info_string_values_.Clear();
}
inline ::flremoting::protocol::ObsPropertyStringInfo* ObsPropertiesInfo::mutable_info_string_values(int index) {
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsPropertiesInfo.info_string_values)
  return info_string_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flremoting::protocol::ObsPropertyStringInfo >*
ObsPropertiesInfo::mutable_info_string_values() {
  // @@protoc_insertion_point(field_mutable_list:flremoting.protocol.ObsPropertiesInfo.info_string_values)
  return &info_string_values_;
}
inline const ::flremoting::protocol::ObsPropertyStringInfo& ObsPropertiesInfo::_internal_info_string_values(int index) const {
  return info_string_values_.Get(index);
}
inline const ::flremoting::protocol::ObsPropertyStringInfo& ObsPropertiesInfo::info_string_values(int index) const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsPropertiesInfo.info_string_values)
  return _internal_info_string_values(index);
}
inline ::flremoting::protocol::ObsPropertyStringInfo* ObsPropertiesInfo::_internal_add_info_string_values() {
  return info_string_values_.Add();
}
inline ::flremoting::protocol::ObsPropertyStringInfo* ObsPropertiesInfo::add_info_string_values() {
  ::flremoting::protocol::ObsPropertyStringInfo* _add = _internal_add_info_string_values();
  // @@protoc_insertion_point(field_add:flremoting.protocol.ObsPropertiesInfo.info_string_values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flremoting::protocol::ObsPropertyStringInfo >&
ObsPropertiesInfo::info_string_values() const {
  // @@protoc_insertion_point(field_list:flremoting.protocol.ObsPropertiesInfo.info_string_values)
  return info_string_values_;
}

// -------------------------------------------------------------------

// ObsPropertiesData

// repeated .flremoting.protocol.ObsPropertiesInfo obs_properties_infos = 1;
inline int ObsPropertiesData::_internal_obs_properties_infos_size() const {
  return obs_properties_infos_.size();
}
inline int ObsPropertiesData::obs_properties_infos_size() const {
  return _internal_obs_properties_infos_size();
}
inline void ObsPropertiesData::clear_obs_properties_infos() {
  obs_properties_infos_.Clear();
}
inline ::flremoting::protocol::ObsPropertiesInfo* ObsPropertiesData::mutable_obs_properties_infos(int index) {
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsPropertiesData.obs_properties_infos)
  return obs_properties_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flremoting::protocol::ObsPropertiesInfo >*
ObsPropertiesData::mutable_obs_properties_infos() {
  // @@protoc_insertion_point(field_mutable_list:flremoting.protocol.ObsPropertiesData.obs_properties_infos)
  return &obs_properties_infos_;
}
inline const ::flremoting::protocol::ObsPropertiesInfo& ObsPropertiesData::_internal_obs_properties_infos(int index) const {
  return obs_properties_infos_.Get(index);
}
inline const ::flremoting::protocol::ObsPropertiesInfo& ObsPropertiesData::obs_properties_infos(int index) const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsPropertiesData.obs_properties_infos)
  return _internal_obs_properties_infos(index);
}
inline ::flremoting::protocol::ObsPropertiesInfo* ObsPropertiesData::_internal_add_obs_properties_infos() {
  return obs_properties_infos_.Add();
}
inline ::flremoting::protocol::ObsPropertiesInfo* ObsPropertiesData::add_obs_properties_infos() {
  ::flremoting::protocol::ObsPropertiesInfo* _add = _internal_add_obs_properties_infos();
  // @@protoc_insertion_point(field_add:flremoting.protocol.ObsPropertiesData.obs_properties_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flremoting::protocol::ObsPropertiesInfo >&
ObsPropertiesData::obs_properties_infos() const {
  // @@protoc_insertion_point(field_list:flremoting.protocol.ObsPropertiesData.obs_properties_infos)
  return obs_properties_infos_;
}

// -------------------------------------------------------------------

// ObsTextSourceData

// optional string source_id = 1;
inline bool ObsTextSourceData::_internal_has_source_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObsTextSourceData::has_source_id() const {
  return _internal_has_source_id();
}
inline void ObsTextSourceData::clear_source_id() {
  source_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ObsTextSourceData::source_id() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsTextSourceData.source_id)
  return _internal_source_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObsTextSourceData::set_source_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 source_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsTextSourceData.source_id)
}
inline std::string* ObsTextSourceData::mutable_source_id() {
  std::string* _s = _internal_mutable_source_id();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsTextSourceData.source_id)
  return _s;
}
inline const std::string& ObsTextSourceData::_internal_source_id() const {
  return source_id_.Get();
}
inline void ObsTextSourceData::_internal_set_source_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  source_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ObsTextSourceData::_internal_mutable_source_id() {
  _has_bits_[0] |= 0x00000001u;
  return source_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ObsTextSourceData::release_source_id() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.ObsTextSourceData.source_id)
  if (!_internal_has_source_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = source_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_id_.IsDefault()) {
    source_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ObsTextSourceData::set_allocated_source_id(std::string* source_id) {
  if (source_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_id_.SetAllocated(source_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_id_.IsDefault()) {
    source_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.ObsTextSourceData.source_id)
}

// optional string source_name = 2;
inline bool ObsTextSourceData::_internal_has_source_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObsTextSourceData::has_source_name() const {
  return _internal_has_source_name();
}
inline void ObsTextSourceData::clear_source_name() {
  source_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ObsTextSourceData::source_name() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsTextSourceData.source_name)
  return _internal_source_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObsTextSourceData::set_source_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 source_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsTextSourceData.source_name)
}
inline std::string* ObsTextSourceData::mutable_source_name() {
  std::string* _s = _internal_mutable_source_name();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsTextSourceData.source_name)
  return _s;
}
inline const std::string& ObsTextSourceData::_internal_source_name() const {
  return source_name_.Get();
}
inline void ObsTextSourceData::_internal_set_source_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  source_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ObsTextSourceData::_internal_mutable_source_name() {
  _has_bits_[0] |= 0x00000002u;
  return source_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ObsTextSourceData::release_source_name() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.ObsTextSourceData.source_name)
  if (!_internal_has_source_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = source_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_name_.IsDefault()) {
    source_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ObsTextSourceData::set_allocated_source_name(std::string* source_name) {
  if (source_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  source_name_.SetAllocated(source_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_name_.IsDefault()) {
    source_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.ObsTextSourceData.source_name)
}

// optional string face = 3;
inline bool ObsTextSourceData::_internal_has_face() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ObsTextSourceData::has_face() const {
  return _internal_has_face();
}
inline void ObsTextSourceData::clear_face() {
  face_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ObsTextSourceData::face() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsTextSourceData.face)
  return _internal_face();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObsTextSourceData::set_face(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 face_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsTextSourceData.face)
}
inline std::string* ObsTextSourceData::mutable_face() {
  std::string* _s = _internal_mutable_face();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsTextSourceData.face)
  return _s;
}
inline const std::string& ObsTextSourceData::_internal_face() const {
  return face_.Get();
}
inline void ObsTextSourceData::_internal_set_face(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  face_.Set(value, GetArenaForAllocation());
}
inline std::string* ObsTextSourceData::_internal_mutable_face() {
  _has_bits_[0] |= 0x00000004u;
  return face_.Mutable(GetArenaForAllocation());
}
inline std::string* ObsTextSourceData::release_face() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.ObsTextSourceData.face)
  if (!_internal_has_face()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = face_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (face_.IsDefault()) {
    face_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ObsTextSourceData::set_allocated_face(std::string* face) {
  if (face != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  face_.SetAllocated(face, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (face_.IsDefault()) {
    face_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.ObsTextSourceData.face)
}

// optional int32 flags = 4;
inline bool ObsTextSourceData::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ObsTextSourceData::has_flags() const {
  return _internal_has_flags();
}
inline void ObsTextSourceData::clear_flags() {
  flags_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t ObsTextSourceData::_internal_flags() const {
  return flags_;
}
inline int32_t ObsTextSourceData::flags() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsTextSourceData.flags)
  return _internal_flags();
}
inline void ObsTextSourceData::_internal_set_flags(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  flags_ = value;
}
inline void ObsTextSourceData::set_flags(int32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsTextSourceData.flags)
}

// optional string style = 5;
inline bool ObsTextSourceData::_internal_has_style() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ObsTextSourceData::has_style() const {
  return _internal_has_style();
}
inline void ObsTextSourceData::clear_style() {
  style_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ObsTextSourceData::style() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsTextSourceData.style)
  return _internal_style();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObsTextSourceData::set_style(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 style_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsTextSourceData.style)
}
inline std::string* ObsTextSourceData::mutable_style() {
  std::string* _s = _internal_mutable_style();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsTextSourceData.style)
  return _s;
}
inline const std::string& ObsTextSourceData::_internal_style() const {
  return style_.Get();
}
inline void ObsTextSourceData::_internal_set_style(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  style_.Set(value, GetArenaForAllocation());
}
inline std::string* ObsTextSourceData::_internal_mutable_style() {
  _has_bits_[0] |= 0x00000008u;
  return style_.Mutable(GetArenaForAllocation());
}
inline std::string* ObsTextSourceData::release_style() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.ObsTextSourceData.style)
  if (!_internal_has_style()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = style_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (style_.IsDefault()) {
    style_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ObsTextSourceData::set_allocated_style(std::string* style) {
  if (style != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  style_.SetAllocated(style, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (style_.IsDefault()) {
    style_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.ObsTextSourceData.style)
}

// optional int32 size = 6;
inline bool ObsTextSourceData::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ObsTextSourceData::has_size() const {
  return _internal_has_size();
}
inline void ObsTextSourceData::clear_size() {
  size_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline int32_t ObsTextSourceData::_internal_size() const {
  return size_;
}
inline int32_t ObsTextSourceData::size() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsTextSourceData.size)
  return _internal_size();
}
inline void ObsTextSourceData::_internal_set_size(int32_t value) {
  _has_bits_[0] |= 0x00000040u;
  size_ = value;
}
inline void ObsTextSourceData::set_size(int32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsTextSourceData.size)
}

// optional .flremoting.protocol.ObsPropertiesData obs_properties_data = 7;
inline bool ObsTextSourceData::_internal_has_obs_properties_data() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || obs_properties_data_ != nullptr);
  return value;
}
inline bool ObsTextSourceData::has_obs_properties_data() const {
  return _internal_has_obs_properties_data();
}
inline void ObsTextSourceData::clear_obs_properties_data() {
  if (obs_properties_data_ != nullptr) obs_properties_data_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::flremoting::protocol::ObsPropertiesData& ObsTextSourceData::_internal_obs_properties_data() const {
  const ::flremoting::protocol::ObsPropertiesData* p = obs_properties_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::flremoting::protocol::ObsPropertiesData&>(
      ::flremoting::protocol::_ObsPropertiesData_default_instance_);
}
inline const ::flremoting::protocol::ObsPropertiesData& ObsTextSourceData::obs_properties_data() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsTextSourceData.obs_properties_data)
  return _internal_obs_properties_data();
}
inline void ObsTextSourceData::unsafe_arena_set_allocated_obs_properties_data(
    ::flremoting::protocol::ObsPropertiesData* obs_properties_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(obs_properties_data_);
  }
  obs_properties_data_ = obs_properties_data;
  if (obs_properties_data) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flremoting.protocol.ObsTextSourceData.obs_properties_data)
}
inline ::flremoting::protocol::ObsPropertiesData* ObsTextSourceData::release_obs_properties_data() {
  _has_bits_[0] &= ~0x00000010u;
  ::flremoting::protocol::ObsPropertiesData* temp = obs_properties_data_;
  obs_properties_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flremoting::protocol::ObsPropertiesData* ObsTextSourceData::unsafe_arena_release_obs_properties_data() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.ObsTextSourceData.obs_properties_data)
  _has_bits_[0] &= ~0x00000010u;
  ::flremoting::protocol::ObsPropertiesData* temp = obs_properties_data_;
  obs_properties_data_ = nullptr;
  return temp;
}
inline ::flremoting::protocol::ObsPropertiesData* ObsTextSourceData::_internal_mutable_obs_properties_data() {
  _has_bits_[0] |= 0x00000010u;
  if (obs_properties_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::flremoting::protocol::ObsPropertiesData>(GetArenaForAllocation());
    obs_properties_data_ = p;
  }
  return obs_properties_data_;
}
inline ::flremoting::protocol::ObsPropertiesData* ObsTextSourceData::mutable_obs_properties_data() {
  ::flremoting::protocol::ObsPropertiesData* _msg = _internal_mutable_obs_properties_data();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsTextSourceData.obs_properties_data)
  return _msg;
}
inline void ObsTextSourceData::set_allocated_obs_properties_data(::flremoting::protocol::ObsPropertiesData* obs_properties_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete obs_properties_data_;
  }
  if (obs_properties_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(obs_properties_data);
    if (message_arena != submessage_arena) {
      obs_properties_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obs_properties_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  obs_properties_data_ = obs_properties_data;
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.ObsTextSourceData.obs_properties_data)
}

// -------------------------------------------------------------------

// ObsImageSourceData

// optional string source_id = 1;
inline bool ObsImageSourceData::_internal_has_source_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObsImageSourceData::has_source_id() const {
  return _internal_has_source_id();
}
inline void ObsImageSourceData::clear_source_id() {
  source_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ObsImageSourceData::source_id() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsImageSourceData.source_id)
  return _internal_source_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObsImageSourceData::set_source_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 source_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsImageSourceData.source_id)
}
inline std::string* ObsImageSourceData::mutable_source_id() {
  std::string* _s = _internal_mutable_source_id();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsImageSourceData.source_id)
  return _s;
}
inline const std::string& ObsImageSourceData::_internal_source_id() const {
  return source_id_.Get();
}
inline void ObsImageSourceData::_internal_set_source_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  source_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ObsImageSourceData::_internal_mutable_source_id() {
  _has_bits_[0] |= 0x00000001u;
  return source_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ObsImageSourceData::release_source_id() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.ObsImageSourceData.source_id)
  if (!_internal_has_source_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = source_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_id_.IsDefault()) {
    source_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ObsImageSourceData::set_allocated_source_id(std::string* source_id) {
  if (source_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_id_.SetAllocated(source_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_id_.IsDefault()) {
    source_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.ObsImageSourceData.source_id)
}

// optional string source_name = 2;
inline bool ObsImageSourceData::_internal_has_source_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObsImageSourceData::has_source_name() const {
  return _internal_has_source_name();
}
inline void ObsImageSourceData::clear_source_name() {
  source_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ObsImageSourceData::source_name() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsImageSourceData.source_name)
  return _internal_source_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObsImageSourceData::set_source_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 source_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsImageSourceData.source_name)
}
inline std::string* ObsImageSourceData::mutable_source_name() {
  std::string* _s = _internal_mutable_source_name();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsImageSourceData.source_name)
  return _s;
}
inline const std::string& ObsImageSourceData::_internal_source_name() const {
  return source_name_.Get();
}
inline void ObsImageSourceData::_internal_set_source_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  source_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ObsImageSourceData::_internal_mutable_source_name() {
  _has_bits_[0] |= 0x00000002u;
  return source_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ObsImageSourceData::release_source_name() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.ObsImageSourceData.source_name)
  if (!_internal_has_source_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = source_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_name_.IsDefault()) {
    source_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ObsImageSourceData::set_allocated_source_name(std::string* source_name) {
  if (source_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  source_name_.SetAllocated(source_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_name_.IsDefault()) {
    source_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.ObsImageSourceData.source_name)
}

// optional .flremoting.protocol.ObsPropertiesData obs_properties_data = 3;
inline bool ObsImageSourceData::_internal_has_obs_properties_data() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || obs_properties_data_ != nullptr);
  return value;
}
inline bool ObsImageSourceData::has_obs_properties_data() const {
  return _internal_has_obs_properties_data();
}
inline void ObsImageSourceData::clear_obs_properties_data() {
  if (obs_properties_data_ != nullptr) obs_properties_data_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::flremoting::protocol::ObsPropertiesData& ObsImageSourceData::_internal_obs_properties_data() const {
  const ::flremoting::protocol::ObsPropertiesData* p = obs_properties_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::flremoting::protocol::ObsPropertiesData&>(
      ::flremoting::protocol::_ObsPropertiesData_default_instance_);
}
inline const ::flremoting::protocol::ObsPropertiesData& ObsImageSourceData::obs_properties_data() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsImageSourceData.obs_properties_data)
  return _internal_obs_properties_data();
}
inline void ObsImageSourceData::unsafe_arena_set_allocated_obs_properties_data(
    ::flremoting::protocol::ObsPropertiesData* obs_properties_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(obs_properties_data_);
  }
  obs_properties_data_ = obs_properties_data;
  if (obs_properties_data) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flremoting.protocol.ObsImageSourceData.obs_properties_data)
}
inline ::flremoting::protocol::ObsPropertiesData* ObsImageSourceData::release_obs_properties_data() {
  _has_bits_[0] &= ~0x00000004u;
  ::flremoting::protocol::ObsPropertiesData* temp = obs_properties_data_;
  obs_properties_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flremoting::protocol::ObsPropertiesData* ObsImageSourceData::unsafe_arena_release_obs_properties_data() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.ObsImageSourceData.obs_properties_data)
  _has_bits_[0] &= ~0x00000004u;
  ::flremoting::protocol::ObsPropertiesData* temp = obs_properties_data_;
  obs_properties_data_ = nullptr;
  return temp;
}
inline ::flremoting::protocol::ObsPropertiesData* ObsImageSourceData::_internal_mutable_obs_properties_data() {
  _has_bits_[0] |= 0x00000004u;
  if (obs_properties_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::flremoting::protocol::ObsPropertiesData>(GetArenaForAllocation());
    obs_properties_data_ = p;
  }
  return obs_properties_data_;
}
inline ::flremoting::protocol::ObsPropertiesData* ObsImageSourceData::mutable_obs_properties_data() {
  ::flremoting::protocol::ObsPropertiesData* _msg = _internal_mutable_obs_properties_data();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsImageSourceData.obs_properties_data)
  return _msg;
}
inline void ObsImageSourceData::set_allocated_obs_properties_data(::flremoting::protocol::ObsPropertiesData* obs_properties_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete obs_properties_data_;
  }
  if (obs_properties_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(obs_properties_data);
    if (message_arena != submessage_arena) {
      obs_properties_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obs_properties_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  obs_properties_data_ = obs_properties_data;
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.ObsImageSourceData.obs_properties_data)
}

// -------------------------------------------------------------------

// ObsVideoSourceData

// optional string source_id = 1;
inline bool ObsVideoSourceData::_internal_has_source_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObsVideoSourceData::has_source_id() const {
  return _internal_has_source_id();
}
inline void ObsVideoSourceData::clear_source_id() {
  source_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ObsVideoSourceData::source_id() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsVideoSourceData.source_id)
  return _internal_source_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObsVideoSourceData::set_source_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 source_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsVideoSourceData.source_id)
}
inline std::string* ObsVideoSourceData::mutable_source_id() {
  std::string* _s = _internal_mutable_source_id();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsVideoSourceData.source_id)
  return _s;
}
inline const std::string& ObsVideoSourceData::_internal_source_id() const {
  return source_id_.Get();
}
inline void ObsVideoSourceData::_internal_set_source_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  source_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ObsVideoSourceData::_internal_mutable_source_id() {
  _has_bits_[0] |= 0x00000001u;
  return source_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ObsVideoSourceData::release_source_id() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.ObsVideoSourceData.source_id)
  if (!_internal_has_source_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = source_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_id_.IsDefault()) {
    source_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ObsVideoSourceData::set_allocated_source_id(std::string* source_id) {
  if (source_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_id_.SetAllocated(source_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_id_.IsDefault()) {
    source_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.ObsVideoSourceData.source_id)
}

// optional string source_name = 2;
inline bool ObsVideoSourceData::_internal_has_source_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObsVideoSourceData::has_source_name() const {
  return _internal_has_source_name();
}
inline void ObsVideoSourceData::clear_source_name() {
  source_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ObsVideoSourceData::source_name() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsVideoSourceData.source_name)
  return _internal_source_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObsVideoSourceData::set_source_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 source_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsVideoSourceData.source_name)
}
inline std::string* ObsVideoSourceData::mutable_source_name() {
  std::string* _s = _internal_mutable_source_name();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsVideoSourceData.source_name)
  return _s;
}
inline const std::string& ObsVideoSourceData::_internal_source_name() const {
  return source_name_.Get();
}
inline void ObsVideoSourceData::_internal_set_source_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  source_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ObsVideoSourceData::_internal_mutable_source_name() {
  _has_bits_[0] |= 0x00000002u;
  return source_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ObsVideoSourceData::release_source_name() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.ObsVideoSourceData.source_name)
  if (!_internal_has_source_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = source_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_name_.IsDefault()) {
    source_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ObsVideoSourceData::set_allocated_source_name(std::string* source_name) {
  if (source_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  source_name_.SetAllocated(source_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_name_.IsDefault()) {
    source_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.ObsVideoSourceData.source_name)
}

// optional .flremoting.protocol.ObsPropertiesData obs_properties_data = 3;
inline bool ObsVideoSourceData::_internal_has_obs_properties_data() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || obs_properties_data_ != nullptr);
  return value;
}
inline bool ObsVideoSourceData::has_obs_properties_data() const {
  return _internal_has_obs_properties_data();
}
inline void ObsVideoSourceData::clear_obs_properties_data() {
  if (obs_properties_data_ != nullptr) obs_properties_data_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::flremoting::protocol::ObsPropertiesData& ObsVideoSourceData::_internal_obs_properties_data() const {
  const ::flremoting::protocol::ObsPropertiesData* p = obs_properties_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::flremoting::protocol::ObsPropertiesData&>(
      ::flremoting::protocol::_ObsPropertiesData_default_instance_);
}
inline const ::flremoting::protocol::ObsPropertiesData& ObsVideoSourceData::obs_properties_data() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsVideoSourceData.obs_properties_data)
  return _internal_obs_properties_data();
}
inline void ObsVideoSourceData::unsafe_arena_set_allocated_obs_properties_data(
    ::flremoting::protocol::ObsPropertiesData* obs_properties_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(obs_properties_data_);
  }
  obs_properties_data_ = obs_properties_data;
  if (obs_properties_data) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flremoting.protocol.ObsVideoSourceData.obs_properties_data)
}
inline ::flremoting::protocol::ObsPropertiesData* ObsVideoSourceData::release_obs_properties_data() {
  _has_bits_[0] &= ~0x00000004u;
  ::flremoting::protocol::ObsPropertiesData* temp = obs_properties_data_;
  obs_properties_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flremoting::protocol::ObsPropertiesData* ObsVideoSourceData::unsafe_arena_release_obs_properties_data() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.ObsVideoSourceData.obs_properties_data)
  _has_bits_[0] &= ~0x00000004u;
  ::flremoting::protocol::ObsPropertiesData* temp = obs_properties_data_;
  obs_properties_data_ = nullptr;
  return temp;
}
inline ::flremoting::protocol::ObsPropertiesData* ObsVideoSourceData::_internal_mutable_obs_properties_data() {
  _has_bits_[0] |= 0x00000004u;
  if (obs_properties_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::flremoting::protocol::ObsPropertiesData>(GetArenaForAllocation());
    obs_properties_data_ = p;
  }
  return obs_properties_data_;
}
inline ::flremoting::protocol::ObsPropertiesData* ObsVideoSourceData::mutable_obs_properties_data() {
  ::flremoting::protocol::ObsPropertiesData* _msg = _internal_mutable_obs_properties_data();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsVideoSourceData.obs_properties_data)
  return _msg;
}
inline void ObsVideoSourceData::set_allocated_obs_properties_data(::flremoting::protocol::ObsPropertiesData* obs_properties_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete obs_properties_data_;
  }
  if (obs_properties_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(obs_properties_data);
    if (message_arena != submessage_arena) {
      obs_properties_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obs_properties_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  obs_properties_data_ = obs_properties_data;
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.ObsVideoSourceData.obs_properties_data)
}

// -------------------------------------------------------------------

// ObsCaptureSourceWindowInfo

// optional string window = 1;
inline bool ObsCaptureSourceWindowInfo::_internal_has_window() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObsCaptureSourceWindowInfo::has_window() const {
  return _internal_has_window();
}
inline void ObsCaptureSourceWindowInfo::clear_window() {
  window_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ObsCaptureSourceWindowInfo::window() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsCaptureSourceWindowInfo.window)
  return _internal_window();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObsCaptureSourceWindowInfo::set_window(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 window_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsCaptureSourceWindowInfo.window)
}
inline std::string* ObsCaptureSourceWindowInfo::mutable_window() {
  std::string* _s = _internal_mutable_window();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsCaptureSourceWindowInfo.window)
  return _s;
}
inline const std::string& ObsCaptureSourceWindowInfo::_internal_window() const {
  return window_.Get();
}
inline void ObsCaptureSourceWindowInfo::_internal_set_window(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  window_.Set(value, GetArenaForAllocation());
}
inline std::string* ObsCaptureSourceWindowInfo::_internal_mutable_window() {
  _has_bits_[0] |= 0x00000001u;
  return window_.Mutable(GetArenaForAllocation());
}
inline std::string* ObsCaptureSourceWindowInfo::release_window() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.ObsCaptureSourceWindowInfo.window)
  if (!_internal_has_window()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = window_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (window_.IsDefault()) {
    window_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ObsCaptureSourceWindowInfo::set_allocated_window(std::string* window) {
  if (window != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  window_.SetAllocated(window, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (window_.IsDefault()) {
    window_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.ObsCaptureSourceWindowInfo.window)
}

// optional bool cursor = 2;
inline bool ObsCaptureSourceWindowInfo::_internal_has_cursor() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ObsCaptureSourceWindowInfo::has_cursor() const {
  return _internal_has_cursor();
}
inline void ObsCaptureSourceWindowInfo::clear_cursor() {
  cursor_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ObsCaptureSourceWindowInfo::_internal_cursor() const {
  return cursor_;
}
inline bool ObsCaptureSourceWindowInfo::cursor() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsCaptureSourceWindowInfo.cursor)
  return _internal_cursor();
}
inline void ObsCaptureSourceWindowInfo::_internal_set_cursor(bool value) {
  _has_bits_[0] |= 0x00000004u;
  cursor_ = value;
}
inline void ObsCaptureSourceWindowInfo::set_cursor(bool value) {
  _internal_set_cursor(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsCaptureSourceWindowInfo.cursor)
}

// optional bool client_area = 3;
inline bool ObsCaptureSourceWindowInfo::_internal_has_client_area() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ObsCaptureSourceWindowInfo::has_client_area() const {
  return _internal_has_client_area();
}
inline void ObsCaptureSourceWindowInfo::clear_client_area() {
  client_area_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ObsCaptureSourceWindowInfo::_internal_client_area() const {
  return client_area_;
}
inline bool ObsCaptureSourceWindowInfo::client_area() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsCaptureSourceWindowInfo.client_area)
  return _internal_client_area();
}
inline void ObsCaptureSourceWindowInfo::_internal_set_client_area(bool value) {
  _has_bits_[0] |= 0x00000008u;
  client_area_ = value;
}
inline void ObsCaptureSourceWindowInfo::set_client_area(bool value) {
  _internal_set_client_area(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsCaptureSourceWindowInfo.client_area)
}

// optional string office_file = 4;
inline bool ObsCaptureSourceWindowInfo::_internal_has_office_file() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObsCaptureSourceWindowInfo::has_office_file() const {
  return _internal_has_office_file();
}
inline void ObsCaptureSourceWindowInfo::clear_office_file() {
  office_file_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ObsCaptureSourceWindowInfo::office_file() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsCaptureSourceWindowInfo.office_file)
  return _internal_office_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObsCaptureSourceWindowInfo::set_office_file(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 office_file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsCaptureSourceWindowInfo.office_file)
}
inline std::string* ObsCaptureSourceWindowInfo::mutable_office_file() {
  std::string* _s = _internal_mutable_office_file();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsCaptureSourceWindowInfo.office_file)
  return _s;
}
inline const std::string& ObsCaptureSourceWindowInfo::_internal_office_file() const {
  return office_file_.Get();
}
inline void ObsCaptureSourceWindowInfo::_internal_set_office_file(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  office_file_.Set(value, GetArenaForAllocation());
}
inline std::string* ObsCaptureSourceWindowInfo::_internal_mutable_office_file() {
  _has_bits_[0] |= 0x00000002u;
  return office_file_.Mutable(GetArenaForAllocation());
}
inline std::string* ObsCaptureSourceWindowInfo::release_office_file() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.ObsCaptureSourceWindowInfo.office_file)
  if (!_internal_has_office_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = office_file_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (office_file_.IsDefault()) {
    office_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ObsCaptureSourceWindowInfo::set_allocated_office_file(std::string* office_file) {
  if (office_file != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  office_file_.SetAllocated(office_file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (office_file_.IsDefault()) {
    office_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.ObsCaptureSourceWindowInfo.office_file)
}

// -------------------------------------------------------------------

// ObsCaptureSourceGameInfo

// optional string capture_mode = 1;
inline bool ObsCaptureSourceGameInfo::_internal_has_capture_mode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObsCaptureSourceGameInfo::has_capture_mode() const {
  return _internal_has_capture_mode();
}
inline void ObsCaptureSourceGameInfo::clear_capture_mode() {
  capture_mode_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ObsCaptureSourceGameInfo::capture_mode() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsCaptureSourceGameInfo.capture_mode)
  return _internal_capture_mode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObsCaptureSourceGameInfo::set_capture_mode(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 capture_mode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsCaptureSourceGameInfo.capture_mode)
}
inline std::string* ObsCaptureSourceGameInfo::mutable_capture_mode() {
  std::string* _s = _internal_mutable_capture_mode();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsCaptureSourceGameInfo.capture_mode)
  return _s;
}
inline const std::string& ObsCaptureSourceGameInfo::_internal_capture_mode() const {
  return capture_mode_.Get();
}
inline void ObsCaptureSourceGameInfo::_internal_set_capture_mode(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  capture_mode_.Set(value, GetArenaForAllocation());
}
inline std::string* ObsCaptureSourceGameInfo::_internal_mutable_capture_mode() {
  _has_bits_[0] |= 0x00000001u;
  return capture_mode_.Mutable(GetArenaForAllocation());
}
inline std::string* ObsCaptureSourceGameInfo::release_capture_mode() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.ObsCaptureSourceGameInfo.capture_mode)
  if (!_internal_has_capture_mode()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = capture_mode_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (capture_mode_.IsDefault()) {
    capture_mode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ObsCaptureSourceGameInfo::set_allocated_capture_mode(std::string* capture_mode) {
  if (capture_mode != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  capture_mode_.SetAllocated(capture_mode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (capture_mode_.IsDefault()) {
    capture_mode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.ObsCaptureSourceGameInfo.capture_mode)
}

// optional string window = 2;
inline bool ObsCaptureSourceGameInfo::_internal_has_window() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObsCaptureSourceGameInfo::has_window() const {
  return _internal_has_window();
}
inline void ObsCaptureSourceGameInfo::clear_window() {
  window_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ObsCaptureSourceGameInfo::window() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsCaptureSourceGameInfo.window)
  return _internal_window();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObsCaptureSourceGameInfo::set_window(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 window_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsCaptureSourceGameInfo.window)
}
inline std::string* ObsCaptureSourceGameInfo::mutable_window() {
  std::string* _s = _internal_mutable_window();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsCaptureSourceGameInfo.window)
  return _s;
}
inline const std::string& ObsCaptureSourceGameInfo::_internal_window() const {
  return window_.Get();
}
inline void ObsCaptureSourceGameInfo::_internal_set_window(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  window_.Set(value, GetArenaForAllocation());
}
inline std::string* ObsCaptureSourceGameInfo::_internal_mutable_window() {
  _has_bits_[0] |= 0x00000002u;
  return window_.Mutable(GetArenaForAllocation());
}
inline std::string* ObsCaptureSourceGameInfo::release_window() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.ObsCaptureSourceGameInfo.window)
  if (!_internal_has_window()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = window_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (window_.IsDefault()) {
    window_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ObsCaptureSourceGameInfo::set_allocated_window(std::string* window) {
  if (window != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  window_.SetAllocated(window, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (window_.IsDefault()) {
    window_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.ObsCaptureSourceGameInfo.window)
}

// optional bool anti_cheat_hook = 3;
inline bool ObsCaptureSourceGameInfo::_internal_has_anti_cheat_hook() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ObsCaptureSourceGameInfo::has_anti_cheat_hook() const {
  return _internal_has_anti_cheat_hook();
}
inline void ObsCaptureSourceGameInfo::clear_anti_cheat_hook() {
  anti_cheat_hook_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ObsCaptureSourceGameInfo::_internal_anti_cheat_hook() const {
  return anti_cheat_hook_;
}
inline bool ObsCaptureSourceGameInfo::anti_cheat_hook() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsCaptureSourceGameInfo.anti_cheat_hook)
  return _internal_anti_cheat_hook();
}
inline void ObsCaptureSourceGameInfo::_internal_set_anti_cheat_hook(bool value) {
  _has_bits_[0] |= 0x00000004u;
  anti_cheat_hook_ = value;
}
inline void ObsCaptureSourceGameInfo::set_anti_cheat_hook(bool value) {
  _internal_set_anti_cheat_hook(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsCaptureSourceGameInfo.anti_cheat_hook)
}

// optional bool capture_overlays = 4;
inline bool ObsCaptureSourceGameInfo::_internal_has_capture_overlays() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ObsCaptureSourceGameInfo::has_capture_overlays() const {
  return _internal_has_capture_overlays();
}
inline void ObsCaptureSourceGameInfo::clear_capture_overlays() {
  capture_overlays_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ObsCaptureSourceGameInfo::_internal_capture_overlays() const {
  return capture_overlays_;
}
inline bool ObsCaptureSourceGameInfo::capture_overlays() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsCaptureSourceGameInfo.capture_overlays)
  return _internal_capture_overlays();
}
inline void ObsCaptureSourceGameInfo::_internal_set_capture_overlays(bool value) {
  _has_bits_[0] |= 0x00000008u;
  capture_overlays_ = value;
}
inline void ObsCaptureSourceGameInfo::set_capture_overlays(bool value) {
  _internal_set_capture_overlays(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsCaptureSourceGameInfo.capture_overlays)
}

// optional bool capture_cursor = 5;
inline bool ObsCaptureSourceGameInfo::_internal_has_capture_cursor() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ObsCaptureSourceGameInfo::has_capture_cursor() const {
  return _internal_has_capture_cursor();
}
inline void ObsCaptureSourceGameInfo::clear_capture_cursor() {
  capture_cursor_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ObsCaptureSourceGameInfo::_internal_capture_cursor() const {
  return capture_cursor_;
}
inline bool ObsCaptureSourceGameInfo::capture_cursor() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsCaptureSourceGameInfo.capture_cursor)
  return _internal_capture_cursor();
}
inline void ObsCaptureSourceGameInfo::_internal_set_capture_cursor(bool value) {
  _has_bits_[0] |= 0x00000010u;
  capture_cursor_ = value;
}
inline void ObsCaptureSourceGameInfo::set_capture_cursor(bool value) {
  _internal_set_capture_cursor(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsCaptureSourceGameInfo.capture_cursor)
}

// -------------------------------------------------------------------

// ObsCaptureSourceMonitorInfo

// optional int64 monitor = 1;
inline bool ObsCaptureSourceMonitorInfo::_internal_has_monitor() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObsCaptureSourceMonitorInfo::has_monitor() const {
  return _internal_has_monitor();
}
inline void ObsCaptureSourceMonitorInfo::clear_monitor() {
  monitor_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t ObsCaptureSourceMonitorInfo::_internal_monitor() const {
  return monitor_;
}
inline int64_t ObsCaptureSourceMonitorInfo::monitor() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsCaptureSourceMonitorInfo.monitor)
  return _internal_monitor();
}
inline void ObsCaptureSourceMonitorInfo::_internal_set_monitor(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  monitor_ = value;
}
inline void ObsCaptureSourceMonitorInfo::set_monitor(int64_t value) {
  _internal_set_monitor(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsCaptureSourceMonitorInfo.monitor)
}

// optional bool use_rect = 2;
inline bool ObsCaptureSourceMonitorInfo::_internal_has_use_rect() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ObsCaptureSourceMonitorInfo::has_use_rect() const {
  return _internal_has_use_rect();
}
inline void ObsCaptureSourceMonitorInfo::clear_use_rect() {
  use_rect_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ObsCaptureSourceMonitorInfo::_internal_use_rect() const {
  return use_rect_;
}
inline bool ObsCaptureSourceMonitorInfo::use_rect() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsCaptureSourceMonitorInfo.use_rect)
  return _internal_use_rect();
}
inline void ObsCaptureSourceMonitorInfo::_internal_set_use_rect(bool value) {
  _has_bits_[0] |= 0x00000020u;
  use_rect_ = value;
}
inline void ObsCaptureSourceMonitorInfo::set_use_rect(bool value) {
  _internal_set_use_rect(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsCaptureSourceMonitorInfo.use_rect)
}

// optional int64 left = 3;
inline bool ObsCaptureSourceMonitorInfo::_internal_has_left() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObsCaptureSourceMonitorInfo::has_left() const {
  return _internal_has_left();
}
inline void ObsCaptureSourceMonitorInfo::clear_left() {
  left_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t ObsCaptureSourceMonitorInfo::_internal_left() const {
  return left_;
}
inline int64_t ObsCaptureSourceMonitorInfo::left() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsCaptureSourceMonitorInfo.left)
  return _internal_left();
}
inline void ObsCaptureSourceMonitorInfo::_internal_set_left(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  left_ = value;
}
inline void ObsCaptureSourceMonitorInfo::set_left(int64_t value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsCaptureSourceMonitorInfo.left)
}

// optional int64 right = 4;
inline bool ObsCaptureSourceMonitorInfo::_internal_has_right() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ObsCaptureSourceMonitorInfo::has_right() const {
  return _internal_has_right();
}
inline void ObsCaptureSourceMonitorInfo::clear_right() {
  right_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t ObsCaptureSourceMonitorInfo::_internal_right() const {
  return right_;
}
inline int64_t ObsCaptureSourceMonitorInfo::right() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsCaptureSourceMonitorInfo.right)
  return _internal_right();
}
inline void ObsCaptureSourceMonitorInfo::_internal_set_right(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  right_ = value;
}
inline void ObsCaptureSourceMonitorInfo::set_right(int64_t value) {
  _internal_set_right(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsCaptureSourceMonitorInfo.right)
}

// optional int64 top = 5;
inline bool ObsCaptureSourceMonitorInfo::_internal_has_top() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ObsCaptureSourceMonitorInfo::has_top() const {
  return _internal_has_top();
}
inline void ObsCaptureSourceMonitorInfo::clear_top() {
  top_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t ObsCaptureSourceMonitorInfo::_internal_top() const {
  return top_;
}
inline int64_t ObsCaptureSourceMonitorInfo::top() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsCaptureSourceMonitorInfo.top)
  return _internal_top();
}
inline void ObsCaptureSourceMonitorInfo::_internal_set_top(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  top_ = value;
}
inline void ObsCaptureSourceMonitorInfo::set_top(int64_t value) {
  _internal_set_top(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsCaptureSourceMonitorInfo.top)
}

// optional int64 bottom = 6;
inline bool ObsCaptureSourceMonitorInfo::_internal_has_bottom() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ObsCaptureSourceMonitorInfo::has_bottom() const {
  return _internal_has_bottom();
}
inline void ObsCaptureSourceMonitorInfo::clear_bottom() {
  bottom_ = int64_t{0};
  _has_bits_[0] &= ~0x00000010u;
}
inline int64_t ObsCaptureSourceMonitorInfo::_internal_bottom() const {
  return bottom_;
}
inline int64_t ObsCaptureSourceMonitorInfo::bottom() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsCaptureSourceMonitorInfo.bottom)
  return _internal_bottom();
}
inline void ObsCaptureSourceMonitorInfo::_internal_set_bottom(int64_t value) {
  _has_bits_[0] |= 0x00000010u;
  bottom_ = value;
}
inline void ObsCaptureSourceMonitorInfo::set_bottom(int64_t value) {
  _internal_set_bottom(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsCaptureSourceMonitorInfo.bottom)
}

// optional bool capture_cursor = 7;
inline bool ObsCaptureSourceMonitorInfo::_internal_has_capture_cursor() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ObsCaptureSourceMonitorInfo::has_capture_cursor() const {
  return _internal_has_capture_cursor();
}
inline void ObsCaptureSourceMonitorInfo::clear_capture_cursor() {
  capture_cursor_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ObsCaptureSourceMonitorInfo::_internal_capture_cursor() const {
  return capture_cursor_;
}
inline bool ObsCaptureSourceMonitorInfo::capture_cursor() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsCaptureSourceMonitorInfo.capture_cursor)
  return _internal_capture_cursor();
}
inline void ObsCaptureSourceMonitorInfo::_internal_set_capture_cursor(bool value) {
  _has_bits_[0] |= 0x00000040u;
  capture_cursor_ = value;
}
inline void ObsCaptureSourceMonitorInfo::set_capture_cursor(bool value) {
  _internal_set_capture_cursor(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsCaptureSourceMonitorInfo.capture_cursor)
}

// -------------------------------------------------------------------

// ObsCaptureSourceData

// optional string source_id = 1;
inline bool ObsCaptureSourceData::_internal_has_source_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObsCaptureSourceData::has_source_id() const {
  return _internal_has_source_id();
}
inline void ObsCaptureSourceData::clear_source_id() {
  source_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ObsCaptureSourceData::source_id() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsCaptureSourceData.source_id)
  return _internal_source_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObsCaptureSourceData::set_source_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 source_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsCaptureSourceData.source_id)
}
inline std::string* ObsCaptureSourceData::mutable_source_id() {
  std::string* _s = _internal_mutable_source_id();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsCaptureSourceData.source_id)
  return _s;
}
inline const std::string& ObsCaptureSourceData::_internal_source_id() const {
  return source_id_.Get();
}
inline void ObsCaptureSourceData::_internal_set_source_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  source_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ObsCaptureSourceData::_internal_mutable_source_id() {
  _has_bits_[0] |= 0x00000001u;
  return source_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ObsCaptureSourceData::release_source_id() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.ObsCaptureSourceData.source_id)
  if (!_internal_has_source_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = source_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_id_.IsDefault()) {
    source_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ObsCaptureSourceData::set_allocated_source_id(std::string* source_id) {
  if (source_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_id_.SetAllocated(source_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_id_.IsDefault()) {
    source_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.ObsCaptureSourceData.source_id)
}

// optional string source_name = 2;
inline bool ObsCaptureSourceData::_internal_has_source_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObsCaptureSourceData::has_source_name() const {
  return _internal_has_source_name();
}
inline void ObsCaptureSourceData::clear_source_name() {
  source_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ObsCaptureSourceData::source_name() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsCaptureSourceData.source_name)
  return _internal_source_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObsCaptureSourceData::set_source_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 source_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsCaptureSourceData.source_name)
}
inline std::string* ObsCaptureSourceData::mutable_source_name() {
  std::string* _s = _internal_mutable_source_name();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsCaptureSourceData.source_name)
  return _s;
}
inline const std::string& ObsCaptureSourceData::_internal_source_name() const {
  return source_name_.Get();
}
inline void ObsCaptureSourceData::_internal_set_source_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  source_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ObsCaptureSourceData::_internal_mutable_source_name() {
  _has_bits_[0] |= 0x00000002u;
  return source_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ObsCaptureSourceData::release_source_name() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.ObsCaptureSourceData.source_name)
  if (!_internal_has_source_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = source_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_name_.IsDefault()) {
    source_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ObsCaptureSourceData::set_allocated_source_name(std::string* source_name) {
  if (source_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  source_name_.SetAllocated(source_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_name_.IsDefault()) {
    source_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.ObsCaptureSourceData.source_name)
}

// optional int64 method = 3;
inline bool ObsCaptureSourceData::_internal_has_method() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ObsCaptureSourceData::has_method() const {
  return _internal_has_method();
}
inline void ObsCaptureSourceData::clear_method() {
  method_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t ObsCaptureSourceData::_internal_method() const {
  return method_;
}
inline int64_t ObsCaptureSourceData::method() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsCaptureSourceData.method)
  return _internal_method();
}
inline void ObsCaptureSourceData::_internal_set_method(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  method_ = value;
}
inline void ObsCaptureSourceData::set_method(int64_t value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsCaptureSourceData.method)
}

// optional bytes payload = 4;
inline bool ObsCaptureSourceData::_internal_has_payload() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ObsCaptureSourceData::has_payload() const {
  return _internal_has_payload();
}
inline void ObsCaptureSourceData::clear_payload() {
  payload_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ObsCaptureSourceData::payload() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsCaptureSourceData.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObsCaptureSourceData::set_payload(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 payload_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsCaptureSourceData.payload)
}
inline std::string* ObsCaptureSourceData::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsCaptureSourceData.payload)
  return _s;
}
inline const std::string& ObsCaptureSourceData::_internal_payload() const {
  return payload_.Get();
}
inline void ObsCaptureSourceData::_internal_set_payload(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  payload_.Set(value, GetArenaForAllocation());
}
inline std::string* ObsCaptureSourceData::_internal_mutable_payload() {
  _has_bits_[0] |= 0x00000004u;
  return payload_.Mutable(GetArenaForAllocation());
}
inline std::string* ObsCaptureSourceData::release_payload() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.ObsCaptureSourceData.payload)
  if (!_internal_has_payload()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = payload_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (payload_.IsDefault()) {
    payload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ObsCaptureSourceData::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  payload_.SetAllocated(payload, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (payload_.IsDefault()) {
    payload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.ObsCaptureSourceData.payload)
}

// optional int64 priority = 5;
inline bool ObsCaptureSourceData::_internal_has_priority() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ObsCaptureSourceData::has_priority() const {
  return _internal_has_priority();
}
inline void ObsCaptureSourceData::clear_priority() {
  priority_ = int64_t{0};
  _has_bits_[0] &= ~0x00000010u;
}
inline int64_t ObsCaptureSourceData::_internal_priority() const {
  return priority_;
}
inline int64_t ObsCaptureSourceData::priority() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsCaptureSourceData.priority)
  return _internal_priority();
}
inline void ObsCaptureSourceData::_internal_set_priority(int64_t value) {
  _has_bits_[0] |= 0x00000010u;
  priority_ = value;
}
inline void ObsCaptureSourceData::set_priority(int64_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsCaptureSourceData.priority)
}

// optional bool use_wildcards = 6;
inline bool ObsCaptureSourceData::_internal_has_use_wildcards() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ObsCaptureSourceData::has_use_wildcards() const {
  return _internal_has_use_wildcards();
}
inline void ObsCaptureSourceData::clear_use_wildcards() {
  use_wildcards_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ObsCaptureSourceData::_internal_use_wildcards() const {
  return use_wildcards_;
}
inline bool ObsCaptureSourceData::use_wildcards() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsCaptureSourceData.use_wildcards)
  return _internal_use_wildcards();
}
inline void ObsCaptureSourceData::_internal_set_use_wildcards(bool value) {
  _has_bits_[0] |= 0x00000020u;
  use_wildcards_ = value;
}
inline void ObsCaptureSourceData::set_use_wildcards(bool value) {
  _internal_set_use_wildcards(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsCaptureSourceData.use_wildcards)
}

// optional bool compatibility = 7;
inline bool ObsCaptureSourceData::_internal_has_compatibility() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ObsCaptureSourceData::has_compatibility() const {
  return _internal_has_compatibility();
}
inline void ObsCaptureSourceData::clear_compatibility() {
  compatibility_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ObsCaptureSourceData::_internal_compatibility() const {
  return compatibility_;
}
inline bool ObsCaptureSourceData::compatibility() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsCaptureSourceData.compatibility)
  return _internal_compatibility();
}
inline void ObsCaptureSourceData::_internal_set_compatibility(bool value) {
  _has_bits_[0] |= 0x00000040u;
  compatibility_ = value;
}
inline void ObsCaptureSourceData::set_compatibility(bool value) {
  _internal_set_compatibility(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsCaptureSourceData.compatibility)
}

// -------------------------------------------------------------------

// ObsPhoneCastingSourceData

// optional string source_id = 1;
inline bool ObsPhoneCastingSourceData::_internal_has_source_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObsPhoneCastingSourceData::has_source_id() const {
  return _internal_has_source_id();
}
inline void ObsPhoneCastingSourceData::clear_source_id() {
  source_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ObsPhoneCastingSourceData::source_id() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsPhoneCastingSourceData.source_id)
  return _internal_source_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObsPhoneCastingSourceData::set_source_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 source_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsPhoneCastingSourceData.source_id)
}
inline std::string* ObsPhoneCastingSourceData::mutable_source_id() {
  std::string* _s = _internal_mutable_source_id();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsPhoneCastingSourceData.source_id)
  return _s;
}
inline const std::string& ObsPhoneCastingSourceData::_internal_source_id() const {
  return source_id_.Get();
}
inline void ObsPhoneCastingSourceData::_internal_set_source_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  source_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ObsPhoneCastingSourceData::_internal_mutable_source_id() {
  _has_bits_[0] |= 0x00000001u;
  return source_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ObsPhoneCastingSourceData::release_source_id() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.ObsPhoneCastingSourceData.source_id)
  if (!_internal_has_source_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = source_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_id_.IsDefault()) {
    source_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ObsPhoneCastingSourceData::set_allocated_source_id(std::string* source_id) {
  if (source_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_id_.SetAllocated(source_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_id_.IsDefault()) {
    source_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.ObsPhoneCastingSourceData.source_id)
}

// optional string source_name = 2;
inline bool ObsPhoneCastingSourceData::_internal_has_source_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObsPhoneCastingSourceData::has_source_name() const {
  return _internal_has_source_name();
}
inline void ObsPhoneCastingSourceData::clear_source_name() {
  source_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ObsPhoneCastingSourceData::source_name() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsPhoneCastingSourceData.source_name)
  return _internal_source_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObsPhoneCastingSourceData::set_source_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 source_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsPhoneCastingSourceData.source_name)
}
inline std::string* ObsPhoneCastingSourceData::mutable_source_name() {
  std::string* _s = _internal_mutable_source_name();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsPhoneCastingSourceData.source_name)
  return _s;
}
inline const std::string& ObsPhoneCastingSourceData::_internal_source_name() const {
  return source_name_.Get();
}
inline void ObsPhoneCastingSourceData::_internal_set_source_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  source_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ObsPhoneCastingSourceData::_internal_mutable_source_name() {
  _has_bits_[0] |= 0x00000002u;
  return source_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ObsPhoneCastingSourceData::release_source_name() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.ObsPhoneCastingSourceData.source_name)
  if (!_internal_has_source_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = source_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_name_.IsDefault()) {
    source_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ObsPhoneCastingSourceData::set_allocated_source_name(std::string* source_name) {
  if (source_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  source_name_.SetAllocated(source_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_name_.IsDefault()) {
    source_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.ObsPhoneCastingSourceData.source_name)
}

// optional int64 method = 3;
inline bool ObsPhoneCastingSourceData::_internal_has_method() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ObsPhoneCastingSourceData::has_method() const {
  return _internal_has_method();
}
inline void ObsPhoneCastingSourceData::clear_method() {
  method_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t ObsPhoneCastingSourceData::_internal_method() const {
  return method_;
}
inline int64_t ObsPhoneCastingSourceData::method() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsPhoneCastingSourceData.method)
  return _internal_method();
}
inline void ObsPhoneCastingSourceData::_internal_set_method(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  method_ = value;
}
inline void ObsPhoneCastingSourceData::set_method(int64_t value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsPhoneCastingSourceData.method)
}

// optional bool hardware_decode = 4;
inline bool ObsPhoneCastingSourceData::_internal_has_hardware_decode() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ObsPhoneCastingSourceData::has_hardware_decode() const {
  return _internal_has_hardware_decode();
}
inline void ObsPhoneCastingSourceData::clear_hardware_decode() {
  hardware_decode_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ObsPhoneCastingSourceData::_internal_hardware_decode() const {
  return hardware_decode_;
}
inline bool ObsPhoneCastingSourceData::hardware_decode() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsPhoneCastingSourceData.hardware_decode)
  return _internal_hardware_decode();
}
inline void ObsPhoneCastingSourceData::_internal_set_hardware_decode(bool value) {
  _has_bits_[0] |= 0x00000040u;
  hardware_decode_ = value;
}
inline void ObsPhoneCastingSourceData::set_hardware_decode(bool value) {
  _internal_set_hardware_decode(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsPhoneCastingSourceData.hardware_decode)
}

// optional bool cpu_status = 5;
inline bool ObsPhoneCastingSourceData::_internal_has_cpu_status() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ObsPhoneCastingSourceData::has_cpu_status() const {
  return _internal_has_cpu_status();
}
inline void ObsPhoneCastingSourceData::clear_cpu_status() {
  cpu_status_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool ObsPhoneCastingSourceData::_internal_cpu_status() const {
  return cpu_status_;
}
inline bool ObsPhoneCastingSourceData::cpu_status() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsPhoneCastingSourceData.cpu_status)
  return _internal_cpu_status();
}
inline void ObsPhoneCastingSourceData::_internal_set_cpu_status(bool value) {
  _has_bits_[0] |= 0x00000080u;
  cpu_status_ = value;
}
inline void ObsPhoneCastingSourceData::set_cpu_status(bool value) {
  _internal_set_cpu_status(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsPhoneCastingSourceData.cpu_status)
}

// optional bool force_update = 6;
inline bool ObsPhoneCastingSourceData::_internal_has_force_update() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ObsPhoneCastingSourceData::has_force_update() const {
  return _internal_has_force_update();
}
inline void ObsPhoneCastingSourceData::clear_force_update() {
  force_update_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool ObsPhoneCastingSourceData::_internal_force_update() const {
  return force_update_;
}
inline bool ObsPhoneCastingSourceData::force_update() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsPhoneCastingSourceData.force_update)
  return _internal_force_update();
}
inline void ObsPhoneCastingSourceData::_internal_set_force_update(bool value) {
  _has_bits_[0] |= 0x00000100u;
  force_update_ = value;
}
inline void ObsPhoneCastingSourceData::set_force_update(bool value) {
  _internal_set_force_update(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsPhoneCastingSourceData.force_update)
}

// optional int64 audio_channel = 7;
inline bool ObsPhoneCastingSourceData::_internal_has_audio_channel() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ObsPhoneCastingSourceData::has_audio_channel() const {
  return _internal_has_audio_channel();
}
inline void ObsPhoneCastingSourceData::clear_audio_channel() {
  audio_channel_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t ObsPhoneCastingSourceData::_internal_audio_channel() const {
  return audio_channel_;
}
inline int64_t ObsPhoneCastingSourceData::audio_channel() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsPhoneCastingSourceData.audio_channel)
  return _internal_audio_channel();
}
inline void ObsPhoneCastingSourceData::_internal_set_audio_channel(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  audio_channel_ = value;
}
inline void ObsPhoneCastingSourceData::set_audio_channel(int64_t value) {
  _internal_set_audio_channel(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsPhoneCastingSourceData.audio_channel)
}

// optional int64 audio_sample_rate = 8;
inline bool ObsPhoneCastingSourceData::_internal_has_audio_sample_rate() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ObsPhoneCastingSourceData::has_audio_sample_rate() const {
  return _internal_has_audio_sample_rate();
}
inline void ObsPhoneCastingSourceData::clear_audio_sample_rate() {
  audio_sample_rate_ = int64_t{0};
  _has_bits_[0] &= ~0x00000010u;
}
inline int64_t ObsPhoneCastingSourceData::_internal_audio_sample_rate() const {
  return audio_sample_rate_;
}
inline int64_t ObsPhoneCastingSourceData::audio_sample_rate() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsPhoneCastingSourceData.audio_sample_rate)
  return _internal_audio_sample_rate();
}
inline void ObsPhoneCastingSourceData::_internal_set_audio_sample_rate(int64_t value) {
  _has_bits_[0] |= 0x00000010u;
  audio_sample_rate_ = value;
}
inline void ObsPhoneCastingSourceData::set_audio_sample_rate(int64_t value) {
  _internal_set_audio_sample_rate(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsPhoneCastingSourceData.audio_sample_rate)
}

// optional int64 casting_frame = 9;
inline bool ObsPhoneCastingSourceData::_internal_has_casting_frame() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ObsPhoneCastingSourceData::has_casting_frame() const {
  return _internal_has_casting_frame();
}
inline void ObsPhoneCastingSourceData::clear_casting_frame() {
  casting_frame_ = int64_t{0};
  _has_bits_[0] &= ~0x00000020u;
}
inline int64_t ObsPhoneCastingSourceData::_internal_casting_frame() const {
  return casting_frame_;
}
inline int64_t ObsPhoneCastingSourceData::casting_frame() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsPhoneCastingSourceData.casting_frame)
  return _internal_casting_frame();
}
inline void ObsPhoneCastingSourceData::_internal_set_casting_frame(int64_t value) {
  _has_bits_[0] |= 0x00000020u;
  casting_frame_ = value;
}
inline void ObsPhoneCastingSourceData::set_casting_frame(int64_t value) {
  _internal_set_casting_frame(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsPhoneCastingSourceData.casting_frame)
}

// -------------------------------------------------------------------

// ObsCameraSourceData

// optional string source_id = 1;
inline bool ObsCameraSourceData::_internal_has_source_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObsCameraSourceData::has_source_id() const {
  return _internal_has_source_id();
}
inline void ObsCameraSourceData::clear_source_id() {
  source_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ObsCameraSourceData::source_id() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsCameraSourceData.source_id)
  return _internal_source_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObsCameraSourceData::set_source_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 source_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsCameraSourceData.source_id)
}
inline std::string* ObsCameraSourceData::mutable_source_id() {
  std::string* _s = _internal_mutable_source_id();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsCameraSourceData.source_id)
  return _s;
}
inline const std::string& ObsCameraSourceData::_internal_source_id() const {
  return source_id_.Get();
}
inline void ObsCameraSourceData::_internal_set_source_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  source_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ObsCameraSourceData::_internal_mutable_source_id() {
  _has_bits_[0] |= 0x00000001u;
  return source_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ObsCameraSourceData::release_source_id() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.ObsCameraSourceData.source_id)
  if (!_internal_has_source_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = source_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_id_.IsDefault()) {
    source_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ObsCameraSourceData::set_allocated_source_id(std::string* source_id) {
  if (source_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_id_.SetAllocated(source_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_id_.IsDefault()) {
    source_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.ObsCameraSourceData.source_id)
}

// optional string source_name = 2;
inline bool ObsCameraSourceData::_internal_has_source_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObsCameraSourceData::has_source_name() const {
  return _internal_has_source_name();
}
inline void ObsCameraSourceData::clear_source_name() {
  source_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ObsCameraSourceData::source_name() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsCameraSourceData.source_name)
  return _internal_source_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObsCameraSourceData::set_source_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 source_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsCameraSourceData.source_name)
}
inline std::string* ObsCameraSourceData::mutable_source_name() {
  std::string* _s = _internal_mutable_source_name();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsCameraSourceData.source_name)
  return _s;
}
inline const std::string& ObsCameraSourceData::_internal_source_name() const {
  return source_name_.Get();
}
inline void ObsCameraSourceData::_internal_set_source_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  source_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ObsCameraSourceData::_internal_mutable_source_name() {
  _has_bits_[0] |= 0x00000002u;
  return source_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ObsCameraSourceData::release_source_name() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.ObsCameraSourceData.source_name)
  if (!_internal_has_source_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = source_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_name_.IsDefault()) {
    source_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ObsCameraSourceData::set_allocated_source_name(std::string* source_name) {
  if (source_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  source_name_.SetAllocated(source_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_name_.IsDefault()) {
    source_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.ObsCameraSourceData.source_name)
}

// optional uint32 source_hwnd = 3;
inline bool ObsCameraSourceData::_internal_has_source_hwnd() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ObsCameraSourceData::has_source_hwnd() const {
  return _internal_has_source_hwnd();
}
inline void ObsCameraSourceData::clear_source_hwnd() {
  source_hwnd_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t ObsCameraSourceData::_internal_source_hwnd() const {
  return source_hwnd_;
}
inline uint32_t ObsCameraSourceData::source_hwnd() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsCameraSourceData.source_hwnd)
  return _internal_source_hwnd();
}
inline void ObsCameraSourceData::_internal_set_source_hwnd(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  source_hwnd_ = value;
}
inline void ObsCameraSourceData::set_source_hwnd(uint32_t value) {
  _internal_set_source_hwnd(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsCameraSourceData.source_hwnd)
}

// optional .flremoting.protocol.ObsPropertiesData obs_properties_data = 4;
inline bool ObsCameraSourceData::_internal_has_obs_properties_data() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || obs_properties_data_ != nullptr);
  return value;
}
inline bool ObsCameraSourceData::has_obs_properties_data() const {
  return _internal_has_obs_properties_data();
}
inline void ObsCameraSourceData::clear_obs_properties_data() {
  if (obs_properties_data_ != nullptr) obs_properties_data_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::flremoting::protocol::ObsPropertiesData& ObsCameraSourceData::_internal_obs_properties_data() const {
  const ::flremoting::protocol::ObsPropertiesData* p = obs_properties_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::flremoting::protocol::ObsPropertiesData&>(
      ::flremoting::protocol::_ObsPropertiesData_default_instance_);
}
inline const ::flremoting::protocol::ObsPropertiesData& ObsCameraSourceData::obs_properties_data() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsCameraSourceData.obs_properties_data)
  return _internal_obs_properties_data();
}
inline void ObsCameraSourceData::unsafe_arena_set_allocated_obs_properties_data(
    ::flremoting::protocol::ObsPropertiesData* obs_properties_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(obs_properties_data_);
  }
  obs_properties_data_ = obs_properties_data;
  if (obs_properties_data) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flremoting.protocol.ObsCameraSourceData.obs_properties_data)
}
inline ::flremoting::protocol::ObsPropertiesData* ObsCameraSourceData::release_obs_properties_data() {
  _has_bits_[0] &= ~0x00000004u;
  ::flremoting::protocol::ObsPropertiesData* temp = obs_properties_data_;
  obs_properties_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flremoting::protocol::ObsPropertiesData* ObsCameraSourceData::unsafe_arena_release_obs_properties_data() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.ObsCameraSourceData.obs_properties_data)
  _has_bits_[0] &= ~0x00000004u;
  ::flremoting::protocol::ObsPropertiesData* temp = obs_properties_data_;
  obs_properties_data_ = nullptr;
  return temp;
}
inline ::flremoting::protocol::ObsPropertiesData* ObsCameraSourceData::_internal_mutable_obs_properties_data() {
  _has_bits_[0] |= 0x00000004u;
  if (obs_properties_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::flremoting::protocol::ObsPropertiesData>(GetArenaForAllocation());
    obs_properties_data_ = p;
  }
  return obs_properties_data_;
}
inline ::flremoting::protocol::ObsPropertiesData* ObsCameraSourceData::mutable_obs_properties_data() {
  ::flremoting::protocol::ObsPropertiesData* _msg = _internal_mutable_obs_properties_data();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsCameraSourceData.obs_properties_data)
  return _msg;
}
inline void ObsCameraSourceData::set_allocated_obs_properties_data(::flremoting::protocol::ObsPropertiesData* obs_properties_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete obs_properties_data_;
  }
  if (obs_properties_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(obs_properties_data);
    if (message_arena != submessage_arena) {
      obs_properties_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obs_properties_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  obs_properties_data_ = obs_properties_data;
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.ObsCameraSourceData.obs_properties_data)
}

// optional bool save_source = 5;
inline bool ObsCameraSourceData::_internal_has_save_source() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ObsCameraSourceData::has_save_source() const {
  return _internal_has_save_source();
}
inline void ObsCameraSourceData::clear_save_source() {
  save_source_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ObsCameraSourceData::_internal_save_source() const {
  return save_source_;
}
inline bool ObsCameraSourceData::save_source() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsCameraSourceData.save_source)
  return _internal_save_source();
}
inline void ObsCameraSourceData::_internal_set_save_source(bool value) {
  _has_bits_[0] |= 0x00000010u;
  save_source_ = value;
}
inline void ObsCameraSourceData::set_save_source(bool value) {
  _internal_set_save_source(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsCameraSourceData.save_source)
}

// optional bool change_id = 6;
inline bool ObsCameraSourceData::_internal_has_change_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ObsCameraSourceData::has_change_id() const {
  return _internal_has_change_id();
}
inline void ObsCameraSourceData::clear_change_id() {
  change_id_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ObsCameraSourceData::_internal_change_id() const {
  return change_id_;
}
inline bool ObsCameraSourceData::change_id() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsCameraSourceData.change_id)
  return _internal_change_id();
}
inline void ObsCameraSourceData::_internal_set_change_id(bool value) {
  _has_bits_[0] |= 0x00000020u;
  change_id_ = value;
}
inline void ObsCameraSourceData::set_change_id(bool value) {
  _internal_set_change_id(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsCameraSourceData.change_id)
}

// -------------------------------------------------------------------

// InputVolumeData

// optional int32 value = 1;
inline bool InputVolumeData::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InputVolumeData::has_value() const {
  return _internal_has_value();
}
inline void InputVolumeData::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t InputVolumeData::_internal_value() const {
  return value_;
}
inline int32_t InputVolumeData::value() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.InputVolumeData.value)
  return _internal_value();
}
inline void InputVolumeData::_internal_set_value(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  value_ = value;
}
inline void InputVolumeData::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.InputVolumeData.value)
}

// -------------------------------------------------------------------

// OutputVolumeData

// optional int32 value = 1;
inline bool OutputVolumeData::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OutputVolumeData::has_value() const {
  return _internal_has_value();
}
inline void OutputVolumeData::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t OutputVolumeData::_internal_value() const {
  return value_;
}
inline int32_t OutputVolumeData::value() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.OutputVolumeData.value)
  return _internal_value();
}
inline void OutputVolumeData::_internal_set_value(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  value_ = value;
}
inline void OutputVolumeData::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.OutputVolumeData.value)
}

// -------------------------------------------------------------------

// ObsItemMessage

// optional bool item_visible = 1;
inline bool ObsItemMessage::_internal_has_item_visible() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ObsItemMessage::has_item_visible() const {
  return _internal_has_item_visible();
}
inline void ObsItemMessage::clear_item_visible() {
  item_visible_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ObsItemMessage::_internal_item_visible() const {
  return item_visible_;
}
inline bool ObsItemMessage::item_visible() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsItemMessage.item_visible)
  return _internal_item_visible();
}
inline void ObsItemMessage::_internal_set_item_visible(bool value) {
  _has_bits_[0] |= 0x00000010u;
  item_visible_ = value;
}
inline void ObsItemMessage::set_item_visible(bool value) {
  _internal_set_item_visible(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsItemMessage.item_visible)
}

// optional int64 item_id = 2;
inline bool ObsItemMessage::_internal_has_item_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ObsItemMessage::has_item_id() const {
  return _internal_has_item_id();
}
inline void ObsItemMessage::clear_item_id() {
  item_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t ObsItemMessage::_internal_item_id() const {
  return item_id_;
}
inline int64_t ObsItemMessage::item_id() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsItemMessage.item_id)
  return _internal_item_id();
}
inline void ObsItemMessage::_internal_set_item_id(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  item_id_ = value;
}
inline void ObsItemMessage::set_item_id(int64_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsItemMessage.item_id)
}

// optional string source_type = 3;
inline bool ObsItemMessage::_internal_has_source_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObsItemMessage::has_source_type() const {
  return _internal_has_source_type();
}
inline void ObsItemMessage::clear_source_type() {
  source_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ObsItemMessage::source_type() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsItemMessage.source_type)
  return _internal_source_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObsItemMessage::set_source_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 source_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsItemMessage.source_type)
}
inline std::string* ObsItemMessage::mutable_source_type() {
  std::string* _s = _internal_mutable_source_type();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsItemMessage.source_type)
  return _s;
}
inline const std::string& ObsItemMessage::_internal_source_type() const {
  return source_type_.Get();
}
inline void ObsItemMessage::_internal_set_source_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  source_type_.Set(value, GetArenaForAllocation());
}
inline std::string* ObsItemMessage::_internal_mutable_source_type() {
  _has_bits_[0] |= 0x00000001u;
  return source_type_.Mutable(GetArenaForAllocation());
}
inline std::string* ObsItemMessage::release_source_type() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.ObsItemMessage.source_type)
  if (!_internal_has_source_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = source_type_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_type_.IsDefault()) {
    source_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ObsItemMessage::set_allocated_source_type(std::string* source_type) {
  if (source_type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_type_.SetAllocated(source_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_type_.IsDefault()) {
    source_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.ObsItemMessage.source_type)
}

// optional string source_name = 4;
inline bool ObsItemMessage::_internal_has_source_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObsItemMessage::has_source_name() const {
  return _internal_has_source_name();
}
inline void ObsItemMessage::clear_source_name() {
  source_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ObsItemMessage::source_name() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsItemMessage.source_name)
  return _internal_source_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObsItemMessage::set_source_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 source_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsItemMessage.source_name)
}
inline std::string* ObsItemMessage::mutable_source_name() {
  std::string* _s = _internal_mutable_source_name();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsItemMessage.source_name)
  return _s;
}
inline const std::string& ObsItemMessage::_internal_source_name() const {
  return source_name_.Get();
}
inline void ObsItemMessage::_internal_set_source_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  source_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ObsItemMessage::_internal_mutable_source_name() {
  _has_bits_[0] |= 0x00000002u;
  return source_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ObsItemMessage::release_source_name() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.ObsItemMessage.source_name)
  if (!_internal_has_source_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = source_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_name_.IsDefault()) {
    source_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ObsItemMessage::set_allocated_source_name(std::string* source_name) {
  if (source_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  source_name_.SetAllocated(source_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_name_.IsDefault()) {
    source_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.ObsItemMessage.source_name)
}

// optional uint32 source_width = 5;
inline bool ObsItemMessage::_internal_has_source_width() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ObsItemMessage::has_source_width() const {
  return _internal_has_source_width();
}
inline void ObsItemMessage::clear_source_width() {
  source_width_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t ObsItemMessage::_internal_source_width() const {
  return source_width_;
}
inline uint32_t ObsItemMessage::source_width() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsItemMessage.source_width)
  return _internal_source_width();
}
inline void ObsItemMessage::_internal_set_source_width(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  source_width_ = value;
}
inline void ObsItemMessage::set_source_width(uint32_t value) {
  _internal_set_source_width(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsItemMessage.source_width)
}

// optional uint32 source_height = 6;
inline bool ObsItemMessage::_internal_has_source_height() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ObsItemMessage::has_source_height() const {
  return _internal_has_source_height();
}
inline void ObsItemMessage::clear_source_height() {
  source_height_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t ObsItemMessage::_internal_source_height() const {
  return source_height_;
}
inline uint32_t ObsItemMessage::source_height() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsItemMessage.source_height)
  return _internal_source_height();
}
inline void ObsItemMessage::_internal_set_source_height(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  source_height_ = value;
}
inline void ObsItemMessage::set_source_height(uint32_t value) {
  _internal_set_source_height(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsItemMessage.source_height)
}

// optional bytes source_data = 7;
inline bool ObsItemMessage::_internal_has_source_data() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ObsItemMessage::has_source_data() const {
  return _internal_has_source_data();
}
inline void ObsItemMessage::clear_source_data() {
  source_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ObsItemMessage::source_data() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsItemMessage.source_data)
  return _internal_source_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObsItemMessage::set_source_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 source_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsItemMessage.source_data)
}
inline std::string* ObsItemMessage::mutable_source_data() {
  std::string* _s = _internal_mutable_source_data();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsItemMessage.source_data)
  return _s;
}
inline const std::string& ObsItemMessage::_internal_source_data() const {
  return source_data_.Get();
}
inline void ObsItemMessage::_internal_set_source_data(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  source_data_.Set(value, GetArenaForAllocation());
}
inline std::string* ObsItemMessage::_internal_mutable_source_data() {
  _has_bits_[0] |= 0x00000004u;
  return source_data_.Mutable(GetArenaForAllocation());
}
inline std::string* ObsItemMessage::release_source_data() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.ObsItemMessage.source_data)
  if (!_internal_has_source_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = source_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_data_.IsDefault()) {
    source_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ObsItemMessage::set_allocated_source_data(std::string* source_data) {
  if (source_data != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  source_data_.SetAllocated(source_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_data_.IsDefault()) {
    source_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.ObsItemMessage.source_data)
}

// optional bool item_lock_status = 8;
inline bool ObsItemMessage::_internal_has_item_lock_status() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ObsItemMessage::has_item_lock_status() const {
  return _internal_has_item_lock_status();
}
inline void ObsItemMessage::clear_item_lock_status() {
  item_lock_status_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ObsItemMessage::_internal_item_lock_status() const {
  return item_lock_status_;
}
inline bool ObsItemMessage::item_lock_status() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsItemMessage.item_lock_status)
  return _internal_item_lock_status();
}
inline void ObsItemMessage::_internal_set_item_lock_status(bool value) {
  _has_bits_[0] |= 0x00000020u;
  item_lock_status_ = value;
}
inline void ObsItemMessage::set_item_lock_status(bool value) {
  _internal_set_item_lock_status(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsItemMessage.item_lock_status)
}

// -------------------------------------------------------------------

// ObsCursorMessage

// optional bool cursor_status = 1;
inline bool ObsCursorMessage::_internal_has_cursor_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObsCursorMessage::has_cursor_status() const {
  return _internal_has_cursor_status();
}
inline void ObsCursorMessage::clear_cursor_status() {
  cursor_status_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ObsCursorMessage::_internal_cursor_status() const {
  return cursor_status_;
}
inline bool ObsCursorMessage::cursor_status() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsCursorMessage.cursor_status)
  return _internal_cursor_status();
}
inline void ObsCursorMessage::_internal_set_cursor_status(bool value) {
  _has_bits_[0] |= 0x00000001u;
  cursor_status_ = value;
}
inline void ObsCursorMessage::set_cursor_status(bool value) {
  _internal_set_cursor_status(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsCursorMessage.cursor_status)
}

// -------------------------------------------------------------------

// ObsItemEditMessage

// optional int64 item_id = 1;
inline bool ObsItemEditMessage::_internal_has_item_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObsItemEditMessage::has_item_id() const {
  return _internal_has_item_id();
}
inline void ObsItemEditMessage::clear_item_id() {
  item_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t ObsItemEditMessage::_internal_item_id() const {
  return item_id_;
}
inline int64_t ObsItemEditMessage::item_id() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsItemEditMessage.item_id)
  return _internal_item_id();
}
inline void ObsItemEditMessage::_internal_set_item_id(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  item_id_ = value;
}
inline void ObsItemEditMessage::set_item_id(int64_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsItemEditMessage.item_id)
}

// optional .flremoting.protocol.ObsItemActionType action_type = 2;
inline bool ObsItemEditMessage::_internal_has_action_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObsItemEditMessage::has_action_type() const {
  return _internal_has_action_type();
}
inline void ObsItemEditMessage::clear_action_type() {
  action_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::flremoting::protocol::ObsItemActionType ObsItemEditMessage::_internal_action_type() const {
  return static_cast< ::flremoting::protocol::ObsItemActionType >(action_type_);
}
inline ::flremoting::protocol::ObsItemActionType ObsItemEditMessage::action_type() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsItemEditMessage.action_type)
  return _internal_action_type();
}
inline void ObsItemEditMessage::_internal_set_action_type(::flremoting::protocol::ObsItemActionType value) {
  assert(::flremoting::protocol::ObsItemActionType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  action_type_ = value;
}
inline void ObsItemEditMessage::set_action_type(::flremoting::protocol::ObsItemActionType value) {
  _internal_set_action_type(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsItemEditMessage.action_type)
}

// -------------------------------------------------------------------

// ObsItemEditMessageReq

// optional .flremoting.protocol.ObsItemEditMessage edit_msg = 1;
inline bool ObsItemEditMessageReq::_internal_has_edit_msg() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || edit_msg_ != nullptr);
  return value;
}
inline bool ObsItemEditMessageReq::has_edit_msg() const {
  return _internal_has_edit_msg();
}
inline void ObsItemEditMessageReq::clear_edit_msg() {
  if (edit_msg_ != nullptr) edit_msg_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::flremoting::protocol::ObsItemEditMessage& ObsItemEditMessageReq::_internal_edit_msg() const {
  const ::flremoting::protocol::ObsItemEditMessage* p = edit_msg_;
  return p != nullptr ? *p : reinterpret_cast<const ::flremoting::protocol::ObsItemEditMessage&>(
      ::flremoting::protocol::_ObsItemEditMessage_default_instance_);
}
inline const ::flremoting::protocol::ObsItemEditMessage& ObsItemEditMessageReq::edit_msg() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsItemEditMessageReq.edit_msg)
  return _internal_edit_msg();
}
inline void ObsItemEditMessageReq::unsafe_arena_set_allocated_edit_msg(
    ::flremoting::protocol::ObsItemEditMessage* edit_msg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edit_msg_);
  }
  edit_msg_ = edit_msg;
  if (edit_msg) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flremoting.protocol.ObsItemEditMessageReq.edit_msg)
}
inline ::flremoting::protocol::ObsItemEditMessage* ObsItemEditMessageReq::release_edit_msg() {
  _has_bits_[0] &= ~0x00000002u;
  ::flremoting::protocol::ObsItemEditMessage* temp = edit_msg_;
  edit_msg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flremoting::protocol::ObsItemEditMessage* ObsItemEditMessageReq::unsafe_arena_release_edit_msg() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.ObsItemEditMessageReq.edit_msg)
  _has_bits_[0] &= ~0x00000002u;
  ::flremoting::protocol::ObsItemEditMessage* temp = edit_msg_;
  edit_msg_ = nullptr;
  return temp;
}
inline ::flremoting::protocol::ObsItemEditMessage* ObsItemEditMessageReq::_internal_mutable_edit_msg() {
  _has_bits_[0] |= 0x00000002u;
  if (edit_msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::flremoting::protocol::ObsItemEditMessage>(GetArenaForAllocation());
    edit_msg_ = p;
  }
  return edit_msg_;
}
inline ::flremoting::protocol::ObsItemEditMessage* ObsItemEditMessageReq::mutable_edit_msg() {
  ::flremoting::protocol::ObsItemEditMessage* _msg = _internal_mutable_edit_msg();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsItemEditMessageReq.edit_msg)
  return _msg;
}
inline void ObsItemEditMessageReq::set_allocated_edit_msg(::flremoting::protocol::ObsItemEditMessage* edit_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete edit_msg_;
  }
  if (edit_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(edit_msg);
    if (message_arena != submessage_arena) {
      edit_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edit_msg, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  edit_msg_ = edit_msg;
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.ObsItemEditMessageReq.edit_msg)
}

// optional string edit_info = 2;
inline bool ObsItemEditMessageReq::_internal_has_edit_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObsItemEditMessageReq::has_edit_info() const {
  return _internal_has_edit_info();
}
inline void ObsItemEditMessageReq::clear_edit_info() {
  edit_info_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ObsItemEditMessageReq::edit_info() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsItemEditMessageReq.edit_info)
  return _internal_edit_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObsItemEditMessageReq::set_edit_info(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 edit_info_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsItemEditMessageReq.edit_info)
}
inline std::string* ObsItemEditMessageReq::mutable_edit_info() {
  std::string* _s = _internal_mutable_edit_info();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsItemEditMessageReq.edit_info)
  return _s;
}
inline const std::string& ObsItemEditMessageReq::_internal_edit_info() const {
  return edit_info_.Get();
}
inline void ObsItemEditMessageReq::_internal_set_edit_info(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  edit_info_.Set(value, GetArenaForAllocation());
}
inline std::string* ObsItemEditMessageReq::_internal_mutable_edit_info() {
  _has_bits_[0] |= 0x00000001u;
  return edit_info_.Mutable(GetArenaForAllocation());
}
inline std::string* ObsItemEditMessageReq::release_edit_info() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.ObsItemEditMessageReq.edit_info)
  if (!_internal_has_edit_info()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = edit_info_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (edit_info_.IsDefault()) {
    edit_info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ObsItemEditMessageReq::set_allocated_edit_info(std::string* edit_info) {
  if (edit_info != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  edit_info_.SetAllocated(edit_info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (edit_info_.IsDefault()) {
    edit_info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.ObsItemEditMessageReq.edit_info)
}

// -------------------------------------------------------------------

// ObsItemEditMessageResp

// optional .flremoting.protocol.BaseResponse base_msg = 1;
inline bool ObsItemEditMessageResp::_internal_has_base_msg() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || base_msg_ != nullptr);
  return value;
}
inline bool ObsItemEditMessageResp::has_base_msg() const {
  return _internal_has_base_msg();
}
inline const ::flremoting::protocol::BaseResponse& ObsItemEditMessageResp::_internal_base_msg() const {
  const ::flremoting::protocol::BaseResponse* p = base_msg_;
  return p != nullptr ? *p : reinterpret_cast<const ::flremoting::protocol::BaseResponse&>(
      ::flremoting::protocol::_BaseResponse_default_instance_);
}
inline const ::flremoting::protocol::BaseResponse& ObsItemEditMessageResp::base_msg() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsItemEditMessageResp.base_msg)
  return _internal_base_msg();
}
inline void ObsItemEditMessageResp::unsafe_arena_set_allocated_base_msg(
    ::flremoting::protocol::BaseResponse* base_msg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_msg_);
  }
  base_msg_ = base_msg;
  if (base_msg) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flremoting.protocol.ObsItemEditMessageResp.base_msg)
}
inline ::flremoting::protocol::BaseResponse* ObsItemEditMessageResp::release_base_msg() {
  _has_bits_[0] &= ~0x00000001u;
  ::flremoting::protocol::BaseResponse* temp = base_msg_;
  base_msg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flremoting::protocol::BaseResponse* ObsItemEditMessageResp::unsafe_arena_release_base_msg() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.ObsItemEditMessageResp.base_msg)
  _has_bits_[0] &= ~0x00000001u;
  ::flremoting::protocol::BaseResponse* temp = base_msg_;
  base_msg_ = nullptr;
  return temp;
}
inline ::flremoting::protocol::BaseResponse* ObsItemEditMessageResp::_internal_mutable_base_msg() {
  _has_bits_[0] |= 0x00000001u;
  if (base_msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::flremoting::protocol::BaseResponse>(GetArenaForAllocation());
    base_msg_ = p;
  }
  return base_msg_;
}
inline ::flremoting::protocol::BaseResponse* ObsItemEditMessageResp::mutable_base_msg() {
  ::flremoting::protocol::BaseResponse* _msg = _internal_mutable_base_msg();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsItemEditMessageResp.base_msg)
  return _msg;
}
inline void ObsItemEditMessageResp::set_allocated_base_msg(::flremoting::protocol::BaseResponse* base_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_msg_);
  }
  if (base_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_msg));
    if (message_arena != submessage_arena) {
      base_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_msg, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  base_msg_ = base_msg;
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.ObsItemEditMessageResp.base_msg)
}

// optional .flremoting.protocol.ObsItemEditMessage edit_msg = 2;
inline bool ObsItemEditMessageResp::_internal_has_edit_msg() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || edit_msg_ != nullptr);
  return value;
}
inline bool ObsItemEditMessageResp::has_edit_msg() const {
  return _internal_has_edit_msg();
}
inline void ObsItemEditMessageResp::clear_edit_msg() {
  if (edit_msg_ != nullptr) edit_msg_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::flremoting::protocol::ObsItemEditMessage& ObsItemEditMessageResp::_internal_edit_msg() const {
  const ::flremoting::protocol::ObsItemEditMessage* p = edit_msg_;
  return p != nullptr ? *p : reinterpret_cast<const ::flremoting::protocol::ObsItemEditMessage&>(
      ::flremoting::protocol::_ObsItemEditMessage_default_instance_);
}
inline const ::flremoting::protocol::ObsItemEditMessage& ObsItemEditMessageResp::edit_msg() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsItemEditMessageResp.edit_msg)
  return _internal_edit_msg();
}
inline void ObsItemEditMessageResp::unsafe_arena_set_allocated_edit_msg(
    ::flremoting::protocol::ObsItemEditMessage* edit_msg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edit_msg_);
  }
  edit_msg_ = edit_msg;
  if (edit_msg) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flremoting.protocol.ObsItemEditMessageResp.edit_msg)
}
inline ::flremoting::protocol::ObsItemEditMessage* ObsItemEditMessageResp::release_edit_msg() {
  _has_bits_[0] &= ~0x00000002u;
  ::flremoting::protocol::ObsItemEditMessage* temp = edit_msg_;
  edit_msg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flremoting::protocol::ObsItemEditMessage* ObsItemEditMessageResp::unsafe_arena_release_edit_msg() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.ObsItemEditMessageResp.edit_msg)
  _has_bits_[0] &= ~0x00000002u;
  ::flremoting::protocol::ObsItemEditMessage* temp = edit_msg_;
  edit_msg_ = nullptr;
  return temp;
}
inline ::flremoting::protocol::ObsItemEditMessage* ObsItemEditMessageResp::_internal_mutable_edit_msg() {
  _has_bits_[0] |= 0x00000002u;
  if (edit_msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::flremoting::protocol::ObsItemEditMessage>(GetArenaForAllocation());
    edit_msg_ = p;
  }
  return edit_msg_;
}
inline ::flremoting::protocol::ObsItemEditMessage* ObsItemEditMessageResp::mutable_edit_msg() {
  ::flremoting::protocol::ObsItemEditMessage* _msg = _internal_mutable_edit_msg();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsItemEditMessageResp.edit_msg)
  return _msg;
}
inline void ObsItemEditMessageResp::set_allocated_edit_msg(::flremoting::protocol::ObsItemEditMessage* edit_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete edit_msg_;
  }
  if (edit_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(edit_msg);
    if (message_arena != submessage_arena) {
      edit_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edit_msg, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  edit_msg_ = edit_msg;
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.ObsItemEditMessageResp.edit_msg)
}

// -------------------------------------------------------------------

// ObsDeviceInfo

// optional string device_name = 1;
inline bool ObsDeviceInfo::_internal_has_device_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObsDeviceInfo::has_device_name() const {
  return _internal_has_device_name();
}
inline void ObsDeviceInfo::clear_device_name() {
  device_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ObsDeviceInfo::device_name() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsDeviceInfo.device_name)
  return _internal_device_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObsDeviceInfo::set_device_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 device_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsDeviceInfo.device_name)
}
inline std::string* ObsDeviceInfo::mutable_device_name() {
  std::string* _s = _internal_mutable_device_name();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsDeviceInfo.device_name)
  return _s;
}
inline const std::string& ObsDeviceInfo::_internal_device_name() const {
  return device_name_.Get();
}
inline void ObsDeviceInfo::_internal_set_device_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  device_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ObsDeviceInfo::_internal_mutable_device_name() {
  _has_bits_[0] |= 0x00000001u;
  return device_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ObsDeviceInfo::release_device_name() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.ObsDeviceInfo.device_name)
  if (!_internal_has_device_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = device_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_name_.IsDefault()) {
    device_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ObsDeviceInfo::set_allocated_device_name(std::string* device_name) {
  if (device_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  device_name_.SetAllocated(device_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_name_.IsDefault()) {
    device_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.ObsDeviceInfo.device_name)
}

// optional string device_data = 2;
inline bool ObsDeviceInfo::_internal_has_device_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObsDeviceInfo::has_device_data() const {
  return _internal_has_device_data();
}
inline void ObsDeviceInfo::clear_device_data() {
  device_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ObsDeviceInfo::device_data() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsDeviceInfo.device_data)
  return _internal_device_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObsDeviceInfo::set_device_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 device_data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsDeviceInfo.device_data)
}
inline std::string* ObsDeviceInfo::mutable_device_data() {
  std::string* _s = _internal_mutable_device_data();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsDeviceInfo.device_data)
  return _s;
}
inline const std::string& ObsDeviceInfo::_internal_device_data() const {
  return device_data_.Get();
}
inline void ObsDeviceInfo::_internal_set_device_data(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  device_data_.Set(value, GetArenaForAllocation());
}
inline std::string* ObsDeviceInfo::_internal_mutable_device_data() {
  _has_bits_[0] |= 0x00000002u;
  return device_data_.Mutable(GetArenaForAllocation());
}
inline std::string* ObsDeviceInfo::release_device_data() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.ObsDeviceInfo.device_data)
  if (!_internal_has_device_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = device_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_data_.IsDefault()) {
    device_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ObsDeviceInfo::set_allocated_device_data(std::string* device_data) {
  if (device_data != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  device_data_.SetAllocated(device_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_data_.IsDefault()) {
    device_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.ObsDeviceInfo.device_data)
}

// -------------------------------------------------------------------

// ObsDeviceMessage

// optional .flremoting.protocol.ObsDeviceType device_type = 1;
inline bool ObsDeviceMessage::_internal_has_device_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObsDeviceMessage::has_device_type() const {
  return _internal_has_device_type();
}
inline void ObsDeviceMessage::clear_device_type() {
  device_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::flremoting::protocol::ObsDeviceType ObsDeviceMessage::_internal_device_type() const {
  return static_cast< ::flremoting::protocol::ObsDeviceType >(device_type_);
}
inline ::flremoting::protocol::ObsDeviceType ObsDeviceMessage::device_type() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsDeviceMessage.device_type)
  return _internal_device_type();
}
inline void ObsDeviceMessage::_internal_set_device_type(::flremoting::protocol::ObsDeviceType value) {
  assert(::flremoting::protocol::ObsDeviceType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  device_type_ = value;
}
inline void ObsDeviceMessage::set_device_type(::flremoting::protocol::ObsDeviceType value) {
  _internal_set_device_type(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsDeviceMessage.device_type)
}

// repeated .flremoting.protocol.ObsDeviceInfo device_infos = 2;
inline int ObsDeviceMessage::_internal_device_infos_size() const {
  return device_infos_.size();
}
inline int ObsDeviceMessage::device_infos_size() const {
  return _internal_device_infos_size();
}
inline void ObsDeviceMessage::clear_device_infos() {
  device_infos_.Clear();
}
inline ::flremoting::protocol::ObsDeviceInfo* ObsDeviceMessage::mutable_device_infos(int index) {
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsDeviceMessage.device_infos)
  return device_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flremoting::protocol::ObsDeviceInfo >*
ObsDeviceMessage::mutable_device_infos() {
  // @@protoc_insertion_point(field_mutable_list:flremoting.protocol.ObsDeviceMessage.device_infos)
  return &device_infos_;
}
inline const ::flremoting::protocol::ObsDeviceInfo& ObsDeviceMessage::_internal_device_infos(int index) const {
  return device_infos_.Get(index);
}
inline const ::flremoting::protocol::ObsDeviceInfo& ObsDeviceMessage::device_infos(int index) const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsDeviceMessage.device_infos)
  return _internal_device_infos(index);
}
inline ::flremoting::protocol::ObsDeviceInfo* ObsDeviceMessage::_internal_add_device_infos() {
  return device_infos_.Add();
}
inline ::flremoting::protocol::ObsDeviceInfo* ObsDeviceMessage::add_device_infos() {
  ::flremoting::protocol::ObsDeviceInfo* _add = _internal_add_device_infos();
  // @@protoc_insertion_point(field_add:flremoting.protocol.ObsDeviceMessage.device_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flremoting::protocol::ObsDeviceInfo >&
ObsDeviceMessage::device_infos() const {
  // @@protoc_insertion_point(field_list:flremoting.protocol.ObsDeviceMessage.device_infos)
  return device_infos_;
}

// optional string id_value = 3;
inline bool ObsDeviceMessage::_internal_has_id_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObsDeviceMessage::has_id_value() const {
  return _internal_has_id_value();
}
inline void ObsDeviceMessage::clear_id_value() {
  id_value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ObsDeviceMessage::id_value() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsDeviceMessage.id_value)
  return _internal_id_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObsDeviceMessage::set_id_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 id_value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsDeviceMessage.id_value)
}
inline std::string* ObsDeviceMessage::mutable_id_value() {
  std::string* _s = _internal_mutable_id_value();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsDeviceMessage.id_value)
  return _s;
}
inline const std::string& ObsDeviceMessage::_internal_id_value() const {
  return id_value_.Get();
}
inline void ObsDeviceMessage::_internal_set_id_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_value_.Set(value, GetArenaForAllocation());
}
inline std::string* ObsDeviceMessage::_internal_mutable_id_value() {
  _has_bits_[0] |= 0x00000001u;
  return id_value_.Mutable(GetArenaForAllocation());
}
inline std::string* ObsDeviceMessage::release_id_value() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.ObsDeviceMessage.id_value)
  if (!_internal_has_id_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = id_value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_value_.IsDefault()) {
    id_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ObsDeviceMessage::set_allocated_id_value(std::string* id_value) {
  if (id_value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_value_.SetAllocated(id_value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_value_.IsDefault()) {
    id_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.ObsDeviceMessage.id_value)
}

// optional double gain_value = 4;
inline bool ObsDeviceMessage::_internal_has_gain_value() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ObsDeviceMessage::has_gain_value() const {
  return _internal_has_gain_value();
}
inline void ObsDeviceMessage::clear_gain_value() {
  gain_value_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double ObsDeviceMessage::_internal_gain_value() const {
  return gain_value_;
}
inline double ObsDeviceMessage::gain_value() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsDeviceMessage.gain_value)
  return _internal_gain_value();
}
inline void ObsDeviceMessage::_internal_set_gain_value(double value) {
  _has_bits_[0] |= 0x00000008u;
  gain_value_ = value;
}
inline void ObsDeviceMessage::set_gain_value(double value) {
  _internal_set_gain_value(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsDeviceMessage.gain_value)
}

// optional int32 noise_value = 5;
inline bool ObsDeviceMessage::_internal_has_noise_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ObsDeviceMessage::has_noise_value() const {
  return _internal_has_noise_value();
}
inline void ObsDeviceMessage::clear_noise_value() {
  noise_value_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t ObsDeviceMessage::_internal_noise_value() const {
  return noise_value_;
}
inline int32_t ObsDeviceMessage::noise_value() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsDeviceMessage.noise_value)
  return _internal_noise_value();
}
inline void ObsDeviceMessage::_internal_set_noise_value(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  noise_value_ = value;
}
inline void ObsDeviceMessage::set_noise_value(int32_t value) {
  _internal_set_noise_value(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsDeviceMessage.noise_value)
}

// optional bool is_activate = 6;
inline bool ObsDeviceMessage::_internal_has_is_activate() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ObsDeviceMessage::has_is_activate() const {
  return _internal_has_is_activate();
}
inline void ObsDeviceMessage::clear_is_activate() {
  is_activate_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ObsDeviceMessage::_internal_is_activate() const {
  return is_activate_;
}
inline bool ObsDeviceMessage::is_activate() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsDeviceMessage.is_activate)
  return _internal_is_activate();
}
inline void ObsDeviceMessage::_internal_set_is_activate(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_activate_ = value;
}
inline void ObsDeviceMessage::set_is_activate(bool value) {
  _internal_set_is_activate(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsDeviceMessage.is_activate)
}

// optional int32 monitoring_value = 7;
inline bool ObsDeviceMessage::_internal_has_monitoring_value() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ObsDeviceMessage::has_monitoring_value() const {
  return _internal_has_monitoring_value();
}
inline void ObsDeviceMessage::clear_monitoring_value() {
  monitoring_value_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t ObsDeviceMessage::_internal_monitoring_value() const {
  return monitoring_value_;
}
inline int32_t ObsDeviceMessage::monitoring_value() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsDeviceMessage.monitoring_value)
  return _internal_monitoring_value();
}
inline void ObsDeviceMessage::_internal_set_monitoring_value(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  monitoring_value_ = value;
}
inline void ObsDeviceMessage::set_monitoring_value(int32_t value) {
  _internal_set_monitoring_value(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsDeviceMessage.monitoring_value)
}

// -------------------------------------------------------------------

// ObsDeviceEditMessageRequest

// optional .flremoting.protocol.ObsDeviceActionType action_type = 1;
inline bool ObsDeviceEditMessageRequest::_internal_has_action_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObsDeviceEditMessageRequest::has_action_type() const {
  return _internal_has_action_type();
}
inline void ObsDeviceEditMessageRequest::clear_action_type() {
  action_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::flremoting::protocol::ObsDeviceActionType ObsDeviceEditMessageRequest::_internal_action_type() const {
  return static_cast< ::flremoting::protocol::ObsDeviceActionType >(action_type_);
}
inline ::flremoting::protocol::ObsDeviceActionType ObsDeviceEditMessageRequest::action_type() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsDeviceEditMessageRequest.action_type)
  return _internal_action_type();
}
inline void ObsDeviceEditMessageRequest::_internal_set_action_type(::flremoting::protocol::ObsDeviceActionType value) {
  assert(::flremoting::protocol::ObsDeviceActionType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  action_type_ = value;
}
inline void ObsDeviceEditMessageRequest::set_action_type(::flremoting::protocol::ObsDeviceActionType value) {
  _internal_set_action_type(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsDeviceEditMessageRequest.action_type)
}

// optional string used_str_value = 2;
inline bool ObsDeviceEditMessageRequest::_internal_has_used_str_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObsDeviceEditMessageRequest::has_used_str_value() const {
  return _internal_has_used_str_value();
}
inline void ObsDeviceEditMessageRequest::clear_used_str_value() {
  used_str_value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ObsDeviceEditMessageRequest::used_str_value() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsDeviceEditMessageRequest.used_str_value)
  return _internal_used_str_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObsDeviceEditMessageRequest::set_used_str_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 used_str_value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsDeviceEditMessageRequest.used_str_value)
}
inline std::string* ObsDeviceEditMessageRequest::mutable_used_str_value() {
  std::string* _s = _internal_mutable_used_str_value();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsDeviceEditMessageRequest.used_str_value)
  return _s;
}
inline const std::string& ObsDeviceEditMessageRequest::_internal_used_str_value() const {
  return used_str_value_.Get();
}
inline void ObsDeviceEditMessageRequest::_internal_set_used_str_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  used_str_value_.Set(value, GetArenaForAllocation());
}
inline std::string* ObsDeviceEditMessageRequest::_internal_mutable_used_str_value() {
  _has_bits_[0] |= 0x00000001u;
  return used_str_value_.Mutable(GetArenaForAllocation());
}
inline std::string* ObsDeviceEditMessageRequest::release_used_str_value() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.ObsDeviceEditMessageRequest.used_str_value)
  if (!_internal_has_used_str_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = used_str_value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (used_str_value_.IsDefault()) {
    used_str_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ObsDeviceEditMessageRequest::set_allocated_used_str_value(std::string* used_str_value) {
  if (used_str_value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  used_str_value_.SetAllocated(used_str_value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (used_str_value_.IsDefault()) {
    used_str_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.ObsDeviceEditMessageRequest.used_str_value)
}

// optional double used_double_value = 3;
inline bool ObsDeviceEditMessageRequest::_internal_has_used_double_value() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ObsDeviceEditMessageRequest::has_used_double_value() const {
  return _internal_has_used_double_value();
}
inline void ObsDeviceEditMessageRequest::clear_used_double_value() {
  used_double_value_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double ObsDeviceEditMessageRequest::_internal_used_double_value() const {
  return used_double_value_;
}
inline double ObsDeviceEditMessageRequest::used_double_value() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsDeviceEditMessageRequest.used_double_value)
  return _internal_used_double_value();
}
inline void ObsDeviceEditMessageRequest::_internal_set_used_double_value(double value) {
  _has_bits_[0] |= 0x00000008u;
  used_double_value_ = value;
}
inline void ObsDeviceEditMessageRequest::set_used_double_value(double value) {
  _internal_set_used_double_value(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsDeviceEditMessageRequest.used_double_value)
}

// optional int32 used_int_value = 4;
inline bool ObsDeviceEditMessageRequest::_internal_has_used_int_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ObsDeviceEditMessageRequest::has_used_int_value() const {
  return _internal_has_used_int_value();
}
inline void ObsDeviceEditMessageRequest::clear_used_int_value() {
  used_int_value_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t ObsDeviceEditMessageRequest::_internal_used_int_value() const {
  return used_int_value_;
}
inline int32_t ObsDeviceEditMessageRequest::used_int_value() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsDeviceEditMessageRequest.used_int_value)
  return _internal_used_int_value();
}
inline void ObsDeviceEditMessageRequest::_internal_set_used_int_value(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  used_int_value_ = value;
}
inline void ObsDeviceEditMessageRequest::set_used_int_value(int32_t value) {
  _internal_set_used_int_value(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsDeviceEditMessageRequest.used_int_value)
}

// -------------------------------------------------------------------

// ObsSourceFrame2Message

// optional int64 frame_id = 1;
inline bool ObsSourceFrame2Message::_internal_has_frame_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObsSourceFrame2Message::has_frame_id() const {
  return _internal_has_frame_id();
}
inline void ObsSourceFrame2Message::clear_frame_id() {
  frame_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t ObsSourceFrame2Message::_internal_frame_id() const {
  return frame_id_;
}
inline int64_t ObsSourceFrame2Message::frame_id() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsSourceFrame2Message.frame_id)
  return _internal_frame_id();
}
inline void ObsSourceFrame2Message::_internal_set_frame_id(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  frame_id_ = value;
}
inline void ObsSourceFrame2Message::set_frame_id(int64_t value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsSourceFrame2Message.frame_id)
}

// optional uint32 frame_format = 2;
inline bool ObsSourceFrame2Message::_internal_has_frame_format() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ObsSourceFrame2Message::has_frame_format() const {
  return _internal_has_frame_format();
}
inline void ObsSourceFrame2Message::clear_frame_format() {
  frame_format_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t ObsSourceFrame2Message::_internal_frame_format() const {
  return frame_format_;
}
inline uint32_t ObsSourceFrame2Message::frame_format() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsSourceFrame2Message.frame_format)
  return _internal_frame_format();
}
inline void ObsSourceFrame2Message::_internal_set_frame_format(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  frame_format_ = value;
}
inline void ObsSourceFrame2Message::set_frame_format(uint32_t value) {
  _internal_set_frame_format(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsSourceFrame2Message.frame_format)
}

// optional uint32 frame_width = 3;
inline bool ObsSourceFrame2Message::_internal_has_frame_width() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ObsSourceFrame2Message::has_frame_width() const {
  return _internal_has_frame_width();
}
inline void ObsSourceFrame2Message::clear_frame_width() {
  frame_width_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t ObsSourceFrame2Message::_internal_frame_width() const {
  return frame_width_;
}
inline uint32_t ObsSourceFrame2Message::frame_width() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsSourceFrame2Message.frame_width)
  return _internal_frame_width();
}
inline void ObsSourceFrame2Message::_internal_set_frame_width(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  frame_width_ = value;
}
inline void ObsSourceFrame2Message::set_frame_width(uint32_t value) {
  _internal_set_frame_width(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsSourceFrame2Message.frame_width)
}

// optional uint32 frame_height = 4;
inline bool ObsSourceFrame2Message::_internal_has_frame_height() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ObsSourceFrame2Message::has_frame_height() const {
  return _internal_has_frame_height();
}
inline void ObsSourceFrame2Message::clear_frame_height() {
  frame_height_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t ObsSourceFrame2Message::_internal_frame_height() const {
  return frame_height_;
}
inline uint32_t ObsSourceFrame2Message::frame_height() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsSourceFrame2Message.frame_height)
  return _internal_frame_height();
}
inline void ObsSourceFrame2Message::_internal_set_frame_height(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  frame_height_ = value;
}
inline void ObsSourceFrame2Message::set_frame_height(uint32_t value) {
  _internal_set_frame_height(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsSourceFrame2Message.frame_height)
}

// optional string frame_data = 5;
inline bool ObsSourceFrame2Message::_internal_has_frame_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObsSourceFrame2Message::has_frame_data() const {
  return _internal_has_frame_data();
}
inline void ObsSourceFrame2Message::clear_frame_data() {
  frame_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ObsSourceFrame2Message::frame_data() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsSourceFrame2Message.frame_data)
  return _internal_frame_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObsSourceFrame2Message::set_frame_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 frame_data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsSourceFrame2Message.frame_data)
}
inline std::string* ObsSourceFrame2Message::mutable_frame_data() {
  std::string* _s = _internal_mutable_frame_data();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsSourceFrame2Message.frame_data)
  return _s;
}
inline const std::string& ObsSourceFrame2Message::_internal_frame_data() const {
  return frame_data_.Get();
}
inline void ObsSourceFrame2Message::_internal_set_frame_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  frame_data_.Set(value, GetArenaForAllocation());
}
inline std::string* ObsSourceFrame2Message::_internal_mutable_frame_data() {
  _has_bits_[0] |= 0x00000001u;
  return frame_data_.Mutable(GetArenaForAllocation());
}
inline std::string* ObsSourceFrame2Message::release_frame_data() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.ObsSourceFrame2Message.frame_data)
  if (!_internal_has_frame_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = frame_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (frame_data_.IsDefault()) {
    frame_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ObsSourceFrame2Message::set_allocated_frame_data(std::string* frame_data) {
  if (frame_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  frame_data_.SetAllocated(frame_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (frame_data_.IsDefault()) {
    frame_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.ObsSourceFrame2Message.frame_data)
}

// -------------------------------------------------------------------

// ObsSceneItemInfoData

// optional string name = 1;
inline bool ObsSceneItemInfoData::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObsSceneItemInfoData::has_name() const {
  return _internal_has_name();
}
inline void ObsSceneItemInfoData::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ObsSceneItemInfoData::name() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsSceneItemInfoData.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObsSceneItemInfoData::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsSceneItemInfoData.name)
}
inline std::string* ObsSceneItemInfoData::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsSceneItemInfoData.name)
  return _s;
}
inline const std::string& ObsSceneItemInfoData::_internal_name() const {
  return name_.Get();
}
inline void ObsSceneItemInfoData::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* ObsSceneItemInfoData::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* ObsSceneItemInfoData::release_name() {
  // @@protoc_insertion_point(field_release:flremoting.protocol.ObsSceneItemInfoData.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ObsSceneItemInfoData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flremoting.protocol.ObsSceneItemInfoData.name)
}

// optional float posx = 2;
inline bool ObsSceneItemInfoData::_internal_has_posx() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObsSceneItemInfoData::has_posx() const {
  return _internal_has_posx();
}
inline void ObsSceneItemInfoData::clear_posx() {
  posx_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ObsSceneItemInfoData::_internal_posx() const {
  return posx_;
}
inline float ObsSceneItemInfoData::posx() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsSceneItemInfoData.posx)
  return _internal_posx();
}
inline void ObsSceneItemInfoData::_internal_set_posx(float value) {
  _has_bits_[0] |= 0x00000002u;
  posx_ = value;
}
inline void ObsSceneItemInfoData::set_posx(float value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsSceneItemInfoData.posx)
}

// optional float posy = 3;
inline bool ObsSceneItemInfoData::_internal_has_posy() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ObsSceneItemInfoData::has_posy() const {
  return _internal_has_posy();
}
inline void ObsSceneItemInfoData::clear_posy() {
  posy_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float ObsSceneItemInfoData::_internal_posy() const {
  return posy_;
}
inline float ObsSceneItemInfoData::posy() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsSceneItemInfoData.posy)
  return _internal_posy();
}
inline void ObsSceneItemInfoData::_internal_set_posy(float value) {
  _has_bits_[0] |= 0x00000004u;
  posy_ = value;
}
inline void ObsSceneItemInfoData::set_posy(float value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsSceneItemInfoData.posy)
}

// optional float width = 4;
inline bool ObsSceneItemInfoData::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ObsSceneItemInfoData::has_width() const {
  return _internal_has_width();
}
inline void ObsSceneItemInfoData::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float ObsSceneItemInfoData::_internal_width() const {
  return width_;
}
inline float ObsSceneItemInfoData::width() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsSceneItemInfoData.width)
  return _internal_width();
}
inline void ObsSceneItemInfoData::_internal_set_width(float value) {
  _has_bits_[0] |= 0x00000008u;
  width_ = value;
}
inline void ObsSceneItemInfoData::set_width(float value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsSceneItemInfoData.width)
}

// optional float height = 5;
inline bool ObsSceneItemInfoData::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ObsSceneItemInfoData::has_height() const {
  return _internal_has_height();
}
inline void ObsSceneItemInfoData::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float ObsSceneItemInfoData::_internal_height() const {
  return height_;
}
inline float ObsSceneItemInfoData::height() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsSceneItemInfoData.height)
  return _internal_height();
}
inline void ObsSceneItemInfoData::_internal_set_height(float value) {
  _has_bits_[0] |= 0x00000010u;
  height_ = value;
}
inline void ObsSceneItemInfoData::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsSceneItemInfoData.height)
}

// optional bool visible = 6;
inline bool ObsSceneItemInfoData::_internal_has_visible() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ObsSceneItemInfoData::has_visible() const {
  return _internal_has_visible();
}
inline void ObsSceneItemInfoData::clear_visible() {
  visible_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ObsSceneItemInfoData::_internal_visible() const {
  return visible_;
}
inline bool ObsSceneItemInfoData::visible() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsSceneItemInfoData.visible)
  return _internal_visible();
}
inline void ObsSceneItemInfoData::_internal_set_visible(bool value) {
  _has_bits_[0] |= 0x00000040u;
  visible_ = value;
}
inline void ObsSceneItemInfoData::set_visible(bool value) {
  _internal_set_visible(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsSceneItemInfoData.visible)
}

// optional int64 itemid = 7;
inline bool ObsSceneItemInfoData::_internal_has_itemid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ObsSceneItemInfoData::has_itemid() const {
  return _internal_has_itemid();
}
inline void ObsSceneItemInfoData::clear_itemid() {
  itemid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000020u;
}
inline int64_t ObsSceneItemInfoData::_internal_itemid() const {
  return itemid_;
}
inline int64_t ObsSceneItemInfoData::itemid() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsSceneItemInfoData.itemid)
  return _internal_itemid();
}
inline void ObsSceneItemInfoData::_internal_set_itemid(int64_t value) {
  _has_bits_[0] |= 0x00000020u;
  itemid_ = value;
}
inline void ObsSceneItemInfoData::set_itemid(int64_t value) {
  _internal_set_itemid(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsSceneItemInfoData.itemid)
}

// -------------------------------------------------------------------

// ObsSceneItemInfoMessage

// repeated .flremoting.protocol.ObsSceneItemInfoData infos = 1;
inline int ObsSceneItemInfoMessage::_internal_infos_size() const {
  return infos_.size();
}
inline int ObsSceneItemInfoMessage::infos_size() const {
  return _internal_infos_size();
}
inline void ObsSceneItemInfoMessage::clear_infos() {
  infos_.Clear();
}
inline ::flremoting::protocol::ObsSceneItemInfoData* ObsSceneItemInfoMessage::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:flremoting.protocol.ObsSceneItemInfoMessage.infos)
  return infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flremoting::protocol::ObsSceneItemInfoData >*
ObsSceneItemInfoMessage::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:flremoting.protocol.ObsSceneItemInfoMessage.infos)
  return &infos_;
}
inline const ::flremoting::protocol::ObsSceneItemInfoData& ObsSceneItemInfoMessage::_internal_infos(int index) const {
  return infos_.Get(index);
}
inline const ::flremoting::protocol::ObsSceneItemInfoData& ObsSceneItemInfoMessage::infos(int index) const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsSceneItemInfoMessage.infos)
  return _internal_infos(index);
}
inline ::flremoting::protocol::ObsSceneItemInfoData* ObsSceneItemInfoMessage::_internal_add_infos() {
  return infos_.Add();
}
inline ::flremoting::protocol::ObsSceneItemInfoData* ObsSceneItemInfoMessage::add_infos() {
  ::flremoting::protocol::ObsSceneItemInfoData* _add = _internal_add_infos();
  // @@protoc_insertion_point(field_add:flremoting.protocol.ObsSceneItemInfoMessage.infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flremoting::protocol::ObsSceneItemInfoData >&
ObsSceneItemInfoMessage::infos() const {
  // @@protoc_insertion_point(field_list:flremoting.protocol.ObsSceneItemInfoMessage.infos)
  return infos_;
}

// optional double fps = 2;
inline bool ObsSceneItemInfoMessage::_internal_has_fps() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObsSceneItemInfoMessage::has_fps() const {
  return _internal_has_fps();
}
inline void ObsSceneItemInfoMessage::clear_fps() {
  fps_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double ObsSceneItemInfoMessage::_internal_fps() const {
  return fps_;
}
inline double ObsSceneItemInfoMessage::fps() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsSceneItemInfoMessage.fps)
  return _internal_fps();
}
inline void ObsSceneItemInfoMessage::_internal_set_fps(double value) {
  _has_bits_[0] |= 0x00000001u;
  fps_ = value;
}
inline void ObsSceneItemInfoMessage::set_fps(double value) {
  _internal_set_fps(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsSceneItemInfoMessage.fps)
}

// optional int32 peak_volume = 3;
inline bool ObsSceneItemInfoMessage::_internal_has_peak_volume() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObsSceneItemInfoMessage::has_peak_volume() const {
  return _internal_has_peak_volume();
}
inline void ObsSceneItemInfoMessage::clear_peak_volume() {
  peak_volume_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t ObsSceneItemInfoMessage::_internal_peak_volume() const {
  return peak_volume_;
}
inline int32_t ObsSceneItemInfoMessage::peak_volume() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsSceneItemInfoMessage.peak_volume)
  return _internal_peak_volume();
}
inline void ObsSceneItemInfoMessage::_internal_set_peak_volume(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  peak_volume_ = value;
}
inline void ObsSceneItemInfoMessage::set_peak_volume(int32_t value) {
  _internal_set_peak_volume(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsSceneItemInfoMessage.peak_volume)
}

// -------------------------------------------------------------------

// ObsFPSInfoMessage

// optional uint32 fpsnum = 1;
inline bool ObsFPSInfoMessage::_internal_has_fpsnum() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObsFPSInfoMessage::has_fpsnum() const {
  return _internal_has_fpsnum();
}
inline void ObsFPSInfoMessage::clear_fpsnum() {
  fpsnum_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t ObsFPSInfoMessage::_internal_fpsnum() const {
  return fpsnum_;
}
inline uint32_t ObsFPSInfoMessage::fpsnum() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsFPSInfoMessage.fpsnum)
  return _internal_fpsnum();
}
inline void ObsFPSInfoMessage::_internal_set_fpsnum(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  fpsnum_ = value;
}
inline void ObsFPSInfoMessage::set_fpsnum(uint32_t value) {
  _internal_set_fpsnum(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsFPSInfoMessage.fpsnum)
}

// optional uint32 fpsden = 2;
inline bool ObsFPSInfoMessage::_internal_has_fpsden() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObsFPSInfoMessage::has_fpsden() const {
  return _internal_has_fpsden();
}
inline void ObsFPSInfoMessage::clear_fpsden() {
  fpsden_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t ObsFPSInfoMessage::_internal_fpsden() const {
  return fpsden_;
}
inline uint32_t ObsFPSInfoMessage::fpsden() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsFPSInfoMessage.fpsden)
  return _internal_fpsden();
}
inline void ObsFPSInfoMessage::_internal_set_fpsden(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  fpsden_ = value;
}
inline void ObsFPSInfoMessage::set_fpsden(uint32_t value) {
  _internal_set_fpsden(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsFPSInfoMessage.fpsden)
}

// -------------------------------------------------------------------

// ObsMeanRateInfoMessage

// optional bool enable = 1;
inline bool ObsMeanRateInfoMessage::_internal_has_enable() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObsMeanRateInfoMessage::has_enable() const {
  return _internal_has_enable();
}
inline void ObsMeanRateInfoMessage::clear_enable() {
  enable_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ObsMeanRateInfoMessage::_internal_enable() const {
  return enable_;
}
inline bool ObsMeanRateInfoMessage::enable() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsMeanRateInfoMessage.enable)
  return _internal_enable();
}
inline void ObsMeanRateInfoMessage::_internal_set_enable(bool value) {
  _has_bits_[0] |= 0x00000001u;
  enable_ = value;
}
inline void ObsMeanRateInfoMessage::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsMeanRateInfoMessage.enable)
}

// optional int32 fpsnum = 2;
inline bool ObsMeanRateInfoMessage::_internal_has_fpsnum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObsMeanRateInfoMessage::has_fpsnum() const {
  return _internal_has_fpsnum();
}
inline void ObsMeanRateInfoMessage::clear_fpsnum() {
  fpsnum_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t ObsMeanRateInfoMessage::_internal_fpsnum() const {
  return fpsnum_;
}
inline int32_t ObsMeanRateInfoMessage::fpsnum() const {
  // @@protoc_insertion_point(field_get:flremoting.protocol.ObsMeanRateInfoMessage.fpsnum)
  return _internal_fpsnum();
}
inline void ObsMeanRateInfoMessage::_internal_set_fpsnum(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  fpsnum_ = value;
}
inline void ObsMeanRateInfoMessage::set_fpsnum(int32_t value) {
  _internal_set_fpsnum(value);
  // @@protoc_insertion_point(field_set:flremoting.protocol.ObsMeanRateInfoMessage.fpsnum)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace flremoting

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::flremoting::protocol::ObsPropertyType> : ::std::true_type {};
template <> struct is_proto_enum< ::flremoting::protocol::ObsItemActionType> : ::std::true_type {};
template <> struct is_proto_enum< ::flremoting::protocol::ObsDeviceType> : ::std::true_type {};
template <> struct is_proto_enum< ::flremoting::protocol::ObsDeviceActionType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flobsinfo_2eproto
