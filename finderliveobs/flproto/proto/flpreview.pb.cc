// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flpreview.proto

#include "flpreview.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace flremoting {
namespace protocol {
PROTOBUF_CONSTEXPR PreviewSizeMessage::PreviewSizeMessage(
    ::_pbi::ConstantInitialized)
  : cx_(0)
  , cy_(0){}
struct PreviewSizeMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PreviewSizeMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PreviewSizeMessageDefaultTypeInternal() {}
  union {
    PreviewSizeMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PreviewSizeMessageDefaultTypeInternal _PreviewSizeMessage_default_instance_;
PROTOBUF_CONSTEXPR PreviewCanvasMessage::PreviewCanvasMessage(
    ::_pbi::ConstantInitialized)
  : base_(nullptr)
  , res_(nullptr)
  , res_type_(0)
  , is_portrait_(false){}
struct PreviewCanvasMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PreviewCanvasMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PreviewCanvasMessageDefaultTypeInternal() {}
  union {
    PreviewCanvasMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PreviewCanvasMessageDefaultTypeInternal _PreviewCanvasMessage_default_instance_;
PROTOBUF_CONSTEXPR PreviewMouseMenuMessage::PreviewMouseMenuMessage(
    ::_pbi::ConstantInitialized)
  : id_(int64_t{0})
  , x_(0)
  , y_(0){}
struct PreviewMouseMenuMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PreviewMouseMenuMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PreviewMouseMenuMessageDefaultTypeInternal() {}
  union {
    PreviewMouseMenuMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PreviewMouseMenuMessageDefaultTypeInternal _PreviewMouseMenuMessage_default_instance_;
}  // namespace protocol
}  // namespace flremoting
namespace flremoting {
namespace protocol {

// ===================================================================

class PreviewSizeMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<PreviewSizeMessage>()._has_bits_);
  static void set_has_cx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PreviewSizeMessage::PreviewSizeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flremoting.protocol.PreviewSizeMessage)
}
PreviewSizeMessage::PreviewSizeMessage(const PreviewSizeMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&cx_, &from.cx_,
    static_cast<size_t>(reinterpret_cast<char*>(&cy_) -
    reinterpret_cast<char*>(&cx_)) + sizeof(cy_));
  // @@protoc_insertion_point(copy_constructor:flremoting.protocol.PreviewSizeMessage)
}

inline void PreviewSizeMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cx_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cy_) -
    reinterpret_cast<char*>(&cx_)) + sizeof(cy_));
}

PreviewSizeMessage::~PreviewSizeMessage() {
  // @@protoc_insertion_point(destructor:flremoting.protocol.PreviewSizeMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PreviewSizeMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PreviewSizeMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PreviewSizeMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:flremoting.protocol.PreviewSizeMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&cx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cy_) -
        reinterpret_cast<char*>(&cx_)) + sizeof(cy_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PreviewSizeMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 cx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_cx(&has_bits);
          cx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 cy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_cy(&has_bits);
          cy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PreviewSizeMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flremoting.protocol.PreviewSizeMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_cx(), target);
  }

  // optional int32 cy = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_cy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flremoting.protocol.PreviewSizeMessage)
  return target;
}

size_t PreviewSizeMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flremoting.protocol.PreviewSizeMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 cx = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cx());
    }

    // optional int32 cy = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cy());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PreviewSizeMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PreviewSizeMessage*>(
      &from));
}

void PreviewSizeMessage::MergeFrom(const PreviewSizeMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flremoting.protocol.PreviewSizeMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      cx_ = from.cx_;
    }
    if (cached_has_bits & 0x00000002u) {
      cy_ = from.cy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PreviewSizeMessage::CopyFrom(const PreviewSizeMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flremoting.protocol.PreviewSizeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreviewSizeMessage::IsInitialized() const {
  return true;
}

void PreviewSizeMessage::InternalSwap(PreviewSizeMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PreviewSizeMessage, cy_)
      + sizeof(PreviewSizeMessage::cy_)
      - PROTOBUF_FIELD_OFFSET(PreviewSizeMessage, cx_)>(
          reinterpret_cast<char*>(&cx_),
          reinterpret_cast<char*>(&other->cx_));
}

std::string PreviewSizeMessage::GetTypeName() const {
  return "flremoting.protocol.PreviewSizeMessage";
}


// ===================================================================

class PreviewCanvasMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<PreviewCanvasMessage>()._has_bits_);
  static const ::flremoting::protocol::PreviewSizeMessage& base(const PreviewCanvasMessage* msg);
  static void set_has_base(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_res_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::flremoting::protocol::PreviewSizeMessage& res(const PreviewCanvasMessage* msg);
  static void set_has_res(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_portrait(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::flremoting::protocol::PreviewSizeMessage&
PreviewCanvasMessage::_Internal::base(const PreviewCanvasMessage* msg) {
  return *msg->base_;
}
const ::flremoting::protocol::PreviewSizeMessage&
PreviewCanvasMessage::_Internal::res(const PreviewCanvasMessage* msg) {
  return *msg->res_;
}
PreviewCanvasMessage::PreviewCanvasMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flremoting.protocol.PreviewCanvasMessage)
}
PreviewCanvasMessage::PreviewCanvasMessage(const PreviewCanvasMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::flremoting::protocol::PreviewSizeMessage(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_res()) {
    res_ = new ::flremoting::protocol::PreviewSizeMessage(*from.res_);
  } else {
    res_ = nullptr;
  }
  ::memcpy(&res_type_, &from.res_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_portrait_) -
    reinterpret_cast<char*>(&res_type_)) + sizeof(is_portrait_));
  // @@protoc_insertion_point(copy_constructor:flremoting.protocol.PreviewCanvasMessage)
}

inline void PreviewCanvasMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&base_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_portrait_) -
    reinterpret_cast<char*>(&base_)) + sizeof(is_portrait_));
}

PreviewCanvasMessage::~PreviewCanvasMessage() {
  // @@protoc_insertion_point(destructor:flremoting.protocol.PreviewCanvasMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PreviewCanvasMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete res_;
}

void PreviewCanvasMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PreviewCanvasMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:flremoting.protocol.PreviewCanvasMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(base_ != nullptr);
      base_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(res_ != nullptr);
      res_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&res_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_portrait_) -
        reinterpret_cast<char*>(&res_type_)) + sizeof(is_portrait_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PreviewCanvasMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .flremoting.protocol.PreviewSizeMessage base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 res_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_res_type(&has_bits);
          res_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .flremoting.protocol.PreviewSizeMessage res = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_res(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_portrait = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_portrait(&has_bits);
          is_portrait_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PreviewCanvasMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flremoting.protocol.PreviewCanvasMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .flremoting.protocol.PreviewSizeMessage base = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // optional int32 res_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_res_type(), target);
  }

  // optional .flremoting.protocol.PreviewSizeMessage res = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::res(this),
        _Internal::res(this).GetCachedSize(), target, stream);
  }

  // optional bool is_portrait = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_portrait(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flremoting.protocol.PreviewCanvasMessage)
  return target;
}

size_t PreviewCanvasMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flremoting.protocol.PreviewCanvasMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .flremoting.protocol.PreviewSizeMessage base = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *base_);
    }

    // optional .flremoting.protocol.PreviewSizeMessage res = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *res_);
    }

    // optional int32 res_type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_res_type());
    }

    // optional bool is_portrait = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PreviewCanvasMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PreviewCanvasMessage*>(
      &from));
}

void PreviewCanvasMessage::MergeFrom(const PreviewCanvasMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flremoting.protocol.PreviewCanvasMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_base()->::flremoting::protocol::PreviewSizeMessage::MergeFrom(from._internal_base());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_res()->::flremoting::protocol::PreviewSizeMessage::MergeFrom(from._internal_res());
    }
    if (cached_has_bits & 0x00000004u) {
      res_type_ = from.res_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_portrait_ = from.is_portrait_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PreviewCanvasMessage::CopyFrom(const PreviewCanvasMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flremoting.protocol.PreviewCanvasMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreviewCanvasMessage::IsInitialized() const {
  return true;
}

void PreviewCanvasMessage::InternalSwap(PreviewCanvasMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PreviewCanvasMessage, is_portrait_)
      + sizeof(PreviewCanvasMessage::is_portrait_)
      - PROTOBUF_FIELD_OFFSET(PreviewCanvasMessage, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

std::string PreviewCanvasMessage::GetTypeName() const {
  return "flremoting.protocol.PreviewCanvasMessage";
}


// ===================================================================

class PreviewMouseMenuMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<PreviewMouseMenuMessage>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PreviewMouseMenuMessage::PreviewMouseMenuMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flremoting.protocol.PreviewMouseMenuMessage)
}
PreviewMouseMenuMessage::PreviewMouseMenuMessage(const PreviewMouseMenuMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&id_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:flremoting.protocol.PreviewMouseMenuMessage)
}

inline void PreviewMouseMenuMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&id_)) + sizeof(y_));
}

PreviewMouseMenuMessage::~PreviewMouseMenuMessage() {
  // @@protoc_insertion_point(destructor:flremoting.protocol.PreviewMouseMenuMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PreviewMouseMenuMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PreviewMouseMenuMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PreviewMouseMenuMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:flremoting.protocol.PreviewMouseMenuMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&id_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PreviewMouseMenuMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PreviewMouseMenuMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flremoting.protocol.PreviewMouseMenuMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // optional int32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
  }

  // optional int32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flremoting.protocol.PreviewMouseMenuMessage)
  return target;
}

size_t PreviewMouseMenuMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flremoting.protocol.PreviewMouseMenuMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
    }

    // optional int32 x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
    }

    // optional int32 y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PreviewMouseMenuMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PreviewMouseMenuMessage*>(
      &from));
}

void PreviewMouseMenuMessage::MergeFrom(const PreviewMouseMenuMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flremoting.protocol.PreviewMouseMenuMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PreviewMouseMenuMessage::CopyFrom(const PreviewMouseMenuMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flremoting.protocol.PreviewMouseMenuMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreviewMouseMenuMessage::IsInitialized() const {
  return true;
}

void PreviewMouseMenuMessage::InternalSwap(PreviewMouseMenuMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PreviewMouseMenuMessage, y_)
      + sizeof(PreviewMouseMenuMessage::y_)
      - PROTOBUF_FIELD_OFFSET(PreviewMouseMenuMessage, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

std::string PreviewMouseMenuMessage::GetTypeName() const {
  return "flremoting.protocol.PreviewMouseMenuMessage";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace flremoting
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flremoting::protocol::PreviewSizeMessage*
Arena::CreateMaybeMessage< ::flremoting::protocol::PreviewSizeMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flremoting::protocol::PreviewSizeMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::flremoting::protocol::PreviewCanvasMessage*
Arena::CreateMaybeMessage< ::flremoting::protocol::PreviewCanvasMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flremoting::protocol::PreviewCanvasMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::flremoting::protocol::PreviewMouseMenuMessage*
Arena::CreateMaybeMessage< ::flremoting::protocol::PreviewMouseMenuMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flremoting::protocol::PreviewMouseMenuMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
